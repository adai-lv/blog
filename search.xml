<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java OOM之元空间异常</title>
      <link href="/articles/java/oom-zhi-yuan-kong-jian-yi-chang.html"/>
      <url>/articles/java/oom-zhi-yuan-kong-jian-yi-chang.html</url>
      
        <content type="html"><![CDATA[<p>分析什么情况会导致元空间异常：<strong><font color="red">java.lang.OutOfMemoryError: Metaspace</font></strong> 出现，并提供示例代码的同时为您提供解决指南。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>前文 <a href="http://blog.lvmaohai.cn/articles/java/oom-zhi-chi-jiu-dai-yi-chang.html" target="_blank" rel="noopener">Java OOM之持久代异常</a> 已经提过，PermGen区域用于存储类的名称和字段，类的方法，方法的字节码，常量池，JIT优化等，但从 <strong>Java8</strong> 开始，Java 中的内存模型发生了重大变化：引入了称为 <strong><font color="red">Metaspace</font></strong> 的新内存区域，而删除了PermGen区域。请注意：不是简单的将 <strong><font color="red">PermGen</font></strong> 区所存储的内容直接移到 <strong><font color="red">Metaspace</font></strong> 区，PermGen区中的某些部分，已经移动到了普通堆里面。</p><p><img src="/images/article/java-oom-03.png" alt=""></p><p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：<font color="red">元空间并不在虚拟机中，而是使用本地内存。</font>因此，默认情况下，元空间的大小仅受本地内存限制，但可以通过以下参数来指定元空间的大小： </p><ul><li><p><strong><font color="red">-XX:MetaspaceSize</font></strong> 设置初始化的 Metaspace 大小。</p><p>该值越大触发<strong>Metaspace GC</strong>的时机就越晚。随着GC的到来，虚拟机会根据实际情况调控Metaspace的大小，可能增加上限也可能降低。在默认情况下，这个值大小根据不同的平台在12M到20M浮动。</p><p>使用 <strong>java -XX:+PrintFlagsInitial</strong> 命令查看本机的初始化参数，<strong>-XX:Metaspacesize</strong>为：21810376B（大约20.8M）</p></li><li><p><strong><font color="red">-XX:MaxMetaspaceSize</font></strong>，设置 Metaspacesize 上限的大小，默认是没有限制的</p><p>这个参数用于限制<strong>Metaspace 增长</strong>的上限，防止因为某些情况导致<strong>Metaspace</strong>无限的使用本地内存，影响到其他程序。</p><p>在本机上该参数的默认值为：4294967295B（大约4096MB）。 </p></li><li><p><strong><font color="red">-XX:MinMetaspaceFreeRatio</font></strong></p><p>当进行过<strong>Metaspace GC</strong>之后，会计算当前<strong>Metaspace</strong>的空闲空间比，如果空闲比小于这个参数，那么虚拟机将增长<strong>Metaspace</strong>的大小。</p><p>设置该参数可以控制<strong>Metaspace</strong>的增长的速度，太小的值会导致<strong>Metaspace</strong>增长的缓慢，<strong>Metaspace</strong>的使用逐渐趋于饱和，可能会影响之后类的加载。而太大的值会导致<strong>Metaspace</strong>增长的过快，浪费内存。</p><p>在本机该参数的默认值为40，也就是40%。</p></li><li><p><strong><font color="red">-XX:MaxMetaspaceFreeRatio</font></strong></p><p>当进行过<strong>Metaspace GC</strong>之后， 会计算当前<strong>Metaspace</strong>的空闲空间比，如果空闲比大于这个参数，那么虚拟机会释放<strong>Metaspace</strong>的部分空间。</p><p>在本机该参数的默认值为70，也就是70%。</p></li><li><p><strong><font color="red">-XX:MinMetaspaceExpansion</font></strong> 设置 Metaspace 增长时的最小幅度。</p><p>在本机上该参数的默认值为340784B（大约330KB为）。</p></li><li><p><strong><font color="red">-XX:MaxMetaspaceExpansion</font></strong> 设置 Metaspace 增长时的最大幅度。</p><p>在本机上该参数的默认值为5452592B（大约为5MB）。</p></li></ul><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>Java8 做出如此改变的原因包括但不限于：</p><ul><li><p>应用程序所需要的<strong>PermGen区</strong>大小很难预测，设置太小会触发<strong>PermGen OutOfMemoryError</strong>错误，过度设置导致资源浪费。</p></li><li><p>提升GC性能，在 <strong>HotSpot</strong> 中的每个垃圾收集器需要专门的代码来处理存储在 <strong>PermGen</strong> 中的类的元数据信息。从 <strong>PermGen</strong> 分离类的元数据信息到 <strong>Metaspace</strong>，由于 <strong>Metaspace</strong> 的分配具有和 <strong>Java Heap</strong> 相同的地址空间，因此 <strong>Metaspace</strong> 和 <strong>Java Heap</strong> 可以无缝的管理，而且简化了 <strong>FullGC</strong> 的过程，以至将来可以并行的对元数据信息进行垃圾收集，而没有 <strong>GC</strong> 暂停。</p></li><li><p>支持进一步优化，比如：<strong>G1</strong> 并发类的卸载，也算为将来做准备吧。</p></li></ul><p>正如你所看到的，元空间大小的要求取决于加载的类的数量以及这种类声明的大小。 所以很容易看到 <strong><font color="red">java.lang.OutOfMemoryError: Metaspace</font></strong> 主要原因：太多的类或太大的类加载到元空间。</p><h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p>正如上文中所解释的，元空间的使用与加载到JVM中的类的数量密切相关。</p><p>下面的代码是最简单的例子：</p><pre><code>import javassist.ClassPool;public class MetaspaceTest {    static ClassPool cp = ClassPool.getDefault();    public static void main(String[] args) throws Exception{        for (int i = 0; ; i++) {             Class c = cp.makeClass("eu.plumbr.demo.Generated" + i).toClass();            System.out.println(i);        }    }}</code></pre><p>程序运行中不停的生成新类，所有的这些类的定义将被加载到<strong>Metaspace</strong>区，直到空间被完全占用并且抛出 <strong><font color="red">java.lang.OutOfMemoryError: Metaspace</font></strong> 异常。</p><p>当使用 <font color="red">-XX：MaxMetaspaceSize=32m</font> 启动时，大约加载30000多个类时就会死机。</p><pre><code>3102331024Exception in thread "main" javassist.CannotCompileException: by java.lang.OutOfMemoryError: Metaspace    at javassist.ClassPool.toClass(ClassPool.java:1170)    at javassist.ClassPool.toClass(ClassPool.java:1113)    at javassist.ClassPool.toClass(ClassPool.java:1071)    at javassist.CtClass.toClass(CtClass.java:1275)    at com.phlicode.MetaspaceTest.main(MetaspaceTest.java:12)    .....</code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>第一种解决方案是显而易见的，既然应用程序会耗尽内存中的<strong>Metaspace</strong>区空间，那么应该增加其大小，更改启动配置增加如下参数：</p><pre><code>// 告诉JVM：Metaspace允许增长到512，然后才能抛出异常-XX：MaxMetaspaceSize = 512m</code></pre><p>第二种解决方案是删除此参数来完全解除对<strong>Metaspace</strong>大小的限制（默认是没有限制的）。默认情况下，对于64位服务器端JVM，<strong>MetaspaceSize</strong>默认大小是21M（初始限制值），一旦达到这个限制值，<strong>FullGC</strong>将被触发进行类卸载，并且这个限制值将会被重置，新的限制值依赖于<strong>Metaspace</strong>的剩余容量。如果没有足够空间被释放，这个限制值将会上升，反之亦然。在技术上<strong>Metaspace</strong>的尺寸可以增长到交换空间，而这个时候本地内存分配将会失败。</p><p>可以通过修改各种启动参数来“快速修复”这些内存溢出错误，但需要正确区分是否只是推迟或者隐藏了 <strong><font color="red">java.lang.OutOfMemoryError</font></strong> 的症状。如果应用程序确实存在内存泄漏或者本来就加载了一些不合理的类，那么所有这些配置都只是推迟问题出现的时间而已，实际也不会改善任何东西。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> OOM </tag>
            
            <tag> Metaspace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java OOM之持久代异常</title>
      <link href="/articles/java/oom-zhi-chi-jiu-dai-yi-chang.html"/>
      <url>/articles/java/oom-zhi-chi-jiu-dai-yi-chang.html</url>
      
        <content type="html"><![CDATA[<p>分析什么情况会导致持久代空间异常：<strong><font color="red">java.lang.OutOfMemoryError: Permgen space</font></strong> 出现，并提供示例代码的同时为您提供解决指南。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-oom-02.jpg" alt="JVM内存模型示意图"></p><p>Java 应用程序在启动时，会指定所需要的堆内存大小，它被分割成两个不同的区域：<font color="red">Heap Space（堆空间）</font> 和 <font color="red">Permgen Space（持久代空间 Permanent Generation）</font>：</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-oom-01.png" alt=""></p><p>持久代空间的大小可以在 JVM（Java虚拟机）启动时，通过如下参数设置：</p><ul><li><strong><font color="red">-XX：PermSize</font></strong> 设置<strong>持久代</strong>初始值。</li><li><strong><font color="red">-XX：MaxPermSize</font></strong> 设置<strong>持久代</strong>最大值。</li></ul><p>如果没有显式设置，则将使用特定平台的默认值。</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>要理解 <strong><font color="red">java.lang.OutOfMemoryError: PermGen space</font></strong> 出现的原因，首先需要理解 <strong>Permanent Generation</strong> 的用处是什么？</p><p>持久代主要存储的是每个类的信息，比如：类加载器引用、运行时常量池（所有常量、字段引用、方法引用、属性）、字段(Field)数据、方法(Method)数据、方法代码、方法字节码等等。<strong>PermGen</strong> 的大小取决于被加载类的数量以及类的大小。</p><p>因此，我们可以得出：<strong><font color="red">java.lang.OutOfMemoryError: PermGen space</font></strong> 异常的原因是：太多的类或者太大的类被加载到 <strong>permanent generation（持久代）</strong>，导致持久代所在区域的内存已被耗尽。</p><h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p>① 最简单的示例</p><p>正如前面所描述的，PermGen的使用与加载到JVM类的数量有密切关系，下面是一个最简单的示例：</p><pre><code>import javassist.ClassPool;public class MicroGenerator {    public static void main(String[] args) throws Exception {        for (int i = 0; i &lt; 100_000_000; i++) {            generate("cn.moondev.User" + i);        }    }    public static Class generate(String name) throws Exception {        ClassPool pool = ClassPool.getDefault();        return pool.makeClass(name).toClass();    }}</code></pre><p>运行时请设置JVM参数：<strong><font color="red">-XX:MaxPermSize=5m</font></strong>，值越小越好。需要注意的是JDK8已经完全移除持久代空间，取而代之的是元空间（<strong><font color="red">Metaspace</font></strong>），所以示例最好的JDK1.7下运行。</p><p>代码在运行时不停的生成类并加载到持久代中，直到撑满持久代内存空间，最后抛出 <strong><font color="red">java.lang.OutOfMemoryError: PermGen space</font></strong> 异常。代码中类的生成使用了 <strong>javassist</strong> 库。</p><p>② Redeploy-time</p><p>更复杂和实际的一个例子就是 <strong>Redeploy</strong>（重新部署，可以想象一下开发时，使用idea时按ctrl + F5时的过程）。</p><p>在从服务器卸载应用程序时，当前的 <strong>classloader</strong> 以及 <strong>加载的class</strong> 在没有实例引用的情况下，持久代的内存空间会被 <strong>GC</strong> 清理并回收。如果应用中有 <strong>类的实例</strong> 对当前的 <strong>classloader</strong> 的引用，那么 <strong>Permgen区</strong> 的 <strong>class</strong> 将无法被卸载，导致 <strong>Permgen区</strong> 的内存一直增加直到出现 <strong>Permgen space</strong> 错误。</p><p>不幸的是，许多第三方库以及糟糕的资源处理方式（比如：线程、JDBC驱动程序、文件系统句柄）使得卸载以前使用的类加载器变成了一件不可能的事。反过来就意味着在每次重新部署过程中，应用程序所有的类的先前版本将仍然驻留在 <strong>Permgen区</strong> 中，你的每次部署都将生成几十甚至几百M的垃圾。</p><p>就以线程和JDBC驱动来说说。很多人都会使用线程来处理一下周期性或者耗时较长的任务，这个时候一定要注意线程的生命周期问题，你需要确保线程不能比你的应用程序活得还长。否则，如果应用程序已经被卸载，线程还在继续运行，这个线程通常会维持对应用程序的 <strong>classloader</strong> 的引用，造成的结果就不再多说。多说一句，开发者有责任处理好这个问题，特别是如果你是第三方库的提供者的话，一定要提供线程关闭接口来处理清理工作。</p><p>让我们想象一个使用JDBC驱动程序连接到关系数据库的示例应用程序。当应用程序部署到服务器上的时：服务器创建一个 <strong>classloader</strong> 实例来加载应用所有的类（包含相应的JDBC驱动）。根据JDBC规范，JDBC驱动程序（比如：com.mysql.jdbc.Driver）会在初始化时将自己注册到java.sql.DriverManager中。该注册过程中会将驱动程序的一个实例存储在DriverManager的静态字段内，代码可以参考：</p><pre><code>// com.mysql.jdbc.Driver源码package com.mysql.jdbc;public class Driver extends NonRegisteringDriver implements java.sql.Driver {    public Driver() throws SQLException {    }    static {        try {            DriverManager.registerDriver(new Driver());        } catch (SQLException var1) {            throw new RuntimeException("Can\'t register driver!");        }    }}// 再看下DriverManager对应代码private final static CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = new CopyOnWriteArrayList&lt;&gt;();public static synchronized void registerDriver(java.sql.Driver driver,DriverAction da) throws SQLException {    if(driver != null) {        registeredDrivers.addIfAbsent(new DriverInfo(driver, da));    } else {        throw new NullPointerException();    }}</code></pre><p>现在，当从服务器上卸载应用程序的时候，<strong><font color="red">java.sql.DriverManager</font></strong> 仍将持有那个驱动程序的引用，进而持有用于加载应用程序的 <strong>classloader</strong> 的一个实例的引用。这个 <strong>classloader</strong> 现在仍然引用着应用程序的所有类。如果此程序启动时需要加载2000个类，占用约10MB永久代（PermGen）内存，那么只需要5~10次重新部署，就会将默认大小的永久代（PermGen）塞满，然后就会触发 <strong><font color="red">java.lang.OutOfMemoryError: PermGen space</font></strong> 错误并崩溃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>① 解决初始化时的 <strong>OutOfMemoryError</strong></p><p>当在应用程序启动期间，需要加载所有的类到 <strong>PermGen区域</strong> ，而触发由于 <strong>PermGen 耗尽</strong> 引起的 <strong>OutOfMemoryError</strong> 时，我们只需要增加它的大小。 </p><p>为此，请更改应用程序启动配置，并添加（或增加，如果存在）-XX：MaxPermSize参数，类似以下示例：</p><pre><code>$ java -XX:MaxPermSize=512m PackageName.ClassName</code></pre><p>② 解决 <strong>Redeploy</strong> 时的 <strong>OutOfMemoryError</strong></p><p>如果是你自己代码的问题请及时修改，如果是第三方库，请试着搜索一下是否存在”关闭”接口，如果没有给开发者提交一个bug或者issue吧。</p><p>③ 解决运行时 <strong>OutOfMemoryError</strong></p><p>首先，需要检查是否允许 <strong><font color="red">GC</font></strong> 从 <strong><font color="red">PermGen</font></strong> 卸载类，JVM 的标准配置相当保守，只要类一创建，即使已经没有实例引用它们，其仍将保留在内存中，特别是当应用程序需要动态创建大量的类但其生命周期并不长时，允许 JVM 卸载类对应用大有助益，可以通过在启动脚本中添加以下配置参数来实现：</p><pre><code>-XX:+CMSClassUnloadingEnabled</code></pre><p>默认情况下，这个配置是未启用的，如果启用它，<strong><font color="red">GC</font></strong> 将扫描 <strong><font color="red">PermGen</font></strong> 区并清理已经不再使用的类。但请注意，这个配置只在 <strong><font color="red">UseConcMarkSweepGC</font></strong> 的情况下生效，如果你使用其他 <strong>GC算法</strong>，比如：<strong>ParallelGC</strong> 或者 <strong>Serial GC</strong> 时，这个配置无效。所以使用以上配置时，请配合：</p><pre><code>-XX:+UseConcMarkSweepGC</code></pre><p>如果已经确保 JVM 可以卸载类，但是仍然出现内存溢出问题，那么应该继续分析 <strong><font color="red">dump文件</font></strong>，使用以下命令生成dump文件：</p><pre><code>jmap -dump:file=dump.hprof,format=b &lt;process-id&gt;</code></pre><p>当你拿到生成的堆转储文件，并利用像 <strong>Eclipse Memory Analyzer Toolkit</strong> 这样的工具来寻找应该卸载却没被卸载的类加载器，然后对该类加载器加载的类进行排查，找到可疑对象，分析使用或者生成这些类的代码，查找产生问题的根源并解决它。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> OOM </tag>
            
            <tag> PermgenSpace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java OOM之堆空间异常</title>
      <link href="/articles/java/oom-zhi-dui-kong-jian-yi-chang.html"/>
      <url>/articles/java/oom-zhi-dui-kong-jian-yi-chang.html</url>
      
        <content type="html"><![CDATA[<p>分析什么情况会导致堆空间异常：<strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 出现，并提供示例代码的同时为您提供解决指南。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-oom-02.jpg" alt="JVM内存模型示意图"></p><p>Java 应用程序在启动时，会指定所需要的堆内存大小，它被分割成两个不同的区域：<font color="red">Heap Space（堆空间）</font> 和 <font color="red">Permgen Space（持久代空间 Permanent Generation）</font>：</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-oom-01.png" alt=""></p><p>Java中堆空间是 JVM 管理的最大一块内存空间，其中堆被划分成两个不同的区域：新生代（Young）和老年代（Tenured），新生代又被划分为3个区域：<strong><font color="red">Eden、From Survivor、To Survivor。</font></strong></p><p>堆空间的大小可以在 JVM（Java虚拟机）启动时，通过如下参数设置：</p><ul><li><p><strong><font color="red">-Xmx</font></strong> 设置 JVM 最大堆空间。</p></li><li><p><strong><font color="red">-Xms</font></strong> 设置 JVM 初始堆空间。</p><p>此值可以设置与 <strong>-Xmx</strong> 相同，以避免每次垃圾回收完成后JVM重新分配内存。</p></li><li><p><strong><font color="red">-Xmn</font></strong>：设置年轻代。</p><p>在整个堆堆空间大小确定的情况下，增大年轻代将会减小年老代，反之亦然，此值关系到JVM垃圾回收，对系统性能影响较大，<strong><font color="red">官方推荐配置为整个堆大小的3/8</font></strong>。</p></li></ul><p>如果没有显式设置，则将使用特定平台的默认值。</p><p>当应用程序试图向堆空间添加更多的数据，但堆却没有足够的空间来容纳这些数据时，将会触发 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常。需要注意的是： <font color="red">即使有足够的物理内存可用，只要达到堆空间设置的大小限制，此异常仍然会被触发。</font></p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>触发 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 最常见的原因就是应用程序需要的堆空间是XXL号的，但是JVM提供的却是S号。解决方法也很简单，提供更大的堆空间即可。</p><p>除了前面的因素还有更复杂的成因：</p><ul><li><strong>流量/数据量峰值：</strong> 应用程序在设计之初均有用户量和数据量的限制，某一时刻，当用户数量或数据量突然达到一个峰值，并且这个峰值已经超过了设计之初预期的阈值，那么以前正常的功能将会停止，并触发 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常。</li><li><strong>内存泄漏：</strong> 特定的编程错误会导致你的应用程序不停的消耗更多的内存，每次使用有内存泄漏风险的功能就会留下一些不能被回收的对象到堆空间中，随着时间的推移，泄漏的对象会消耗所有的堆空间，最终触发 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常。</li></ul><h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p>① 堆空间运行时设置不合理示例</p><p>下面的代码试图创建 2 x 1024 x 1024 个元素的整型数组，当你尝试编译并指定 <strong>12M 堆空间</strong> 运行时（java -Xmx12m OOMTest），将会失败并抛出 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常，而当你指定 <strong>13M 堆空间</strong> 时，将正常的运行。</p><pre><code>class OOMTest {    static final int SIZE = 2*1024*1024;    public static void main(String[] a) {        int[] i = new int[SIZE];    }}</code></pre><p>运行如下：</p><pre><code>$ javac OOMTest.java$ java -Xmx12m OOMTestException in thread "main" java.lang.OutOfMemoryError: Java heap space    at OOMTest.main(OOMTest.java:6)$ java -Xmx13m OOMTest</code></pre><p>② 程序内存泄漏示例</p><p>在Java中，当开发者创建一个新对象（比如：new Integer(5)）时，不需要自己开辟内存空间，而是把它交给JVM。在应用程序整个生命周期类，JVM负责检查哪些对象可用，哪些对象未被使用。未使用对象将被丢弃，其占用的内存也将被回收，这一过程被称为垃圾回收。JVM负责垃圾回收的模块集合被称为垃圾回收器（GC）。</p><p>Java的内存自动管理机制依赖于GC定期查找未使用对象并删除它们。Java中的内存泄漏是由于GC无法识别一些已经不再使用的对象，而这些未使用的对象一直留在堆空间中，这种堆积最终会导致 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常。</p><p>我们可以非常容易的写出导致内存泄漏的Java代码：</p><pre><code>public class KeylessEntry {    static class Key {        Integer id;        Key(Integer id) {            this.id = id;        }        @Override        public int hashCode() {            return id.hashCode();        }    }    public static void main(String[] args) {        Map&lt;Key,String&gt; m = new HashMap&lt;&gt;();        while(true) {            for(int i = 0; i &lt; 10000; i++) {                if(!m.containsKey(new Key(i))) {                    m.put(new Key(i), "Number:" + i);                }            }        }    }}</code></pre><p>代码中 <strong>HashMap</strong> 为本地缓存，第一次while循环，会将10000个元素添加到缓存中。后面的while循环中，由于key已经存在于缓存中，缓存的大小将一直会维持在10000。但事实真的如此吗？由于 <strong>Key 实体</strong> 没有实现 <strong>equals()</strong> 方法，导致for循环中每次执行 <strong>m.containsKey(new Key(i))</strong> 结果均为false，其结果就是HashMap中的元素将一直增加。</p><p>随着时间的推移，越来越多的 <strong>Key 对象</strong> 进入堆空间且不能被垃圾收集器回收（m为局部变量，GC会认为这些对象一直可用，所以不会回收），直到所有的堆空间被占用，最后抛出 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常。</p><blockquote><p>上面的代码直接运行可能很久也不会抛出异常，可以在启动时使用-Xmx参数，设置堆内存大小，或者在for循环后打印HashMap的大小，执行后会发现HashMap的size一直再增长。</p></blockquote><p>解决方法也非常简单，只要 <strong>Key</strong> 实现自己的 <strong>equals</strong> 方法即可：</p><pre><code>Overridepublic boolean equals(Object o) {    boolean response = false;    if (o instanceof Key) {        response = (((Key)o).id).equals(this.id);    }    return response;}</code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>先要确保有 <strong>足够的堆空间</strong> 来正常运行你的应用程序，在JVM的启动配置中分配 <strong>1024M堆空间</strong>，如下配置：</p><pre><code>-Xmx1024m</code></pre><p>当然也可以使用其他单位，比如用G表示GB，K表示KB。下面的示例都表示最大堆空间为1GB：</p><pre><code>java -Xmx1073741824 com.mycompany.MyClassjava -Xmx1048576k com.mycompany.MyClassjava -Xmx1024m com.mycompany.MyClassjava -Xmx1g com.mycompany.MyClass</code></pre><p>然后，更多的时候，单纯地增加堆空间不能解决所有的问题。如果你的程序存在内存泄漏，一味的增加堆空间也只是推迟 <strong><font color="red">java.lang.OutOfMemoryError: Java heap space</font></strong> 异常出现的时间而已，并未解决这个隐患。除此之外，垃圾收集器在GC时，应用程序会停止运行直到GC完成，而增加堆空间也会导致GC时间延长，进而影响程序的吞吐量。</p><p>如果你想完全解决这个问题，那就好好提升自己的编程技能吧，当然运用好 <strong>Debuggers, profilers, heap dump analyzers</strong> 等工具，可以让你的程序最大程度的避免内存泄漏问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> OOM </tag>
            
            <tag> HeapSpace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职场感悟</title>
      <link href="/articles/zhi-chang-gan-wu.html"/>
      <url>/articles/zhi-chang-gan-wu.html</url>
      
        <content type="html"><![CDATA[<ul><li>第01感悟：自学能力是竞争力之本。</li><li>第02感悟：自信能让你与众不同，尽管有时的自信有点莫名其妙。</li><li>第03感悟：兴趣是学习效率的催化剂，培养自己的职业兴趣。</li><li>第04感悟：学习应给自己设置虚拟的项目目标，以做项目的形式提升学习效果，只有这样学到的内容才会深入而实用，切忌无目标地学到哪算哪。</li><li>第05感悟：话语权首先来自能力，而不是职位权力。</li><li>第06感悟：难学的技能一旦掌握更具竞争优势。</li><li>第07感悟：用阶段性成果不断增强自己的自信，且最终支持自信的是能力，而不是自大。</li><li>第08感悟：做自己喜欢的事，如果那是自己的兴趣最好。</li><li>第09感悟：不论身处多么困难的环境，即使觉得前途渺茫，也不要放弃学习，否则就是“自断筋脉”。</li><li>第10感悟：长期安逸的工作意味着将来更大的风险。</li><li>第11感悟：机遇很重要，但你得有能力才能抓住它。</li><li>第12感悟：职场首先比拼的不是智商，而是坚持与好习惯。</li><li>第13感悟：当短期利益与长远利益无法得兼时，选择长远利益。</li><li>第14感悟：学历是很重要的敲门砖，即便你的能力很强；学历尽管很重要，但能力才是最终的通行证。</li><li>第15感悟：技术细节掌握得越深，解决问题时就越能游刃有余。</li><li>第16感悟：技能的发展应采取深度先于广度且交替进行的方式，只有这样，面对大量的新知识才能更淡定。</li><li>第17感悟：越难的技术问题，其所蕴藏的知识越丰富，也越具学习价值。</li><li>第18感悟：每次积累的点滴知识，一定会在将来不知不觉地发挥效能。</li><li>第19感悟：通过文档化的方式传承知识给后继者是你的基本责任，因为你作为后继者时也希望如此，这也是对自己负责的一种表现。</li><li>第20感悟：别人对你价值的认可，其实不是简单地根据你的自身能力，而是根据你对他人和团队的贡献。</li><li>第21感悟：英语的听说能力只要有合适的环境，并勇于张嘴练习的情况下能快速地提高，不必担心。</li><li>第22感悟：在软件开发活动中，应设法通过有效的技术途径去解决工程困境。</li><li>第23感悟：不要用沉默的方式一味地迎合别人的要求，据理力争或许才是作为的表现。</li><li>第24感悟：流程、文档的作用，不只是引导我们做完事，更能规范我们的行为和帮助培养工作习惯。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 职场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink 快速上手</title>
      <link href="/articles/flink/kuai-su-shang-shou.html"/>
      <url>/articles/flink/kuai-su-shang-shou.html</url>
      
        <content type="html"><![CDATA[<p>我们将从一个小的应用实例开始，从设置Flink项目到在 IDE 或命令行上运行 Flink 流分析程序。</p><p>Wikipedia 提供了一个IRC频道，其中记录了对 Wiki 的所有编辑。Flink 程序读取此通道中实时数据，并计算 <strong><font color="red">每个用户在给定时间窗口内编辑的字节数</font></strong>。这很容易使用 Flink 在几分钟内实现，但它将为您提供一个良好的基础，从而开始自己构建更复杂的分析程序。</p><h2 id="设置-Maven-项目"><a href="#设置-Maven-项目" class="headerlink" title="设置 Maven 项目"></a>设置 Maven 项目</h2><blockquote><p>要求是使用Maven 3.x 和 Java 8.x 安装。</p></blockquote><p>我们将使用Flink Maven Archetype来创建项目结构。</p><h3 id="Maven-创建项目"><a href="#Maven-创建项目" class="headerlink" title="Maven 创建项目"></a>Maven 创建项目</h3><pre><code>$ mvn archetype:generate \    -DarchetypeGroupId=org.apache.flink \    -DarchetypeArtifactId=flink-quickstart-java \    -DarchetypeVersion=1.9.0 \    -DgroupId=com.phlicode \    -DartifactId=flink-tutorial \    -Dversion=0.1 \    -Dpackage=com.phlicode.wikiedits \    -DinteractiveMode=false</code></pre><p>您可以重新编辑 <strong>groupId</strong>，<strong>artifactId</strong>，<strong>version</strong>，<strong>package</strong>。使用上面的参数，Maven将创建一个如下所示的项目结构：</p><pre><code>$ tree wikieditswikiedits├── pom.xml└── src    └── main        ├── java        │   └── com        │       └── phlicode        │           └── wikiedits        │               ├── BatchJob.java        │               └── StreamingJob.java        └── resources            └── log4j.properties</code></pre><h3 id="删除示例程序"><a href="#删除示例程序" class="headerlink" title="删除示例程序"></a>删除示例程序</h3><p>我们的 <strong>pom.xml</strong> 文件已经在根目录中添加了 Flink 依赖项，并且有二个示例 Flink 程序（src/main/java/com/philcode/wikiedits）。可以删除示例程序，因为我们将从头开始：</p><pre><code>$ rm wikiedits/src/main/java/com/philcode/wikiedits/*.java</code></pre><h3 id="设置-Flink-依赖项"><a href="#设置-Flink-依赖项" class="headerlink" title="设置 Flink 依赖项"></a>设置 Flink 依赖项</h3><p>需要将 <strong>Flink Wikipedia</strong> 连接器添加为依赖关系，以便可以在程序中使用它。编辑 <strong>pom.xml</strong> 文件的 <strong>dependencies</strong> 部分。</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;        &lt;artifactId&gt;flink-java&lt;/artifactId&gt;        &lt;version&gt;${flink.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;        &lt;artifactId&gt;flink-streaming-java_${scala.binary.version}&lt;/artifactId&gt;        &lt;version&gt;${flink.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;        &lt;artifactId&gt;flink-clients_${scala.binary.version}&lt;/artifactId&gt;        &lt;version&gt;${flink.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;        &lt;artifactId&gt;flink-connector-wikiedits_${scala.binary.version}&lt;/artifactId&gt;        &lt;version&gt;${flink.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;        &lt;version&gt;1.7.7&lt;/version&gt;        &lt;scope&gt;runtime&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j&lt;/artifactId&gt;        &lt;version&gt;1.2.17&lt;/version&gt;        &lt;scope&gt;runtime&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><blockquote><p>注意：已添加好的 flink-connector-wikiedits_2.11 依赖项。（此示例和Wikipedia连接器的灵感来自 Apache Samza 的 Hello Samza 示例）</p></blockquote><h2 id="编写-Flink-程序"><a href="#编写-Flink-程序" class="headerlink" title="编写 Flink 程序"></a>编写 Flink 程序</h2><p>打开 IDEA 编辑器（推荐使用），并导入 Maven 项目，下载安装依赖包；</p><p>创建新文件 <strong>src/main/java/com/philcode/wikiedits/WikipediaAnalysis.java</strong></p><pre><code>package com.phlicode.wikiedits;public class WikipediaAnalysis {    public static void main(String[] args) throws Exception {    }}</code></pre><ul><li><p>创建一个 StreamExecutionEnvironment（创建执行环境）</p><p>  这可用于设置执行参数并创建从外部系统读取的源，把它添加到 main 方法里。</p><pre><code>  StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</code></pre></li><li><p>创建一个从 Wikipedia IRC 日志中读取的源（source）</p><pre><code>  DataStream&lt;WikipediaEditEvent&gt; edits = env.addSource(new WikipediaEditsSource());</code></pre><p>  这创建了一个可以进一步处理 <strong>DataStream</strong> 的 <strong>WikipediaEditEvent 数据元</strong>。</p></li><li><p>通过 keyBy 创建键入流（KeySelector）(转换）</p><blockquote><p>在我们的例子中，是确定每个用户在特定时间窗口中添加或删除的字节数，比如说五秒；窗口中编辑的字节数的总和，应该是每个唯一的用户；</p><p>首先必须指定我们要在用户名上键入流，也就是说此流上的算子操作应考虑用户名；</p><p>对于键入流，我们必须提供一个KeySelector。</p></blockquote><pre><code>  KeyedStream&lt;WikipediaEditEvent, String&gt; keyedEdits = edits          .keyBy(new KeySelector&lt;WikipediaEditEvent, String&gt;() {              @Override              public String getKey(WikipediaEditEvent event) {                  return event.getUser();              }          });</code></pre><p>  这为我们提供了一个 WikipediaEditEvent 具有 String Key 的用户名。</p></li><li><p>通过时间窗口计算每个用户编辑的字节数（转换）</p><blockquote><p>在 KeyedStream 流上加上时间窗口，并根据这些窗口中的数据元计算结果；</p><p>窗口指定要在其上执行计算的 Stream 片；</p><p>在无限的数据元流上计算聚合时需要 Windows；</p><p>在我们的例子中，每五秒聚合一次每个用户所编辑的字节数总和。</p></blockquote><pre><code>  DataStream&lt;Tuple2&lt;String, Long&gt;&gt; result = keyedEdits          .timeWindow(Time.seconds(5))          .aggregate(new AggregateFunction&lt;WikipediaEditEvent, Tuple2&lt;String, Long&gt;, Tuple2&lt;String, Long&gt;&gt;() {              @Override              public Tuple2&lt;String, Long&gt; createAccumulator() {                  return new Tuple2&lt;&gt;("", 0L);              }              @Override              public Tuple2&lt;String, Long&gt; add(WikipediaEditEvent value, Tuple2&lt;String, Long&gt; accumulator) {                  accumulator.f0 = value.getUser();                  accumulator.f1 += value.getByteDiff();                  return accumulator;              }              @Override              public Tuple2&lt;String, Long&gt; getResult(Tuple2&lt;String, Long&gt; accumulator) {                  return accumulator;              }              @Override              public Tuple2&lt;String, Long&gt; merge(Tuple2&lt;String, Long&gt; a, Tuple2&lt;String, Long&gt; b) {                  return new Tuple2&lt;&gt;(a.f0, a.f1 + b.f1);              }          });</code></pre><p>  第一个调用 <strong>.timeWindow()</strong> 指定有五秒钟的翻滚（非重叠）窗口。</p><p>  第二个调用 <strong>.aggregate()</strong> 为每个唯一键在每个窗口切片上指定一个聚合转换。</p><p>  在例子中，从初始值（“”，0L）开始，然后在该时间窗口内为用户添加每次编辑的字节差异。对于每个用户生成的 Stream 包含一个Tuple2&lt;String，Long&gt;，每五秒钟发出一次。</p></li><li><p>将流打印到控制台（sink）</p><pre><code>  result.print();</code></pre></li><li><p>执行 Flink 作业</p><pre><code>  env.execute("flink stream job.");</code></pre><p>  这是启动实际 Flink 作业所必需的。</p><p>  所有算子操作（例如创建源，转换和接收器）仅构建内部算子操作的图形。</p><p>  只有在execute()被调用时才会在集群上抛出或在本地计算机上执行此算子操作图。</p></li></ul><p><strong>完整的代码</strong></p><pre><code>package com.phlicode.wikiedits;import org.apache.flink.api.common.functions.AggregateFunction;import org.apache.flink.api.java.functions.KeySelector;import org.apache.flink.api.java.tuple.Tuple2;import org.apache.flink.streaming.api.datastream.DataStream;import org.apache.flink.streaming.api.datastream.KeyedStream;import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;import org.apache.flink.streaming.api.windowing.time.Time;import org.apache.flink.streaming.connectors.wikiedits.WikipediaEditEvent;import org.apache.flink.streaming.connectors.wikiedits.WikipediaEditsSource;public class WikipediaAnalysis {    public static void main(String[] args) throws Exception {        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        DataStream&lt;WikipediaEditEvent&gt; edits = env.addSource(new WikipediaEditsSource());        KeyedStream&lt;WikipediaEditEvent, String&gt; keyedEdits = edits                .keyBy(new KeySelector&lt;WikipediaEditEvent, String&gt;() {                    @Override                    public String getKey(WikipediaEditEvent event) {                        return event.getUser();                    }                });        DataStream&lt;Tuple2&lt;String, Long&gt;&gt; result = keyedEdits                .timeWindow(Time.seconds(5))                .aggregate(new AggregateFunction&lt;WikipediaEditEvent, Tuple2&lt;String, Long&gt;, Tuple2&lt;String, Long&gt;&gt;() {                    @Override                    public Tuple2&lt;String, Long&gt; createAccumulator() {                        return new Tuple2&lt;&gt;("", 0L);                    }                    @Override                    public Tuple2&lt;String, Long&gt; add(WikipediaEditEvent value, Tuple2&lt;String, Long&gt; accumulator) {                        accumulator.f0 = value.getUser();                        accumulator.f1 += value.getByteDiff();                        return accumulator;                    }                    @Override                    public Tuple2&lt;String, Long&gt; getResult(Tuple2&lt;String, Long&gt; accumulator) {                        return accumulator;                    }                    @Override                    public Tuple2&lt;String, Long&gt; merge(Tuple2&lt;String, Long&gt; a, Tuple2&lt;String, Long&gt; b) {                        return new Tuple2&lt;&gt;(a.f0, a.f1 + b.f1);                    }                });        result.print();        env.execute("flink stream job. ");    }}</code></pre><h2 id="运行-Flink-程序"><a href="#运行-Flink-程序" class="headerlink" title="运行 Flink 程序"></a>运行 Flink 程序</h2><p>可以使用 IDEA Run 或命令行上运行 Maven 命令，如下所示：</p><pre><code>$ cd ${project_root}# 构建项目$ mvn clean package# 执行主类$ mvn exec:java -Dexec.mainClass=com.phlicode.wikiedits.WikipediaAnalysis</code></pre><p>进入项目根目录下，执行 mvn 命令。</p><p>输出应该类似于：</p><pre><code>1&gt; (Richthes,2)3&gt; (WP 1.0 bot,8812)4&gt; (CaroleHenson,-30)2&gt; (Renerpho,201)4&gt; (Keenaz28,2)3&gt; (PiotruśW,-100)1&gt; (00:1700:C271:1100:9DF1:5E97:E734:6250,0)3&gt; (Toughpigs,1858)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 实时计算 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink 简介</title>
      <link href="/articles/flink/jian-jie.html"/>
      <url>/articles/flink/jian-jie.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识-Flink"><a href="#初识-Flink" class="headerlink" title="初识 Flink"></a>初识 Flink</h2><p>Flink 起源于 2010~2014 年由三所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目（Stratosphere），2014年4月 Stratosphere 的代码捐赠给了 Apache 软件基金会，参加这个孵化项目的初始成员是 Stratosphere 系统的核心开发人员，2014年12月，Flink 一跃成为 Apache 软件基金会的顶级项目。</p><p>Flink 项目的理念是: “<font color="red">为分布式、高性能、高可用以及准确的流处理应用程序打造的开源流处理框架</font>”。</p><p>Apache Flink 是一个分布式流批一体化的开源平台。Flink 的核心是一个提供数据分发、通信以及自动容错的流计算引擎。Flink 在流计算之上构建批处理，并且原生的支持迭代计算，内存管理以及程序优化。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/flink-01.jpg" alt=""></p><h2 id="重要特点"><a href="#重要特点" class="headerlink" title="重要特点"></a>重要特点</h2><h3 id="事件驱动型-Event-driven"><a href="#事件驱动型-Event-driven" class="headerlink" title="事件驱动型(Event-driven)"></a>事件驱动型(Event-driven)</h3><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以 kafka 为代表的消息队列几乎都是事件驱动型应用。</p><p>与之不同的就是 SparkStreaming 微批次，如图:</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/flink-02.jpg" alt=""></p><p>事件驱动型:</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/flink-03.jpg" alt=""></p><h3 id="流与批的世界观"><a href="#流与批的世界观" class="headerlink" title="流与批的世界观"></a>流与批的世界观</h3><p><strong>批处理</strong>的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。</p><p><strong>流处理</strong>的特点是无界、实时, 无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。</p><p>在 spark 的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。</p><p>在 flink 的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</p><p><strong>无界数据流:</strong> 无界数据流有一个开始但是没有结束，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理 event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序(例如事件发生的顺序)获取 event，以便能够推断结果完整性。</p><p><strong>有界数据流:</strong> 有界数据流有明确定义的开始和结束，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/flink-04.jpg" alt=""></p><p><font color="red">这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。</font></p><h3 id="分层-api"><a href="#分层-api" class="headerlink" title="分层 api"></a>分层 api</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/flink-05.jpg" alt=""></p><p>最底层级的抽象仅仅提供了有状态流，它将通过过程函数(Process Function) 被嵌入到 DataStream API 中。底层过程函数(Process Function) 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。</p><p>实际上，大多数应用并不需要上述的底层抽象，而是针对核心 API(Core APIs) 进行编程，比如 DataStream API(有界或无界流数据)以及 DataSet API(有界数据集)。这些 API 为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换(transformations)，连接(joins)，聚合(aggregations)，窗口操作(windows) 等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些 API 处理的数据类型以类(classes)的形式由各自的编程语言所表示。</p><p>TableAPI 是以表为中心的声明式编程，其中表可能会动态变化(在表达流数据时)。Table API 遵循(扩展的)关系模型:表有二维数据结构(schema)(类似于关系数据库中的表)，同时 API 提供可比较的操作，例如 select、project、join、group-by、aggregate 等。Table API 程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何。</p><p>尽管 Table API 可以通过多种类型的用户自定义函数(UDF)进行扩展，其仍不如核心 API 更具表达能力，但是使用起来却更加简洁(代码量更少)。除此之外，Table API 程序在执行之前会经过内置优化器进行优化。</p><p>可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 TableAPI 与 DataStream 以及 DataSet 混合使用。</p><p>Flink 提供的最高层级的抽象是 SQL。这一层抽象在语法与表达能力上与 Table API 类似，但是是以 SQL 查询表达式的形式表现程序。SQL 抽象与 Table API 交互密切，同时 SQL 查询可以直接在 Table API 定义的表上执行。</p><h2 id="其它特点"><a href="#其它特点" class="headerlink" title="其它特点"></a>其它特点</h2><ul><li>支持事件时间（event-time）和处理时间（processing-time）语义</li><li>精确一次（exactly-once）的状态一致性保证</li><li>低延迟，每秒处理数百万个事件，毫秒级延迟</li><li>与众多常用存储系统的连接</li><li>高可用，动态扩展，实现 7*24 小时全天候运行</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 实时计算 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之Stream</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-stream.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-stream.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h2><p>Stream API 借助于 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。</p><p>流主要有三部分构成：获取一个数据源（source）→ 数据转换 → 执行操作获取想要的结果。每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-01.jpg" alt=""></p><h2 id="Stream的特点"><a href="#Stream的特点" class="headerlink" title="Stream的特点"></a>Stream的特点</h2><ul><li><p><strong>无存储性</strong></p><p>流不是存储元素的数据结构；相反，它需要从数据结构，数组，生成器函数或IO管道中获取数据并通过流水线地(计算)操作对这些数据进行转换。</p></li><li><p><strong>函数式编程</strong></p><p>Stream上操作会产生一个新结果，而不会去修改原始数据。比如filter过滤操作它只会根据原始集合中将未被过滤掉的元素生成一个新的Stream，而不是真的去删除集合中的元素。</p></li><li><p><strong>惰性求值</strong></p><p>很多Stream操作(如filter,map,distinct等)都是惰性实现，这样做为了优化程序的计算。比如说，要从一串数字中找到第一个能被10整除的数，程序并不需要对这一串数字中的每个数字进行测试。流操作分为两种：中间操作(返回值仍为Stream，仍可执行操作)，终断操作(结束Stream操作)。中间操作都是惰性操作。</p></li><li><p><strong>无限数据处理</strong></p><p>集合的大小是有限的，但是流可以对无限的数据执行操作。比如可以使用limit或findFirst这样的操作让Stream操作在有限的时间内结束。</p></li><li><p><strong>一次性消费</strong></p><p>流只能使用(“消费”)一次，一旦调用终断操作，流就不能再次使用，必须重新创建一个流。就像迭代器一样，遍历一遍后，想要再次遍历需要重新创建一个迭代器。</p></li></ul><h2 id="Stream的源的构建"><a href="#Stream的源的构建" class="headerlink" title="Stream的源的构建"></a>Stream的源的构建</h2><p>有多种方式可以构建流：</p><ol><li><p>静态工厂</p><ul><li>Stream.of()</li><li>IntStream.of()</li><li>LongStream.of()</li><li>DoubleStream.of()</li></ul></li><li><p>Collection 和 Array</p><ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays.stream(T array)</li></ul></li><li><p>字符流</p><ul><li>BufferdReader.lines()</li></ul></li><li><p>文件路径</p><ul><li>Files.walk()</li><li>Files.lines()</li><li>Files.find()</li></ul></li><li><p>其它</p><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul></li></ol><p>生成流的时候，除了可以生成串行流，也可以生成并行流，即并行处理流的操作。</p><pre><code>final List&lt;String&gt; strings = Arrays.asList("ab", "a", "abc", "b", "bc");//串行流long count1 = strings.stream()    .filter(s -&gt; {        System.out.println("thread:" + Thread.currentThread().getId());        return s.startsWith("a");    })    .count();System.out.println(count1);//并行流long count2 = strings.parallelStream()    .filter(s -&gt; {        System.out.println("thread:" + Thread.currentThread().getId());        return s.startsWith("a");    })    .count();System.out.println(count2);</code></pre><h2 id="Stream操作的分类"><a href="#Stream操作的分类" class="headerlink" title="Stream操作的分类"></a>Stream操作的分类</h2><table><thead><tr><th align="left">Stream操作</th><th align="left">操作分类</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">中间操作(Intermediate operations)</td><td align="left">无状态(Stateless)</td><td align="left">unordered(), filter(), map(), mapToInt(), mapToLong(), mapToDouble(), flatMap(), flatMapToInt(), flatMapToLong(), flatMapToDouble(), peek();</td></tr><tr><td align="left">中间操作(Intermediate operations)</td><td align="left">有状态(Stateful)</td><td align="left">distinct();  sorted();  limit(), skip()</td></tr><tr><td align="left">终断操作(Terminal operations)</td><td align="left">非短路操作</td><td align="left">forEach(), forEachOrdered(); reduce(), collect(), max(), min(), count(); toArray()</td></tr><tr><td align="left">终断操作(Terminal operations)</td><td align="left">短路操作(short-circuiting)</td><td align="left">anyMatch(), allMatch(), noneMatch(); findFirst(), findAny()</td></tr></tbody></table><ul><li><p><strong>中间操作</strong></p><p>返回一个新的Stream。中间操作都是惰性的，它们不会对数据源执行任何操作，仅仅是创建一个新的Stream。在终断操作执行之前，数据源的遍历不会开始。</p></li><li><p><strong>终断操作</strong></p><p>遍历流并生成结果或者副作用。执行完终断操作后，Stream就会被“消费”掉，如果想再次遍历数据源，则必须重新创建新的Stream。大多数情况下，终断操作的遍历都是即时的——在返回之前完成数据源的遍历和处理，只有iterator()和spliterator()不是，这两个方法用于提供额外的遍历功能——让开发者自己控制数据源的遍历以实现现有Stream操作中无法满足的操作(实际上现有的Stream操作基本能满足需求，所以这两个方法目前用的不多)。</p></li></ul><h2 id="Stream的操作"><a href="#Stream的操作" class="headerlink" title="Stream的操作"></a>Stream的操作</h2><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="有状态操作"><a href="#有状态操作" class="headerlink" title="有状态操作"></a>有状态操作</h4><ul><li><p><strong>map</strong></p><blockquote><p>使用传入的Function对象对Stream中的所有元素进行处理，返回的Stream对象中的元素为原元素处理后的结果。</p></blockquote><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-02.jpg" alt=""></p><pre><code>  // map，平方数  List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);  Collection&lt;Integer&gt; squareNums = nums.stream()      .map(n -&gt; n * n)      .collect(Collectors.toList());  squareNums.forEach(integer -&gt; System.out.println(integer));</code></pre></li><li><p><strong>flatMap</strong></p><blockquote><p>map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。flatMap，则是一对多映射关系的。</p></blockquote><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/md-images/article/java-stream-03.jpg" alt=""></p><pre><code>  Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(          Arrays.asList(1),          Arrays.asList(2, 3),          Arrays.asList(4, 5, 6)  );  List&lt;Integer&gt; integerStream = inputStream      .flatMap(list -&gt; list.stream())      .map(n -&gt; n * n)      .collect(Collectors.toList());  integerStream.forEach(System.out::println);</code></pre></li><li><p><strong>filter</strong></p><blockquote><p>filter 对原始 Stream 进行某项测试，通过测试的元素被留下来生成一个新 Stream</p></blockquote><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-04.jpg" alt=""></p><pre><code>  List&lt;String&gt; strings = Arrays.asList("ab", "a", "abc", "b", "bc");  strings.stream()      .filter(s -&gt; s.startsWith("a"))      .forEach(System.out::println);</code></pre></li><li><p><strong>peek</strong></p><blockquote><p>peek，遍历Stream中的元素，和forEach类似，区别是peek不会“消费”掉Stream，而forEach会消费掉Stream；peek是中间操作所以也是惰性的，只有在Stream“消费”的时候生效。</p></blockquote><pre><code>  // peek  Stream.of("one", "two", "three", "four")      .peek(e -&gt; System.out.println("原来的值: " + e))      .map(String::toUpperCase)      .peek(e -&gt; System.out.println("转换后的值: " + e))      .collect(Collectors.toList());</code></pre></li><li><p><strong>limit 和 skip</strong></p><blockquote><p>limit取头部的数据(或者说截取前面的元素)<br>skip取尾部的数据(跳过前面的元素)</p></blockquote><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-05.jpg" alt=""></p><pre><code>  //limit, 返回 Stream 的前面 n 个元素  List&lt;String&gt; strings = Arrays.asList("ab", "a", "abc", "b", "bc");  strings.stream()      .limit(3)      .forEach(System.out::println);  System.out.println("==============");  //skip 则是扔掉前 n 个元素  strings.stream()      .skip(3)      .forEach(System.out::println);</code></pre></li></ul><h4 id="无状态操作"><a href="#无状态操作" class="headerlink" title="无状态操作"></a>无状态操作</h4><ul><li><p><strong>distinct</strong></p><blockquote><p>去除重复的元素</p></blockquote><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-06.jpg" alt=""></p><pre><code>  Stream&lt;String&gt; distinctString = Stream.of("a","b","b","c")      .distinct();  distinctString.forEach(System.out::println);</code></pre></li><li><p><strong>sorted</strong></p><blockquote><p>对Stream中的元素进行排序。<br>有两个重载方法，其中 Stream&lt;T&gt; sorted() 需要元素实现了Comparable接口。</p></blockquote><pre><code>  Arrays.asList("ab", "a", "abc", "b", "bc").stream()      .sorted()      .forEach(System.out::println);  Arrays.asList("ab", "a", "abc", "b", "bc").stream()      .sorted((o1, o2) -&gt; {          return o1.compareTo(o2);      })      .forEach(System.out::println);</code></pre></li></ul><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><h4 id="短路操作"><a href="#短路操作" class="headerlink" title="短路操作"></a>短路操作</h4><p>短路操作其实就和我们日常编程用到的&amp;&amp;和||运算符处理过程类似，遇到一个满足条件的就立即停止判断。</p><ul><li><p><strong>anyMatch</strong></p><blockquote><p>只要其中有一个元素满足传入的Predicate时返回True，否则返回False。<br>前面的中间操作只要anyMatch中的条件成立后，就不再执行。与逻辑运算符 || 类似。</p></blockquote><pre><code>  boolean anyMatchReturn = Arrays.asList("ab", "a", "abc", "b", "bc").stream()      .peek(s -&gt; System.out.println(s))      .anyMatch(s -&gt; s.startsWith("b"));  System.out.println(anyMatchReturn);</code></pre><p>  运行结果:</p><pre><code>  ab  a  abc  b  true</code></pre></li><li><p><strong>allMatch</strong></p><blockquote><p>所有元素均满足传入的Predicate时返回True，否则False。<br>只要allMatch条件有一个为false，中间操作将终止执行。与逻辑运算符&amp;&amp;类似</p></blockquote><pre><code>  boolean allMatchReturn = Arrays.asList("ab", "a", "abc", "b", "bc").stream()  .peek(s -&gt; System.out.println(s))  .allMatch(s -&gt; s.startsWith("b"));  System.out.println(allMatchReturn);</code></pre><p>  运行结果:</p><pre><code>  ab  false</code></pre></li><li><p><strong>noneMatch</strong></p><blockquote><p>所有元素均不满足传入的Predicate时返回True，否则False。<br>只要allMatch条件有一个为true，中间操作将终止执行。</p></blockquote><pre><code>  boolean noneMatchReturn = Arrays.asList("ab", "a", "abc", "b", "bc").stream()      .peek(s -&gt; System.out.println(s))      .noneMatch(s -&gt; s.startsWith("b"));  System.out.println(noneMatchReturn);</code></pre><p>  运行结果:</p><pre><code>  ab  a  abc  b  false</code></pre></li></ul><h4 id="非短路操作"><a href="#非短路操作" class="headerlink" title="非短路操作"></a>非短路操作</h4><ul><li><p><strong>forEach</strong></p><blockquote><p>对所有元素进行迭代处理，无返回值</p></blockquote><pre><code>  Arrays.asList("ab", "a", "abc", "b", "bc")      .forEach(System.out::println);</code></pre></li><li><p><strong>reduce</strong></p><blockquote><p>计算机术语规约，通过累加器accumulator，对前面的序列进行累计操作，并最终返回一个值。<br>累加器accumulator有两个参数，第一个是前一次累加的结果，第二个是前面集合的下一个元素。<br>通过reduce，可以实现 average, sum, min, max, count。</p></blockquote><p>  reduce 有三个重载方法：</p><ol><li><p><strong>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</strong></p><blockquote><p>这里的identity是初始值。</p></blockquote><p>下面将会把几个字符组装成一个字符串</p><pre><code> String concat = Stream.of("A", "B", "C", "D")     .reduce("H", (x, y) -&gt; {         System.out.println("x=" + x + ", y=" + y);         return x.concat(y);     }); System.out.println(concat);</code></pre><p> 输出结果：</p><pre><code> x=H, y=A x=HA, y=B x=HAB, y=C x=HABC, y=D HABCD</code></pre></li><li><p><strong>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</strong></p><blockquote><p>由于没有初始值，这里输出Optional类型，避免空指针</p></blockquote><pre><code> Optional&lt;String&gt; concat2Optional = Stream.of("A", "B", "C", "D").reduce((x, y) -&gt; {     System.out.println("x=" + x + ", y=" + y);     return x.concat(y); }); System.out.println(concat2Optional.orElse("default"));</code></pre><p> 输出结果：</p><pre><code> x=A, y=B x=AB, y=C x=ABC, y=D ABCD</code></pre></li><li><p><strong>&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</strong></p><blockquote><p>这个方法非常复杂，下次再细讲</p></blockquote></li></ol></li><li><p><strong>collect</strong></p><blockquote><p>collect方法可以通过收集器collector将流转化为其他形式，比如字符串、list、set、map。</p></blockquote><p>  collect有两个重载方法，其中一个是最常用的：</p><p>  <strong>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</strong></p><p>  官方为了我们转换方便，已经在Collectors类中封装了各种各样的collector，下面看一些常用的收集器。</p><p>  <strong><em>拼接字符串</em></strong></p><pre><code>  String collect1 = Stream.of("A", "B", "C", "D")  .collect(Collectors.joining());  System.out.println(collect1);</code></pre><p>  <strong><em>转成List</em></strong></p><pre><code>  List&lt;String&gt; collect2 = Stream.of("A", "B", "C", "D")  .collect(Collectors.toList());</code></pre><p>  <strong><em>转成set</em></strong></p><pre><code>  Set&lt;String&gt; collect3 = Stream.of("A", "B", "C", "D")  .collect(Collectors.toSet());</code></pre><p>  <strong><em>转成map</em></strong></p><p>  Collectors的toMap方法签名如下所示，前一个mapper转换成map中的key,后一个mapper转换成map中的value</p><pre><code>  Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(  Function&lt;? super T, ? extends K&gt; keyMapper,   Function&lt;? super T, ? extends U&gt; valueMapper  )  Map&lt;String, String&gt; collect3 = Stream.of("A", "B", "C", "D")  .collect(Collectors.toMap(      s -&gt; s,      s -&gt; s  ));</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之Optional</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-optional.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-optional.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些情况下，首先要判断某个参数或者某个方法的返回值是否为null，才能继续操作该参数。</p><p>对于某些链式操作需要多次通过if语句判断是否为空，才能确保不抛出NullPointerException，这段非空判断的代码显得非常冗长和恶心。比如下面这段代码：</p><pre><code>String isoCode = "default";if (user != null) {    Address address = user.getAddress();    if (address != null) {        Country country = address.getCountry();        if (country != null) {            isocode = country.getIosCode();            if (isocode != null) {                isocode = isocode.toUpperCase();            }        }    }}</code></pre><p>在java 8里，JDK引入了一个Optional类，该类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。通过本文的学习，我们看下如何通过Optional类重写上面那段判空代码。</p><h2 id="Optional初始化"><a href="#Optional初始化" class="headerlink" title="Optional初始化"></a>Optional初始化</h2><p>Optional类的构造方法是私有方法，所以只能通过它的静态工厂方法进行初始化。它的初始化方法有如下几种：</p><ul><li><p><strong>&lt;T&gt; Optional&lt;T&gt; of(T value)</strong></p><blockquote><p>为非null的值创建一个Optional。如果传入参数为null，抛出NullPointerException。</p></blockquote><pre><code>  // 调用工厂方法创建Optional实例  Optional&lt;String&gt; name = Optional.of("hello");  // 传入参数为null，抛出NullPointerException.  Optional&lt;String&gt; someNull = Optional.of(null);</code></pre></li><li><p><strong>&lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</strong></p><blockquote><p>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。<br>它和 of 的区别是可以传null值。</p></blockquote><pre><code>  // 调用工厂方法创建Optional实例  Optional&lt;String&gt; name = Optional.ofNullable("hello");  // 传入参数为null，不抛出NullPointerException，返回一个空的Optional.  Optional&lt;String&gt; someNull = Optional.ofNullable(null);</code></pre></li><li><p><strong>&lt;T&gt; Optional&lt;T&gt; empty()</strong></p><blockquote><p>是 ofNullable静态工厂方法，传null值时的实现，返回一个空的Optional。</p></blockquote><pre><code>  Optional empty = Optional.empty();</code></pre></li></ul><h2 id="Optional类的其它方法"><a href="#Optional类的其它方法" class="headerlink" title="Optional类的其它方法"></a>Optional类的其它方法</h2><ul><li><p><strong>boolean isPresent()</strong></p><blockquote><p>如果值存在返回true，否则返回false。</p></blockquote><pre><code>  // false  Optional&lt;String&gt; empty = Optional.ofNullable(null);  System.out.println(empty.isPresent());  // true  Optional&lt;String&gt; optionalS2 = Optional.of(s2);  System.out.println(optionalS2.isPresent());</code></pre></li><li><p><strong>T get()</strong></p><blockquote><p>如果Optional有值则将其返回，否则抛出NoSuchElementException</p></blockquote><pre><code>  // 获取hello  Optional.of("hello").get();  // 抛出NoSuchElementException  Optional.empty().get();</code></pre></li><li><p><strong>void ifPresent (Consumer&lt;? super T&gt; consumer)</strong></p><blockquote><p>如果Optional实例有值则调用consumer，否则不做处理。</p></blockquote><pre><code>  //调用ifPresent方法里面的consumer  Optional.of("hello")          .ifPresent(System.out::println);</code></pre></li><li><p><strong>T orElse(T other)</strong></p><blockquote><p>如果有值则将其返回，否则返回指定的其它值</p></blockquote><pre><code>  // 输出null  System.out.println(Optional.empty().orElse("null"));  // 输出hello  System.out.println(Optional.of("hello").orElse("null"));</code></pre></li><li><p><strong>T orElseGet (Supplier&lt;? extends T&gt; other)</strong></p><blockquote><p>orElseGet与orElse方法类似，区别在于得到的默认值。<br>orElse方法将传入的字符串作为默认值，<br>orElseGet方法可以接受 Supplier 接口的实现用来生成默认值。</p></blockquote><pre><code>  // 输出null  System.out.println(Optional.empty().orElseGet(() -&gt; "null"));  // 输出hello  System.out.println(Optional.of("hello").orElseGet(() -&gt; "null"));</code></pre></li><li><p><strong>&lt;X extends Throwable&gt; T orElseThrow (Supplier&lt;? extends X&gt; exceptionSupplier) throws X</strong></p><blockquote><p>如果有值则将其返回，否则抛出 supplier 接口创建的异常。</p></blockquote><pre><code>  // 抛出exception  try {      Optional.empty()              .orElseThrow(()-&gt;new Exception("为空"));  } catch (Exception e) {      e.printStackTrace();  }</code></pre></li><li><p><strong>&lt;U&gt; Optional&lt;U&gt; map (Function&lt;? super T, ? extends U&gt; mapper)</strong></p><blockquote><p>如果参数 mapper 有值，则调用map方法执行mapper参数的Function方法得到返回值。<br>如果mapper的返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。<br>如果传入的mapper参数是null，抛出NullPointerException。</p></blockquote><pre><code>  // 输出 JACK  Optional&lt;String&gt; stringOptional = Optional.of("jack")      .map((value) -&gt; value.toUpperCase());  System.out.println(stringOptional.orElse("default"));  // 输出 default  Optional&lt;String&gt; stringOptional1 = Optional.of("jack")      .map((value) -&gt; null);  System.out.println(stringOptional1.orElse("default"));  // 输出 default，并且不会调用mapper  String s2 = null;  Optional&lt;String&gt; stringOptional2 = Optional.ofNullable(s2)      .map((value) -&gt; value.toUpperCase());  System.out.println(stringOptional2.orElse("default"));  // 如果参数mapper为null，抛NullPointerException异常  try {      String s3 = null;      Optional&lt;String&gt; stringOptional3 = Optional.ofNullable(s3)          .map(null);      System.out.println(stringOptional3.orElse("default"));  } catch (Exception e) {}</code></pre></li><li><p><strong>&lt;U&gt; Optional&lt;U&gt; flatMap (Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</strong></p><blockquote><p>flatMap与map方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</p></blockquote><pre><code>  // flatMap，输出 JACK  Optional&lt;String&gt; stringOptional4 = Optional.of("jack")      .flatMap(value -&gt; Optional.ofNullable(value.toUpperCase()));  System.out.println(stringOptional4.orElse("default"));  // flatMap，输出 default  Optional&lt;String&gt; stringOptional5 = Optional.of("jack")      .flatMap(value -&gt; Optional.ofNullable(null));  System.out.println(stringOptional5.orElse("default"));  // flatMap，输出 default，并且不会调用mapper  String s6 = null;  Optional&lt;String&gt; stringOptional6 = Optional.ofNullable(s6)      .flatMap(value -&gt; Optional.ofNullable(value.toUpperCase()));  System.out.println(stringOptional6.orElse("default"));  // flatMap 如果map的参数mapper为null，抛NullPointerException异常  try {      String s7 = null;      Optional&lt;String&gt; stringOptional7 = Optional.ofNullable(s7)          .flatMap(null);      System.out.println(stringOptional7.orElse("default"));  } catch (Exception e) {      System.out.println("出错了");  }</code></pre></li><li><p><strong>Optional&lt;T&gt; filter (Predicate&lt;? super T&gt; predicate)</strong></p><blockquote><p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</p></blockquote><pre><code>  // 输出default  String filterString = Optional.of("hugo")          .filter(s -&gt; "jack".equals(s))          .orElse("default");  System.out.println(filterString);  // 输出hugo  String filterString2 = Optional.of("hugo")          .filter(s -&gt; "hugo".equals(s))          .orElse("default");  System.out.println(filterString2);  // 输出default，断言接口里面的语句不会执行  String nullableString = null;  String filterString3 = Optional.ofNullable(nullableString)          .filter(s -&gt; {              System.out.println("测试是否调用");              return "jack".equals(s);          })          .orElse("default");  System.out.println(filterString3);</code></pre></li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>经过上面学习Optional的相关API，已经对它有了一定的了解。下面，我们运用上面的知识解决在前言中遗留的问题。</p><pre><code>ioscode = Optional.ofNullable(user)        .map(u -&gt; u.getAddress())        .map(addr -&gt; addr.getCountry())        .map(country -&gt; country.getIosCode())        .map(String::toUpperCase)        .orElse("default");</code></pre><p>从上面的学习可以知道，只有Optional是empty的，map方法不会被调用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之Lambda</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-lambda.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-lambda.html</url>
      
        <content type="html"><![CDATA[<p>Lambda表达式是Java8的新语法糖。它其实是一个匿名函数，可以把Lambda表达式理解为一段约定好怎么传递参数和返回参数的一段代码，由编译器负责参数类型的猜测并执行结果。我们通过lambda表达式可以写出更简洁、更灵活的代码。</p><h2 id="Lambda-表达式语法"><a href="#Lambda-表达式语法" class="headerlink" title="Lambda 表达式语法"></a>Lambda 表达式语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><blockquote><p>“-&gt;” 操作符将 Lambda 表达式分为两个部分：左侧为参数列表，右侧为 Lambda 体。</p></blockquote><pre><code># Lambda 体，单行表达式，直接写在 “-&gt;” 右侧(parameters) -&gt; expression# Lambda 体，有多行表达式，用 “{}” 包含起来(parameters) -&gt; { statements; }</code></pre><h3 id="具体的语法"><a href="#具体的语法" class="headerlink" title="具体的语法"></a>具体的语法</h3><table><thead><tr><th align="left">场景</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">无参数，无返回值</td><td align="left">() -&gt; System.out.println(“Helo”);</td></tr><tr><td align="left">无参数，有返回值</td><td align="left">() -&gt; 10;</td></tr><tr><td align="left">有一个参数，无返回值</td><td align="left">x -&gt; System.out.print(x);</td></tr><tr><td align="left">有一个参数，有返回值</td><td align="left">x -&gt; x + 10;</td></tr><tr><td align="left">有多个参数，没有返回值</td><td align="left">(x, y) -&gt; System.out.println(x + y);</td></tr><tr><td align="left">有多个参数，有返回值</td><td align="left">(x, y) -&gt; x + y;</td></tr></tbody></table><p>其实，每个lambda表达式的返回值都是一个函数式编程的接口。</p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><ul><li><p>无参数，无返回值</p><pre><code>  Runnable runnable = () -&gt; System.out.println("hello");  new Thread(runnable).start();</code></pre></li><li><p>无参数，有返回值</p><pre><code>  Supplier&lt;Integer&gt; supplier = () -&gt; 10;  Integer number = supplier.get();  System.out.println(number);</code></pre></li><li><p>有一个参数，无返回值</p><pre><code>  Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);  or   Consumer&lt;String&gt; consumer = (x) -&gt; System.out.println(x);  or   Consumer&lt;String&gt; consumer = (x) -&gt; {      System.out.println(x);  };  consumer.accept("hello");</code></pre></li><li><p>有一个参数，有返回值</p><pre><code>  Function&lt;Integer,Integer&gt; function = x -&gt; x + 10;  or  Function&lt;Integer,Integer&gt; function = (x) -&gt; x + 10;  or  Function&lt;Integer, Integer&gt; function = (x) -&gt; {      return x + 10;  };  int result = function.apply(20);  System.out.println(result);</code></pre></li><li><p>多个参数，没有返回值</p><pre><code>  BiConsumer&lt;Integer, String&gt; consumer = (x, y) -&gt; {      System.out.println(x);      System.out.println(y);  };  or  BiConsumer&lt;Integer, String&gt; consumer = (Integer x, String y) -&gt; {      System.out.println(x);      System.out.println(y);  };  consumer.accept(100, "hello");</code></pre></li><li><p>多个参数，有返回值</p><pre><code>  BiFunction&lt;Integer, Integer, Integer&gt; function = (x, y) -&gt; x + y;  or  BiFunction&lt;Integer, Integer, Integer&gt; function = (Integer x, Integer y) -&gt; x + y;  or  BiFunction&lt;Integer, Integer, Integer&gt; function = (Integer x, Integer y) -&gt; {      return x + y;  };  int result = function.apply(10, 10);  System.out.println(result);</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之基本接口</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-ji-ben-jie-kou.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-ji-ben-jie-kou.html</url>
      
        <content type="html"><![CDATA[<p>不管lambda表达式还是Stream流式编程，Function、Consumer、Supplier、Predicate 四个接口是一切函数式编程的基础。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-function-01.jpg" alt=""></p><ul><li>Supplier<t>：T get()；无输入，“生产”一个T类型的返回值。</t></li><li>Consumer<t>：void accept(T t)；输入类型T，“消费”掉，无返回。</t></li><li>Function&lt;T, R&gt;：R apply(T t)；输入类型T返回类型R。</li><li>Predicate<t>：boolean test(T t)；输入类型T，并进行条件“判断”，返回true|false。</t></li></ul><h2 id="interface-Supplier-lt-T-gt"><a href="#interface-Supplier-lt-T-gt" class="headerlink" title="interface Supplier<T>"></a>interface Supplier&lt;T&gt;</h2><blockquote><p>该接口的中文直译是“提供者”，可以理解为定义一个lambda表达式，没有输入参数，返回一个T类型的值。</p></blockquote><pre><code>Supplier&lt;Integer&gt; supplier = () -&gt; 10;// 输出10System.out.println(supplier.get());</code></pre><h2 id="interface-Consumer-lt-T-gt"><a href="#interface-Consumer-lt-T-gt" class="headerlink" title="interface Consumer<T>"></a>interface Consumer&lt;T&gt;</h2><blockquote><p>该接口的中文直译是“消费”，可以理解为定义一个lambda表达式，接收一个T类型的参数，并且没有返回值。</p></blockquote><ul><li><p><strong>accept</strong> ：接收参数，并调用Consumer接口里的方法</p><pre><code>  Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x);  // 输出10  consumer.accept(10);</code></pre></li><li><p><strong>andThen</strong>：调用完consumer自己后，还调用andThen方法参数中指定的Consumer</p><pre><code>  Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x);  Consumer&lt;Integer&gt; plusSelf = x -&gt; System.out.println(x + x);  // 输出10以及20  consumer.andThen(plusSelf).accept(10);</code></pre></li></ul><h2 id="interface-Function-lt-T-R-gt"><a href="#interface-Function-lt-T-R-gt" class="headerlink" title="interface Function<T, R>"></a>interface Function&lt;T, R&gt;</h2><blockquote><p>该接口的中文直译是“函数”，可以理解为：定义一个lambda表达式，接收一个T类型的参数，返回一个R类型的值。</p></blockquote><ul><li><p><strong>apply</strong>：传入一个T类型的参数，返回一个R类型的值</p><pre><code>  Function&lt;Integer, Integer&gt; function = x -&gt; x + x;  // 输出20  System.out.println(function.apply(10));</code></pre></li><li><p><strong>compose</strong>：accept获取到的参数，先执行compose里面的Function，再执行原Function</p><pre><code>  Function&lt;Integer, Integer&gt; plusSelf = x -&gt; {      System.out.println("plusSelf");      return x + x;  };  Function&lt;Integer, String&gt; toString = x -&gt; {      System.out.println("toString");      return String.valueOf(x);  };  // 输出20，整数10先自加变成20，然后由toString转换成字符串  String string1 = toString.compose(plusSelf).apply(10);  System.out.println(string1);</code></pre></li><li><p><strong>andThen</strong>：与compose相反。先执行原Function，在执行andThen里面的Function。</p><pre><code>  Function&lt;Integer, Integer&gt; plusSelf = x -&gt; {      System.out.println("plusSelf");      return x + x;  };  Function&lt;Integer, String&gt; toString = x -&gt; {      System.out.println("toString");      return String.valueOf(x);  };  // 输出20, 先自加，再转换成字符串  String string2 = plusSelf.andThen(toString).apply(10);  System.out.println(string2);</code></pre></li></ul><h2 id="interface-Predicate-lt-T-gt"><a href="#interface-Predicate-lt-T-gt" class="headerlink" title="interface Predicate<T>"></a>interface Predicate&lt;T&gt;</h2><blockquote><p>该接口的中文直译是“断言”，用于返回false/true。T是lambda表达式的输入参数类型。</p></blockquote><ul><li><p><strong>test</strong>：测试test方法中输入参数是否满足接口中定义的lambda表达式</p><pre><code>  Predicate&lt;String&gt; test = x -&gt; "test".equals(x);  Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);  // 输出 true  System.out.println(test.test("test"));  // 输出 false  System.out.println(test.test("test_false"));</code></pre></li><li><p><strong>and</strong>：原 Predicate 接口和 and 方法中指定的 Predicate 接口要同时为true，test方法才为true。与逻辑运算符 &amp;&amp; 一致。</p><pre><code>  Predicate&lt;String&gt; test = x -&gt; "test".equals(x);  Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);  // 输出 false  System.out.println(test.and(test2).test("test"));</code></pre></li><li><p><strong>negate</strong>：对结果取反后再输出</p><pre><code>  Predicate&lt;String&gt; test = x -&gt; "test".equals(x);  Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);  // 输出 false  System.out.println(test.negate().test("test"));</code></pre></li><li><p><strong>or</strong>：原 Predicate 接口和 or 方法中指定的 Predicate 接口只要一个为true，test方法为true。与逻辑运算符 || 一致。</p><pre><code>  Predicate&lt;String&gt; test = x -&gt; "test".equals(x);  Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);  // 输出 false  System.out.println(test.or(test2).test("test"));</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之简介</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-jian-jie.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-jian-jie.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。</p><p>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：</p><pre><code>(1 + 2) * 3 - 4</code></pre><p>传统的过程式编程，可能这样写：</p><pre><code>var a = 1 + 2;var b = a * 3;var c = b - 4;</code></pre><p>函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：</p><pre><code>var result = subtract(multiply(add(1,2), 3), 4);</code></pre><p>这就是函数式编程。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>函数是”第一等公民”</p><p> 所谓”第一等公民”（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p><p> 举例来说，下面代码中的print变量就是一个函数，可以作为另一个函数的参数。</p><pre><code> var print = function(i) {    console.log(i); }; [1,2,3].forEach(print);</code></pre></li><li><p>只用”表达式”，不用”语句”</p><p> “表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p><p> 原因是函数式编程的开发动机，一开始就是为了处理运算（computation），不考虑系统的读写（I/O）。”语句”属于对系统的读写操作，所以就被排斥在外。</p><p> 当然，实际应用中，不做I/O是不可能的。因此，编程过程中，函数式编程只要求把I/O限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。</p></li><li><p>没有”副作用”</p><p> 所谓”副作用”（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p><p> 函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值.</p></li><li><p>不修改状态<br> 函数式编程只是返回新的值，不修改系统变量。</p><p> 在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。</p></li><li><p>引用透明</p><p> 引用透明（Referential transparency），指的是函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p><p> 其他类型的语言，函数的返回值往往与系统状态有关，不同的状态之下，返回值是不一样的。这就叫”引用不透明”，很不利于观察和理解程序的行为。</p></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p>代码简洁，开发快速</p></li><li><p>接近自然语言，易于理解<br> (1+2)*3-4用函数式语言表达</p><pre><code> add(1,2).multiply(3).subtract(4)</code></pre></li><li><p>更方便的代码管理</p><p> 不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p></li><li><p>易于”并发编程”<br> 函数式编程不需要考虑”死锁”（deadlock），因为它不修改变量，所以根本不存在”锁”线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署”并发编程”（concurrency）。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySpark之RDD入门</title>
      <link href="/articles/spark/pyspark-zhi-rdd-ru-men.html"/>
      <url>/articles/spark/pyspark-zhi-rdd-ru-men.html</url>
      
        <content type="html"><![CDATA[<h2 id="RDD的基本运算"><a href="#RDD的基本运算" class="headerlink" title="RDD的基本运算"></a>RDD的基本运算</h2><table><thead><tr><th align="left">RDD运算类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">转换（Transformation）</td><td align="left">转换运算将一个RDD转换为另一个RDD，但是由于RDD的lazy特性，转换运算不会立刻实际执行，它会等到执行到“动作”运算，才会实际执行。</td></tr><tr><td align="left">动作（Action）</td><td align="left">RDD执行动作运算之后，不会产生另一个RDD，它会产生数值、数组或写入文件系统；RDD执行动作运算后会立刻实际执行，并且连同之前的转换运算一起执行。</td></tr><tr><td align="left">持久化（Persistence）</td><td align="left">对于那些会重复使用的RDD， 可以将RDD持久化在内存中作为后续使用，以提高执行性能。</td></tr></tbody></table><h2 id="初始化-Spark-的上下环境"><a href="#初始化-Spark-的上下环境" class="headerlink" title="初始化 Spark 的上下环境"></a>初始化 Spark 的上下环境</h2><pre><code>from pyspark import SparkConf, SparkContextconf = SparkConf().setMaster("local").setAppName("My App")sc = SparkContext(conf = conf)</code></pre><h2 id="单个-RDD-“转换”运算"><a href="#单个-RDD-“转换”运算" class="headerlink" title="单个 RDD “转换”运算"></a>单个 RDD “转换”运算</h2><ol><li><p>创建RDD</p><blockquote><p>使用parallelize方法创建一个RDD</p></blockquote><pre><code>intRDD = sc.parallelize([3,1,2,5,5])stringRDD = sc.parallelize(['Apple','Orange','Grape','Banana','Apple'])</code></pre></li><li><p>collect()</p><blockquote><p>collect 可以把 RDD 类型的数据转换为 python 的数据类型</p></blockquote><pre><code>print (intRDD.collect())[3, 1, 2, 5, 5]print (stringRDD.collect())['APPLE', 'Orange', 'Grape', 'Banana','Apple']</code></pre></li><li><p>map()</p><blockquote><p>map 运算可以通过传入的函数，对RDD内每一个元素经过函数运算，并产生一个新的RDD；<br>下面的例子中，将intRDD中的每个元素加1之后返回，并转换为python数组；</p></blockquote><pre><code>print (intRDD.map(lambda x:x+1).collect())[4, 2, 3, 6, 6]</code></pre></li><li><p>filter()</p><blockquote><p>filter 运算可以用于对RDD内每一个元素进行筛选，并产生一个新的RDD；<br>下面的例子中，筛选intRDD中数字小于3的元素，筛选stringRDD中包含ra的字符串；</p></blockquote><pre><code>print (intRDD.filter(lambda x: x&lt;3).collect())[1, 2]print (stringRDD.filter(lambda x:'ra' in x).collect())['Orange', 'Grape']</code></pre></li><li><p>distinct()</p><blockquote><p>distinct 运算可以用于对RDD内重复的元素进行删除，并产生一个新的RDD；<br>下面的例子中，去除 intRDD 中的重复元素1；</p></blockquote><pre><code>print (intRDD.distinct().collect())[1, 2, 3, 5]</code></pre></li><li><p>randomSplit(weighs, *seed)</p><blockquote><p>randomSplit 运算将整个集合以随机数的方式按照比例分为多个RDD；<br>weights: 是一个数组,数组的长度即为划分成RDD的数量；<br>根据weight（权重值）将一个RDD划分成多个RDD,权重越高划分得到的元素较多的几率就越大；<br>seed: 是可选参数 ，作为random的种子；<br>下面的例子中，intRDD 按照0.4和0.6的比例将intRDD分为两个RDD；</p></blockquote><pre><code>sRDD = intRDD.randomSplit([0.4,0.6])print (len(sRDD))2print (sRDD[0].collect())[3, 1]print (sRDD[1].collect())[2, 5, 5]</code></pre></li><li><p>groupBy()</p><blockquote><p>groupBy 运算可以按照传入匿名函数的规则，将数据分为多个Array；<br>下面的例子中，将intRDD分为偶数和奇数：</p></blockquote><pre><code>result = intRDD.groupBy(lambda x : x % 2).collect()print (sorted([(x, sorted(y)) for (x, y) in result]))[(0, [2]), (1, [1, 3, 5, 5])]</code></pre></li></ol><h2 id="多个-RDD-“转换”运算"><a href="#多个-RDD-“转换”运算" class="headerlink" title="多个 RDD “转换”运算"></a>多个 RDD “转换”运算</h2><ol><li><p>创建RDD</p><blockquote><p>使用parallelize方法创建一个RDD</p></blockquote><pre><code>intRDD1 = sc.parallelize([3,1,2,5,5])intRDD2 = sc.parallelize([5,6])intRDD3 = sc.parallelize([2,7])</code></pre></li><li><p>union()</p><blockquote><p>使用union进行并集运算</p></blockquote><pre><code>print (intRDD1.union(intRDD2).union(intRDD3).collect())[3, 1, 2, 5, 5, 5, 6, 2, 7] </code></pre></li><li><p>intersection()</p><blockquote><p>使用intersection进行交集运算，取 RDD 的相同部分</p></blockquote><pre><code>print (intRDD1.intersection(intRDD2).collect())[5] </code></pre></li><li><p>subtract()</p><blockquote><p>使用subtract进行差集运算，取 RDD 的重复部分</p></blockquote><pre><code>print (intRDD1.subtract(intRDD2).collect())[2, 1, 3]</code></pre></li><li><p>cartesian()</p><blockquote><p>使用cartesian进行笛卡尔乘积运算</p></blockquote><pre><code>print (intRDD1.cartesian(intRDD2).collect())[(3, 5), (3, 6), (1, 5), (1, 6), (2, 5), (2, 6), (5, 5), (5, 6), (5, 5), (5, 6)]</code></pre></li></ol><h2 id="单个-RDD-“动作”运算"><a href="#单个-RDD-“动作”运算" class="headerlink" title="单个 RDD “动作”运算"></a>单个 RDD “动作”运算</h2><ol><li><p>创建RDD</p><blockquote><p>使用parallelize方法创建一个RDD</p></blockquote><pre><code>intRDD = sc.parallelize([3,1,2,5,5])</code></pre></li><li><p>读取元素</p><blockquote><p>可以使用下列命令读取RDD内的元素，这是Actions运算，所以会马上执行</p></blockquote><pre><code># 取第一条数据print (intRDD.first())3# 取前两条数据print (intRDD.take(2))[3, 1]# 升序排列，并取前3条数据print (intRDD.takeOrdered(3))[1, 2, 3]# 降序排列，并取前3条数据print (intRDD.takeOrdered(3,lambda x:-x))[5, 5, 3]</code></pre></li><li><p>统计功能</p><blockquote><p>可以将RDD内的元素进行统计运算</p></blockquote><pre><code># 统计print (intRDD.stats())(count: 5, mean: 3.2, stdev: 1.6, max: 5, min: 1)# 最小值print (intRDD.min())1# 最大值print (intRDD.max())5# 标准差print (intRDD.stdev())1.6# 计数print (intRDD.count())5# 求和print (intRDD.sum())16# 平均print (intRDD.mean())3.2</code></pre></li></ol><h2 id="单个-RDD-键值的“转换”运算"><a href="#单个-RDD-键值的“转换”运算" class="headerlink" title="单个 RDD 键值的“转换”运算"></a>单个 RDD 键值的“转换”运算</h2><blockquote><p>Spark RDD支持键值对运算，Key-Value运算是 mapreduce 运算的基础</p></blockquote><ol><li><p>创建RDD</p><blockquote><p>使用parallelize方法创建一个 RDD；<br>用元素类型为tuple元组的数组初始化 RDD；<br>每个tuple的第一个值将作为键，第二个元素将作为值；</p></blockquote><pre><code>kvRDD1 = sc.parallelize([(3,4),(3,6),(5,6),(1,2)])</code></pre></li><li><p>得到key和value值</p><blockquote><p>可以使用keys和values函数分别得到RDD的键数组和值数组</p></blockquote><pre><code>print (kvRDD1.keys().collect())[3, 3, 5, 1]print (kvRDD1.values().collect())[4, 6, 6, 2]</code></pre></li><li><p>筛选元素</p><blockquote><p>使用filter函数，可以按照键进行元素筛选，也可以通过值进行元素筛选；<br>注意：虽然RDD中是以键值对形式存在，但是本质上还是一个二元组，二元组的第一个值代表键，第二个值代表值；</p></blockquote><pre><code># 筛选键的值小于5的数据print (kvRDD1.filter(lambda x:x[0] &lt; 5).collect())[(3, 4), (3, 6), (1, 2)]# 筛选值的值小于5的数据print (kvRDD1.filter(lambda x:x[1] &lt; 5).collect())[(3, 4), (1, 2)]</code></pre></li><li><p>值运算</p><blockquote><p>可以使用mapValues方法处理value值；<br>下面的代码将value值进行了平方处理；</p></blockquote><pre><code>print (kvRDD1.mapValues(lambda x:x**2).collect())[(3, 16), (3, 36), (5, 36), (1, 4)]</code></pre></li><li><p>按照key排序</p><blockquote><p>可以使用sortByKey按照key进行排序，传入参数的默认值为true；<br>true 表示升序，false 表示倒序;</p></blockquote><pre><code>print (kvRDD1.sortByKey().collect())[(1, 2), (3, 4), (3, 6), (5, 6)]print (kvRDD1.sortByKey(True).collect())[(1, 2), (3, 4), (3, 6), (5, 6)]print (kvRDD1.sortByKey(False).collect())[(5, 6), (3, 4), (3, 6), (1, 2)]</code></pre></li><li><p>合并相同key值的数据</p><blockquote><p>可以使用reduceByKey函数对具有相同key值的数据进行合并；</p></blockquote><pre><code>print (kvRDD1.reduceByKey(lambda x,y:x+y).collect())[(1, 2), (3, 10), (5, 6)]</code></pre></li></ol><h2 id="多个-RDD-键值“转换”运算"><a href="#多个-RDD-键值“转换”运算" class="headerlink" title="多个 RDD 键值“转换”运算"></a>多个 RDD 键值“转换”运算</h2><ol><li><p>创建RDD</p><blockquote><p>使用parallelize方法创建一个 RDD；<br>用元素类型为tuple元组的数组初始化 RDD；<br>每个tuple的第一个值将作为键，第二个元素将作为值；</p></blockquote><pre><code>kvRDD1 = sc.parallelize([(3,4),(3,6),(5,6),(1,2)])kvRDD2 = sc.parallelize([(3,8)])</code></pre></li><li><p>内连接</p><blockquote><p>join运算可以将两个 RDD 按照相同的key值join起来；</p></blockquote><pre><code>print (kvRDD1.join(kvRDD2).collect())[(3, (4, 8)), (3, (6, 8))] </code></pre></li><li><p>左外连接</p><blockquote><p>leftOuterJoin运算可以将两个 RDD 左外连接起来；<br>如果kvRDD1的key值对应不到kvRDD2，就会显示None</p></blockquote><pre><code>print (kvRDD1.leftOuterJoin(kvRDD2).collect())[(1, (2, None)), (3, (4, 8)), (3, (6, 8)), (5, (6, None))]</code></pre></li><li><p>右外连接</p><blockquote><p>rightOuterJoin运算可以将两个 RDD 右外连接起来；<br>如果kvRDD2的key值对应不到kvRDD1，就会显示None</p></blockquote><pre><code>print (kvRDD1.rightOuterJoin(kvRDD2).collect())[(3, (4, 8)), (3, (6, 8))]</code></pre></li><li><p>删除相同key值数据</p><blockquote><p>使用subtractByKey运算会删除相同key值得数据：</p></blockquote><pre><code>print (kvRDD1.subtractByKey(kvRDD2).collect())[(1, 2), (5, 6)] </code></pre></li></ol><h2 id="单个-RDD-键值“动作”运算"><a href="#单个-RDD-键值“动作”运算" class="headerlink" title="单个 RDD 键值“动作”运算"></a>单个 RDD 键值“动作”运算</h2><ol><li><p>创建RDD</p><blockquote><p>使用parallelize方法创建一个 RDD；<br>用元素类型为tuple元组的数组初始化 RDD；<br>每个tuple的第一个值将作为键，第二个元素将作为值；</p></blockquote><pre><code>kvRDD1 = sc.parallelize([(3,4),(3,6),(5,6),(1,2)])</code></pre></li><li><p>读取数据</p><blockquote><p>可以使用下面的几种方式读取RDD的数据：</p></blockquote><pre><code># 读取第一条数据print (kvRDD1.first())(3, 4)# 读取前两条数据print (kvRDD1.take(2))[(3, 4), (3, 6)]# 读取第一条数据的key值print (kvRDD1.first()[0])3# 读取第一条数据的value值print (kvRDD1.first()[1])4</code></pre></li><li><p>按key值统计：</p><blockquote><p>使用countByKey函数可以统计各个key值对应的数据的条数；</p></blockquote><pre><code>print (kvRDD1.countByKey().collect())defaultdict(&lt;type 'int'&gt;, {1: 1, 3: 2, 5: 1})</code></pre></li><li><p>查找运算</p><blockquote><p>使用lookup函数可以根据输入的key值来查找对应的Value值：</p></blockquote><pre><code>print (kvRDD1.lookup(3))[4, 6]</code></pre></li></ol><h2 id="持久化操作"><a href="#持久化操作" class="headerlink" title="持久化操作"></a>持久化操作</h2><blockquote><p>spark RDD的持久化机制，可以将需要重复运算的RDD存储在内存中，以便大幅提升运算效率</p></blockquote><ol><li><p>persist()</p><blockquote><p>使用persist函数对RDD进行持久化</p></blockquote><pre><code>from pyspark.storagelevel import StorageLevelkvRDD1.persist(StorageLevel.MEMORY_ONLY)</code></pre><p>在持久化的同时可以指定持久化存储等级：</p><table><thead><tr><th align="left">等级</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">MEMORY_ONLY</td><td align="left">以反序列化的JAVA对象的方式存储在JVM中. 如果内存不够， RDD的一些分区将不会被缓存， 这样当再次需要这些分区的时候，将会重新计算。这是默认的级别。</td></tr><tr><td align="left">MEMORY_AND_DISK</td><td align="left">以反序列化的JAVA对象的方式存储在JVM中. 如果内存不够， RDD的一些分区将将会缓存在磁盘上，再次需要的时候从磁盘读取。</td></tr><tr><td align="left">MEMORY_ONLY_SER</td><td align="left">以序列化JAVA对象的方式存储 (每个分区一个字节数组). 相比于反序列化的方式,这样更高效的利用空间， 尤其是使用快速序列化时。但是读取是CPU操作很密集。</td></tr><tr><td align="left">MEMORY_AND_DISK_SER</td><td align="left">与MEMORY_ONLY_SER相似, 区别是但内存不足时，存储在磁盘上而不是每次重新计算。</td></tr><tr><td align="left">DISK_ONLY</td><td align="left">只存储RDD在磁盘</td></tr><tr><td align="left">MEMORY_ONLY_2, MEMORY_AND_DISK_2, etc.</td><td align="left">与上面的级别相同，只不过每个分区的副本只存储在两个集群节点上。</td></tr><tr><td align="left">OFF_HEAP (experimental)</td><td align="left">将RDD以序列化的方式存储在 Tachyon. 与 MEMORY_ONLY_SER相比, OFF_HEAP减少了垃圾回收。允许执行体更小通过共享一个内存池。因此对于拥有较大堆内存和高并发的环境有较大的吸引力。更重要的是，因为RDD存储在Tachyon上，执行体的崩溃不会造成缓存的丢失。在这种模式下.Tachyon中的内存是可丢弃的，这样 Tachyon 对于从内存中挤出的块不会试图重建它。如果你打算使用Tachyon作为堆缓存，Spark提供了与Tachyon相兼容的版本。</td></tr></tbody></table></li><li><p>unpersist()</p><blockquote><p>使用unpersist函数对RDD进行取消持久化；</p></blockquote><pre><code>kvRDD1.unpersist()</code></pre></li></ol><h2 id="整理回顾"><a href="#整理回顾" class="headerlink" title="整理回顾"></a>整理回顾</h2><p>想要了解更多，可以参照官网给出的官方文档：<a href="http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD</a></p><p>今天主要介绍了两种RDD，基本的RDD和Key-Value形式的RDD，介绍了他们的几种“转换”运算和“动作”运算，整理如下：</p><table><thead><tr><th align="left">RDD运算</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">基本RDD“转换”运算</td><td align="left">map（对各数据进行转换），filter（过滤符合条件的数据），distinct（去重运算），randomSplit（根据指定的比例随机分为N各RDD），groupBy（根据条件对数据进行分组），union（两个RDD取并集），intersection（两个RDD取交集），subtract（两个RDD取差集），cartesian（两个RDD进行笛卡尔积运算）</td></tr><tr><td align="left">基本RDD“动作”运算</td><td align="left">first（取第一条数据），take（取前几条数据），takeOrdered（排序后取前N条数据），统计函数</td></tr><tr><td align="left">Key-Value形式 RDD“转换”运算</td><td align="left">filter（过滤符合条件的数据），mapValues（对value值进行转换），sortByKey（根据key值进行排序），reduceByKey（合并相同key值的数据），join（内连接两个KDD），leftOuterJoin（左外连接两个KDD），rightOuterJoin（右外连接两个RDD），subtractByKey（相当于key值得差集运算）</td></tr><tr><td align="left">Key-Value形式 RDD“动作”运算</td><td align="left">first（取第一条数据），take（取前几条数据），countByKey（根据key值分组统计），lookup（根据key值查找value值）</td></tr><tr><td align="left">RDD持久化</td><td align="left">persist用于对RDD进行持久化，unpersist取消RDD的持久化，注意持久化的存储等级</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> PySpark </tag>
            
            <tag> RDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark 安装和配置</title>
      <link href="/articles/spark/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/spark/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Spark 版本：2.4.4</p></blockquote><h2 id="Homebrew安装Spark"><a href="#Homebrew安装Spark" class="headerlink" title="Homebrew安装Spark"></a>Homebrew安装Spark</h2><pre><code>$ brew install apache-spark$ cd /usr/local/Cellar/apache-spark/2.4.4/libexec</code></pre><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><pre><code>$ vim ~/.zshrcexport SPARK_HOME="/usr/local/Cellar/apache-spark/2.4.4/libexec"  export PATH="$SPARK_HOME/bin:$PATH"$ source ~/.zshrc</code></pre><h2 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h2><blockquote><p>在spark-shell中完成单词统计</p></blockquote><pre><code>$ spark-shell......scala&gt; val file = sc.textFile("/usr/local/Cellar/apache-spark/2.4.4/README.md")file: org.apache.spark.rdd.RDD[String] = /usr/local/Cellar/apache-spark/2.4.4/README.md MapPartitionsRDD[1] at textFile at &lt;console&gt;:24# 以空格为拆分标志，将文件中的每一行分割为多个单词scala&gt; val words = file.flatMap(line =&gt; line.split(" "))words: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[2] at flatMap at &lt;console&gt;:25# 对每一个单词进行计数scala&gt; val wordNumber = words.map(w =&gt; (w, 1))wordNumber: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[3] at map at &lt;console&gt;:25# 将单词进行分类合并，计算每个单词总的出现次数scala&gt; val wordCounts = wordNumber.reduceByKey(_+_)wordCounts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at &lt;console&gt;:25# 将所有单词及其出现次数打印出来scala&gt; wordsCounts.foreach(println)......</code></pre><h2 id="pyspark-启动Spark"><a href="#pyspark-启动Spark" class="headerlink" title="pyspark 启动Spark"></a>pyspark 启动Spark</h2><ul><li><p>环境变量设置</p><pre><code>$ vim ~/.zshrc# 设置 python 版本，默认是2.7.xexport PYSPARK_PYTHON="python3"$ source ~/.zshrc</code></pre></li><li><p>脚本的执行权限设置</p><pre><code>$ cd /usr/local/Cellar/apache-spark/2.4.4/libexec/bin$ chmod a+x *$ cd /usr/local/Cellar/apache-spark/2.4.4/libexec/sbin$ chmod a+x *</code></pre></li><li><p>启动 spark</p><pre><code>$ pyspark......Using Python version 3.7.4 (default, Jul  9 2019 18:13:23)SparkSession available as 'spark'.# 初始化&gt;&gt;&gt; from pyspark import SparkConf, SparkContext&gt;&gt;&gt; conf = SparkConf().setMaster("local").setAppName("My App")&gt;&gt;&gt; sc = SparkContext(conf = conf)# 创建RDD&gt;&gt;&gt; intRDD = sc.parallelize([3,1,2,5,5])# collect（RDD -&gt; python 数据类型）&gt;&gt;&gt; print (intRDD.collect())[3, 1, 2, 5, 5]</code></pre></li></ul><h2 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h2><ul><li><p>启动服务</p><pre><code>$ /usr/local/opt/apache-spark/libexec/sbin/start-master.shstarting org.apache.spark.deploy.master.Master, logging to /usr/local/Cellar/apache-spark/2.4.4/libexec/logs/spark-bigo-org.apache.spark.deploy.master.Master-1-bigodeMBP.lan.out$ jps -lm</code></pre></li><li><p>关闭服务</p><pre><code>$ /usr/local/opt/apache-spark/libexec/sbin/stop-master.shstopping org.apache.spark.deploy.master.Master$ jps -lm</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 性能调优</title>
      <link href="/articles/hive/xing-neng-diao-you.html"/>
      <url>/articles/hive/xing-neng-diao-you.html</url>
      
        <content type="html"><![CDATA[<h2 id="Fetch抓取"><a href="#Fetch抓取" class="headerlink" title="Fetch抓取"></a>Fetch抓取</h2><p><strong>Fetch</strong> 抓取是指 <font color="red"><strong>Hive</strong> 中对某些情况的查询可以不必使用 <strong>MapReduce</strong> 计算</font>。</p><p>例如：SELECT * FROM employees;在这种情况下，Hive可以简单地读取employee对应的存储目录下的文件，然后输出查询结果到控制台。</p><p>在 <strong>hive-site.xml</strong> 文件中 <strong><em>hive.fetch.task.conversion</em></strong> 默认是 more，老版本hive默认是 minimal，<font color="red">该属性修改为more以后，在全局查找、字段查找、limit查找等都不走 mapreduce</font>。</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.fetch.task.conversion&lt;/name&gt;    &lt;value&gt;more&lt;/value&gt;    &lt;description&gt;      Expects one of [none, minimal, more].      Some select queries can be converted to single FETCH task minimizing latency.      Currently the query should be single sourced not having any subquery and should not have      any aggregations or distincts (which incurs RS), lateral views and joins.      0. none : disable hive.fetch.task.conversion      1. minimal : SELECT STAR, FILTER on partition columns, LIMIT only      2. more  : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)    &lt;/description&gt;  &lt;/property&gt;</code></pre><h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>大多数的Hadoop Job是需要Hadoop提供的完整的可扩展性来处理大数据集的。</p><p>不过，有时Hive的输入数据量是非常小的，在这种情况下，为查询触发执行任务消耗的时间可能会比实际job的执行时间要多的多。</p><p>对于大多数这种情况，Hive可以通过本地模式在单台机器上处理所有的任务，对于小数据集，执行时间可以明显被缩短。</p><p>用户可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化。</p><pre><code>// 开启本地mrset hive.exec.mode.local.auto=true;// 设置local mr的最大输入数据量，当输入数据量小于这个值时采用local mr的方式，默认为134217728，即128Mset hive.exec.mode.local.auto.inputbytes.max=50000000;// 设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4set hive.exec.mode.local.auto.input.files.max=10;</code></pre><h2 id="表的优化"><a href="#表的优化" class="headerlink" title="表的优化"></a>表的优化</h2><h3 id="小表-Join-大表"><a href="#小表-Join-大表" class="headerlink" title="小表 Join 大表"></a>小表 Join 大表</h3><p>将key相对分散，并且数据量小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；</p><p>再进一步，可以使用map join让小的维度表（1000条以下的记录条数）先进内存， 在map端完成reduce。</p><pre><code>// 打开 map join 功能（默认是打开的）set hive.auto.convert.join = true;</code></pre><p><font color="red">实际测试发现：新版的hive已经对小表JOIN大表和大表JOIN小表进行了优化。小表放在左边和右边已经没有明显区别。</font></p><h3 id="大表-Join-大表"><a href="#大表-Join-大表" class="headerlink" title="大表 Join 大表"></a>大表 Join 大表</h3><ul><li><p>配置历史服务器</p><pre><code>// 配置 mapred-site.xml&lt;property&gt;    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;    &lt;value&gt;hadoop102:10020&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;    &lt;value&gt;hadoop102:19888&lt;/value&gt;&lt;/property&gt;</code></pre></li><li><p>启动历史服务器</p><pre><code>sbin/mr-jobhistory-daemon.sh start historyserver</code></pre></li><li><p>查看jobhistory</p><pre><code>http://192.168.1.102:19888/jobhistory</code></pre></li></ul><ol><li><p>空KEY过滤</p><p> 有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。</p><p> 此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤，例如key对应的字段为空。</p><pre><code> hive (default)&gt; select n.* from (select * from nullidtable where id is not null) n left join ori o on n.id = o.id;</code></pre></li><li><p>空key转换</p><p> 有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的reducer上。</p><p> <strong>案例实操：</strong></p><ul><li><p>不随机分布空null值</p><pre><code>// 设置5个reduce个数set mapreduce.job.reduces = 5;// JOIN两张表insert overwrite table jointable select n.* from nullidtable n left join ori b on n.id = b.id;</code></pre><p>如图所示，可以看出来，出现了数据倾斜，某些reducer的资源消耗远大于其他reducer。<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-04.jpg" alt=""></p></li><li><p>随机分布空null值</p><pre><code>// 设置5个reduce个数set mapreduce.job.reduces = 5;// JOIN两张表insert overwrite table jointableselect n.* from nullidtable n full join ori o on case when n.id is null then concat('hive', rand()) else n.id end = o.id;</code></pre><p>如图所示，可以看出来，消除了数据倾斜，负载均衡reducer的资源消耗<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-05.jpg" alt=""></p></li></ul></li></ol><h3 id="MapJoin"><a href="#MapJoin" class="headerlink" title="MapJoin"></a>MapJoin</h3><p>如果不指定 MapJoin 或者不符合 MapJoin 的条件，那么Hive解析器会将Join操作转换成Common Join，即：在Reduce阶段完成join。容易发生数据倾斜。</p><p>可以用 MapJoin 把小表全部加载到内存在map端进行join，避免reducer处理。</p><ol><li><p>开启MapJoin参数设置</p><pre><code>// 设置自动选择 Mapjoin(默认为true)set hive.auto.convert.join = true;// 大表小表的阈值设置（默认25M一下认为是小表）：set hive.mapjoin.smalltable.filesize=25000000;</code></pre></li><li><p>MapJoin工作机制，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-06.jpg" alt=""></p></li></ol><h3 id="Group-By"><a href="#Group-By" class="headerlink" title="Group By"></a>Group By</h3><p>默认情况下，Map阶段同一Key数据分发给一个reduce，当一个key数据过大时就倾斜了。</p><p>并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作都可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p><p>开启Map端聚合参数设置</p><pre><code>// 是否在Map端进行聚合，默认为Truehive.map.aggr = true// 在Map端进行聚合操作的条目数目hive.groupby.mapaggr.checkinterval = 100000// 有数据倾斜的时候进行负载均衡（默认是false）hive.groupby.skewindata = true</code></pre><p><font color="red">当选项设定为 true，生成的查询计划会有两个MR Job。</font></p><p>第一个MR Job中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作，并输出结果，这样处理的结果是<font color="red">相同的Group By Key有可能被分发到不同的Reduce</font>中，从而达到负载均衡的目的；</p><p>第二个MR Job再根据预处理的数据结果按照Group By Key分布到Reduce中（这个过程可以保证相同的Group By Key被分布到同一个Reduce中），最后完成最终的聚合操作。</p><h3 id="Count-Distinct-去重统计"><a href="#Count-Distinct-去重统计" class="headerlink" title="Count(Distinct) 去重统计"></a>Count(Distinct) 去重统计</h3><p>数据量大的情况下，由于COUNT DISTINCT操作需要用一个Reduce Task来完成，这一个Reduce需要处理的数据量太大，就会导致整个Job很难完成，一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换。</p><ul><li><p>执行去重id查询</p><pre><code>hive (default)&gt; select count(distinct id) from bigtable;Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 7.12 sec   HDFS Read: 120741990 HDFS Write: 7 SUCCESSTotal MapReduce CPU Time Spent: 7 seconds 120 msecOKc0100001Time taken: 23.607 seconds, Fetched: 1 row(s)</code></pre></li><li><p>采用GROUP by去重id</p><pre><code>hive (default)&gt; select count(id) from (select id from bigtable group by id) a;Stage-Stage-1: Map: 1  Reduce: 5   Cumulative CPU: 17.53 sec   HDFS Read: 120752703 HDFS Write: 580 SUCCESSStage-Stage-2: Map: 1  Reduce: 1   Cumulative CPU: 4.29 sec   HDFS Read: 9409 HDFS Write: 7 SUCCESSTotal MapReduce CPU Time Spent: 21 seconds 820 msecOK_c0100001Time taken: 50.795 seconds, Fetched: 1 row(s)</code></pre><p><font color="red">虽然会多用一个Job来完成，但在数据量大的情况下，这个绝对是值得的。</font></p></li></ul><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>尽量避免笛卡尔积，join的时候不加on条件，或者无效的on条件，Hive只能使用1个reducer来完成笛卡尔积。</p><h3 id="行列过滤"><a href="#行列过滤" class="headerlink" title="行列过滤"></a>行列过滤</h3><p>列处理：在SELECT中，只拿需要的列，如果有，尽量使用分区过滤，少用 <font color="red">SELECT *</font>。<br>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在Where后面，那么就会先全表关联，之后再过滤。</p><p><strong>案例实操：</strong></p><ol><li><p>测试先关联两张表，再用where条件过滤</p><pre><code>hive (default)&gt; select o.id from bigtable bjoin ori o on o.id = b.idwhere o.id &lt;= 10;</code></pre><p>Time taken: 34.406 seconds, Fetched: 100 row(s)</p></li><li><p>通过子查询后，再关联表</p><pre><code>hive (default)&gt; select b.id from bigtable bjoin (select id from ori where id &lt;= 10 ) o on b.id = o.id;</code></pre><p>Time taken: 30.058 seconds, Fetched: 100 row(s)</p></li></ol><h3 id="动态分区调整"><a href="#动态分区调整" class="headerlink" title="动态分区调整"></a>动态分区调整</h3><p>关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置。</p><p>开启动态分区参数设置</p><pre><code>// 开启动态分区功能（默认true，开启）hive.exec.dynamic.partition=true// 设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区）hive.exec.dynamic.partition.mode=nonstrict// 在所有执行MR的节点上，最大一共可以创建多少个动态分区hive.exec.max.dynamic.partitions=1000// 在每个执行MR的节点上，最大可以创建多少个动态分区（该参数需要根据实际的数据来设定）// 比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错hive.exec.max.dynamic.partitions.pernode=100// 整个MR Job中，最大可以创建多少个HDFS文件hive.exec.max.created.files=100000// 当有空分区生成时，是否抛出异常（一般不需要设置）hive.error.on.empty.partition=false</code></pre><h3 id="数据按分区处理"><a href="#数据按分区处理" class="headerlink" title="数据按分区处理"></a>数据按分区处理</h3><p>详情参考：Hive DDL 部分内部讲解</p><h2 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h2><h3 id="合理设置Map数"><a href="#合理设置Map数" class="headerlink" title="合理设置Map数"></a>合理设置Map数</h3><ol><li><p>通常情况下，作业会通过input的目录产生一个或者多个map任务。</p><p>主要的决定因素有：input的文件总个数，input的文件大小，集群设置的文件块大小。</p></li><li><p>是不是map数越多越好？</p><p>答案是否定的。如果一个任务有很多小文件（远远小于块大小128m），则每个小文件也会被当做一个块，用一个map任务来完成，而一个map任务启动和初始化的时间远远大于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的map数是受限的。</p></li><li><p>是不是保证每个map处理接近128m的文件块，就高枕无忧了？</p><p>答案也是不一定。比如有一个127m的文件，正常会用一个map去完成，但这个文件只有一个或者两个小字段，却有几千万的记录，如果map处理的逻辑比较复杂，用一个map任务去做，肯定也比较耗时。</p><p>针对上面的问题2和3，我们需要采取两种方式来解决：即减少map数和增加map数；</p></li></ol><h3 id="小文件进行合并"><a href="#小文件进行合并" class="headerlink" title="小文件进行合并"></a>小文件进行合并</h3><p>在map执行前合并小文件，减少map数：CombineHiveInputFormat具有对小文件进行合并的功能（系统默认的格式）。</p><p>HiveInputFormat没有对小文件合并功能。</p><pre><code>set hive.input.format= org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</code></pre><h3 id="复杂文件增加Map数"><a href="#复杂文件增加Map数" class="headerlink" title="复杂文件增加Map数"></a>复杂文件增加Map数</h3><p>当input的文件都很大，任务逻辑复杂，map执行非常慢的时候，可以考虑增加Map数，来使得每个map处理的数据量减少，从而提高任务的执行效率。</p><p>增加map的方法为：根据computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M公式，调整maxSize最大值。让maxSize最大值低于blocksize就可以增加map的个数。</p><h3 id="合理设置Reduce数"><a href="#合理设置Reduce数" class="headerlink" title="合理设置Reduce数"></a>合理设置Reduce数</h3><ol><li><p>调整reduce个数方法一</p><pre><code>// 每个Reduce处理的数据量默认是256MBhive.exec.reducers.bytes.per.reducer=256000000// 每个任务最大的reduce数，默认为1009hive.exec.reducers.max=1009// 计算reducer数的公式N=min(参数2，总输入数据量/参数1)</code></pre></li><li><p>调整reduce个数方法二</p><p>在hadoop的mapred-default.xml文件中修改</p><pre><code>设置每个job的Reduce个数set mapreduce.job.reduces = 15;</code></pre></li><li><p>reduce个数并不是越多越好</p><ul><li>过多的启动和初始化reduce也会消耗时间和资源；</li><li>另外，有多少个reduce，就会有多少个输出文件，如果生成了很多个小文件，那么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；</li></ul><p>在设置reduce个数的时候也需要考虑这两个原则：<font color="red">处理大数据量利用合适的reduce数；使单个reduce任务处理数据量大小要合适；</font></p></li></ol><h2 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h2><p>Hive会将一个查询转化成一个或者多个阶段。这样的阶段可以是MapReduce阶段、抽样阶段、合并阶段、limit阶段。或者Hive执行过程中可能需要的其他阶段。默认情况下，Hive一次只会执行一个阶段。不过，某个特定的job可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个job的执行时间缩短。不过，如果有更多的阶段可以并行执行，那么job可能就越快完成。</p><p>通过设置参数hive.exec.parallel值为true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果job中并行阶段增多，那么集群利用率就会增加。</p><pre><code>// 打开任务并行执行set hive.exec.parallel=true;// 同一个sql允许最大并行度，默认为8。set hive.exec.parallel.thread.number=16;</code></pre><p>当然，得是在系统资源比较空闲的时候才有优势，否则没资源，并行也起不来。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>Hive提供了一个严格模式，可以防止用户执行那些可能意向不到的不好的影响的查询。</p><p>通过设置属性hive.mapred.mode值为 <strong>strict</strong>，默认是非严格模式 <strong>nonstrict</strong>。</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.mapred.mode&lt;/name&gt;    &lt;value&gt;strict&lt;/value&gt;    &lt;description&gt;      The mode in which the Hive operations are being performed.       In strict mode, some risky queries are not allowed to run. They include:        Cartesian Product.        No partition being picked up for a query.        Comparing bigints and strings.        Comparing bigints and doubles.        Orderby without limit.    &lt;/description&gt;&lt;/property&gt;</code></pre><p>开启严格模式可以禁止3种类型的查询：</p><ul><li><p>对于分区表，<font color="red">除非where语句中含有分区字段过滤条件来限制范围，否则不允许执行。</font><br>换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</p></li><li><p>对于<font color="red">使用了order by语句的查询，要求必须使用limit语句。</font><br>因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间。</p></li><li><p><font color="red">限制笛卡尔积的查询。</font><br>对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</p></li></ul><h2 id="JVM重用"><a href="#JVM重用" class="headerlink" title="JVM重用"></a>JVM重用</h2><p>JVM重用是Hadoop调优参数的内容，其对Hive的性能具有非常大的影响，特别是对于很难避免<font color="red">小文件的场景或task特别多的场景，这类场景大多数执行时间都很短。</font></p><p>Hadoop的默认配置通常是使用派生JVM来执行map和Reduce任务的。这时JVM的启动过程可能会造成相当大的开销，尤其是执行的job包含有成百上千task任务的情况。<font color="red">JVM重用可以使得JVM实例在同一个job中重新使用N次。</font>N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间，具体多少需要根据具体业务场景测试得出。</p><pre><code>&lt;property&gt;  &lt;name&gt;mapreduce.job.jvm.numtasks&lt;/name&gt;  &lt;value&gt;10&lt;/value&gt;  &lt;description&gt;How many tasks to run per jvm. If set to -1, there is  no limit.   &lt;/description&gt;&lt;/property&gt;</code></pre><p>这个功能的缺点是，开启JVM重用将一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个“不平衡的”job中有某几个reduce task执行的时间要比其他Reduce task消耗的时间多的多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放。</p><h2 id="推测执行"><a href="#推测执行" class="headerlink" title="推测执行"></a>推测执行</h2><p>在分布式集群环境下，因为程序Bug（包括Hadoop本身的bug），负载不均衡或者资源分布不均等原因，会造成同一个作业的多个任务之间运行速度不一致，有些任务的运行速度可能明显慢于其他任务（比如一个作业的某个任务进度只有50%，而其他所有任务已经运行完毕），则这些任务会拖慢作业的整体执行进度。为了避免这种情况发生，Hadoop采用了推测执行（Speculative Execution）机制，它根据一定的法则推测出“拖后腿”的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理同一份数据，并最终选用最先成功运行完成任务的计算结果作为最终结果。</p><p>设置开启推测执行参数：Hadoop的mapred-site.xml文件中进行配置</p><pre><code>&lt;property&gt;  &lt;name&gt;mapreduce.map.speculative&lt;/name&gt;  &lt;value&gt;true&lt;/value&gt;  &lt;description&gt;    If true, then multiple instances of some map tasks may be executed in parallel.  &lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;mapreduce.reduce.speculative&lt;/name&gt;  &lt;value&gt;true&lt;/value&gt;  &lt;description&gt;    If true, then multiple instances of some reduce tasks may be executed in parallel.  &lt;/description&gt;&lt;/property&gt;</code></pre><p>不过hive本身也提供了配置项来控制reduce-side的推测执行：</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.mapred.reduce.tasks.speculative.execution&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;    &lt;description&gt;      Whether speculative execution for reducers should be turned on.     &lt;/description&gt;  &lt;/property&gt;</code></pre><p>关于调优这些推测执行变量，还很难给一个具体的建议。如果用户对于运行时的偏差非常敏感的话，那么可以将这些功能关闭掉。如果用户因为输入数据量很大而需要执行长时间的map或者Reduce task的话，那么启动推测执行造成的浪费是非常巨大大。</p><h2 id="执行计划（Explain）"><a href="#执行计划（Explain）" class="headerlink" title="执行计划（Explain）"></a>执行计划（Explain）</h2><ol><li><p>基本语法</p><pre><code>EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query</code></pre></li><li><p>案例实操</p><pre><code>// 查看下面这条语句的执行计划hive (default)&gt; explain select deptno, avg(sal) avg_sal from emp group by deptno;// 查看详细执行计划hive (default)&gt; explain extended select deptno, avg(sal) avg_sal from emp group by deptno;</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 压缩和存储</title>
      <link href="/articles/hive/ya-suo-he-cun-chu.html"/>
      <url>/articles/hive/ya-suo-he-cun-chu.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hadoop压缩配置"><a href="#Hadoop压缩配置" class="headerlink" title="Hadoop压缩配置"></a>Hadoop压缩配置</h2><h3 id="MR支持的压缩编码"><a href="#MR支持的压缩编码" class="headerlink" title="MR支持的压缩编码"></a>MR支持的压缩编码</h3><table><thead><tr><th align="left">压缩格式</th><th align="left">工具</th><th align="left">算法</th><th align="left">文件扩展名</th><th align="left">是否可切分</th></tr></thead><tbody><tr><td align="left">DEFAULT</td><td align="left">无</td><td align="left">DEFAULT</td><td align="left">.deflate</td><td align="left">否</td></tr><tr><td align="left">Gzip</td><td align="left">gzip</td><td align="left">DEFAULT</td><td align="left">.gz</td><td align="left">否</td></tr><tr><td align="left">bzip2</td><td align="left">bzip2</td><td align="left">bzip2</td><td align="left">.bz2</td><td align="left">是</td></tr><tr><td align="left">LZO</td><td align="left">lzop</td><td align="left">LZO</td><td align="left">.lzo</td><td align="left">是</td></tr><tr><td align="left">Snappy</td><td align="left">无</td><td align="left">Snappy</td><td align="left">.snappy</td><td align="left">否</td></tr></tbody></table><p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示：</p><table><thead><tr><th align="left">压缩格式</th><th align="left">对应的编码/解码器</th></tr></thead><tbody><tr><td align="left">DEFAULT</td><td align="left">org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td align="left">Gzip</td><td align="left">org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td align="left">bzip2</td><td align="left">org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td align="left">LZO</td><td align="left">com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td align="left">Snappy</td><td align="left">org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较：</p><table><thead><tr><th align="left">压缩算法</th><th align="left">原始文件大小</th><th align="left">压缩文件大小</th><th align="left">压缩速度</th><th align="left">解压速度</th></tr></thead><tbody><tr><td align="left">Gzip</td><td align="left">8.3GB</td><td align="left">1.8GB</td><td align="left">17.5MB/s</td><td align="left">58MB/s</td></tr><tr><td align="left">bzip2</td><td align="left">8.3GB</td><td align="left">1.1GB</td><td align="left">2.4MB/s</td><td align="left">9.5MB/s</td></tr><tr><td align="left">LZO</td><td align="left">8.3GB</td><td align="left">2.9GB</td><td align="left">49.3MB/s</td><td align="left">74.6MB/s</td></tr></tbody></table><h3 id="压缩参数配置"><a href="#压缩参数配置" class="headerlink" title="压缩参数配置"></a>压缩参数配置</h3><p>要在Hadoop中启用压缩，可以配置如下参数（mapred-site.xml文件中）：</p><table><thead><tr><th align="left">参数</th><th align="left">默认值</th><th align="left">阶段</th><th align="left">建议</th></tr></thead><tbody><tr><td align="left">io.compression.codecs <br>（在core-site.xml中配置）</td><td align="left">org.apache.hadoop.io<br>.compress.DefaultCodec,<br><br>org.apache.hadoop.io<br>.compress.GzipCodec,<br><br>org.apache.hadoop.io<br>.compress.BZip2Codec,<br><br>org.apache.hadoop.io<br>.compress.Lz4Codec</td><td align="left">输入压缩</td><td align="left">Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td align="left">mapreduce.map.output.compress</td><td align="left">false</td><td align="left">mapper输出</td><td align="left">这个参数设为true启用压缩</td></tr><tr><td align="left">mapreduce.map.output<br>.compress.codec</td><td align="left">org.apache.hadoop.io<br>.compress.DefaultCodec</td><td align="left">mapper输出</td><td align="left">使用LZO、LZ4或snappy编解码器在此阶段压缩数据</td></tr><tr><td align="left">mapreduce.output.<br>fileoutputformat.compress</td><td align="left">false</td><td align="left">reducer输出</td><td align="left">这个参数设为true启用压缩</td></tr><tr><td align="left">mapreduce.output.<br>fileoutputformat.compress.codec</td><td align="left">org.apache.hadoop.io<br>.compress.DefaultCodec</td><td align="left">reducer输出</td><td align="left">使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td align="left">mapreduce.output.<br>fileoutputformat.compress.type</td><td align="left">RECORD</td><td align="left">reducer输出</td><td align="left">SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><h2 id="开启Map输出阶段压缩"><a href="#开启Map输出阶段压缩" class="headerlink" title="开启Map输出阶段压缩"></a>开启Map输出阶段压缩</h2><p>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量。具体配置如下：</p><pre><code>// 开启hive中间传输数据压缩功能hive (default)&gt;set hive.exec.compress.intermediate=true;// 开启mapreduce中map输出压缩功能hive (default)&gt;set mapreduce.map.output.compress=true;// 设置mapreduce中map输出数据的压缩方式hive (default)&gt;set mapreduce.map.output.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;// 执行查询语句hive (default)&gt; select count(ename) name from emp;</code></pre><h2 id="开启Reduce输出阶段压缩"><a href="#开启Reduce输出阶段压缩" class="headerlink" title="开启Reduce输出阶段压缩"></a>开启Reduce输出阶段压缩</h2><p>当Hive将输出写入到表中时，输出内容同样可以进行压缩。</p><p>属性hive.exec.compress.output控制着这个功能。</p><p>用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。</p><p>用户可以通过在查询语句或执行脚本中设置这个值为true，来开启输出结果压缩功能。</p><pre><code>// 开启hive最终输出数据压缩功能hive (default)&gt;set hive.exec.compress.output=true;// 开启mapreduce最终输出数据压缩hive (default)&gt;set mapreduce.output.fileoutputformat.compress=true;// 设置mapreduce最终数据输出压缩方式hive (default)&gt; set mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;// 设置mapreduce最终数据输出压缩为块压缩hive (default)&gt; set mapreduce.output.fileoutputformat.compress.type=BLOCK;// 测试一下输出结果是否是压缩文件hive (default)&gt; insert overwrite local directory '/opt/module/datas/distribute-result' select * from emp distribute by deptno sort by empno desc;</code></pre><h2 id="Hive-文件存储格式"><a href="#Hive-文件存储格式" class="headerlink" title="Hive 文件存储格式"></a>Hive 文件存储格式</h2><p>Hive支持的存储数的格式主要有：TEXTFILE、SEQUENCEFILE、ORC、PARQUET。</p><h3 id="列式存储和行式存储"><a href="#列式存储和行式存储" class="headerlink" title="列式存储和行式存储"></a>列式存储和行式存储</h3><p>如图所示左边为逻辑表，右边第一个为行式存储，第二个为列式存储。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-07.jpg" alt=""></p><ul><li><p>行存储的特点</p><p>查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。</p></li><li><p>列存储的特点</p><p>因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法。</p></li></ul><p><font color="red">TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的；</font></p><font color="red"></font><p><font color="red">ORC和PARQUET是基于列式存储的。</font></p><h3 id="TextFile格式"><a href="#TextFile格式" class="headerlink" title="TextFile格式"></a>TextFile格式</h3><p>默认格式，数据不做压缩，磁盘开销大，数据解析开销大。</p><p>可结合Gzip、Bzip2使用，但使用Gzip这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。</p><h3 id="Orc格式"><a href="#Orc格式" class="headerlink" title="Orc格式"></a>Orc格式</h3><p>Orc (Optimized Row Columnar)是Hive 0.11版里引入的新的存储格式。</p><p>如图所示可以看到每个Orc文件由1个或多个stripe组成，每个stripe250MB大小，这个Stripe实际相当于RowGroup概念，不过大小由4MB-&gt;250MB，这样应该能提升顺序读的吞吐率。每个Stripe里有三部分组成，分别是Index Data，Row Data，Stripe Footer：</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-08.jpg" alt=""></p><ul><li>Index Data：一个轻量级的index，默认是<font color="red">每隔1W行做一个索引。</font>这里做的索引应该只是记录某行的各字段在Row Data中的offset。</li><li>Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个Stream来存储。</li><li>Stripe Footer：存的是各个Stream的类型，长度等信息。<br>每个文件有一个File Footer，这里面存的是每个Stripe的行数，每个Column的数据类型信息等；每个文件的尾部是一个PostScript，这里面记录了整个文件的压缩类型以及FileFooter的长度信息等。在读取文件时，会seek到文件尾部读PostScript，从里面解析到File Footer长度，再读FileFooter，从里面解析到各个Stripe信息，再读各个Stripe，即从后往前读。</li></ul><h3 id="Parquet格式"><a href="#Parquet格式" class="headerlink" title="Parquet格式"></a>Parquet格式</h3><p>Parquet是面向分析型业务的列式存储格式，由Twitter和Cloudera合作开发，2015年5月从Apache的孵化器里毕业成为Apache顶级项目。</p><p>Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，<font color="red">因此Parquet格式文件是自解析的。</font></p><p>通常情况下，在存储Parquet数据的时候会按照Block大小设置行组的大小，由于一般情况下每一个Mapper任务处理数据的最小单位是一个Block，这样可以把<font color="red">每一个行组由一个Mapper任务处理，增大任务执行并行度。</font></p><p>Parquet文件的格式如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-09.jpg" alt=""></p><p>上图展示了一个Parquet文件的内容，一个文件中可以存储多个行组，文件的首位都是该文件的Magic Code，用于校验它是否是一个Parquet文件，Footer length记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的Schema信息。</p><p>除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在Parquet中，有三种类型的页：<font color="red">数据页、字典页和索引页。</font></p><p>数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前Parquet中还不支持索引页。</p><h2 id="存储方式和压缩总结"><a href="#存储方式和压缩总结" class="headerlink" title="存储方式和压缩总结"></a>存储方式和压缩总结</h2><p>在实际的项目开发当中，hive表的数据存储格式一般选择：orc或parquet。压缩方式一般选择snappy，lzo。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive HQL函数</title>
      <link href="/articles/hive/hql-han-shu.html"/>
      <url>/articles/hive/hql-han-shu.html</url>
      
        <content type="html"><![CDATA[<h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><h3 id="空字段赋值函数（NVL）"><a href="#空字段赋值函数（NVL）" class="headerlink" title="空字段赋值函数（NVL）"></a>空字段赋值函数（NVL）</h3><p><strong>NVL</strong> 给值为NULL的数据赋值，它的格式是NVL( string1, replace_with)。</p><p>它的功能是如果string1为NULL，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都为NULL，则返回NULL。</p><pre><code># 如果员工的comm为NULL，则用-1代替hive (default)&gt; select nvl(comm, -1) from emp;# 如果员工的comm为NULL，则用领导id代替hive (default)&gt; select nvl(comm,mgr) from emp;</code></pre><h3 id="条件判断函数（CASE-WHEN）"><a href="#条件判断函数（CASE-WHEN）" class="headerlink" title="条件判断函数（CASE WHEN）"></a>条件判断函数（CASE WHEN）</h3><pre><code>select   dept_id,  sum(case sex when '男' then 1 else 0 end) male_count,  sum(case sex when '女' then 1 else 0 end) female_countfrom   emp_sexgroup by  dept_id;</code></pre><h3 id="行转列函数（CONCAT）"><a href="#行转列函数（CONCAT）" class="headerlink" title="行转列函数（CONCAT）"></a>行转列函数（CONCAT）</h3><ol><li><p>函数说明</p><ul><li><strong>CONCAT(string A/col, string B/col…)</strong> 返回输入字符串连接后的结果，支持任意个输入字符串;</li><li><strong>CONCAT_WS(separator, str1, str2,…)</strong> 它是一个特殊形式的 CONCAT()。第一个参数剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间;</li><li><strong>COLLECT_SET(col)</strong> 函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段。</li></ul></li><li><p>数据准备</p><table><thead><tr><th align="left">name</th><th align="left">constellation</th><th align="left">blood_type</th></tr></thead><tbody><tr><td align="left">孙悟空</td><td align="left">白羊座</td><td align="left">A</td></tr><tr><td align="left">大海</td><td align="left">射手座</td><td align="left">A</td></tr><tr><td align="left">宋宋</td><td align="left">白羊座</td><td align="left">B</td></tr><tr><td align="left">猪八戒</td><td align="left">白羊座</td><td align="left">A</td></tr><tr><td align="left">凤姐</td><td align="left">射手座</td><td align="left">A</td></tr></tbody></table></li><li><p>需求：把星座和血型一样的人归类到一起。结果如下</p><pre><code>射手座,A            大海|凤姐白羊座,A            孙悟空|猪八戒白羊座,B            宋宋</code></pre></li><li><p>创建本地constellation.txt，导入数据</p><pre><code>$ vi constellation.txt孙悟空    白羊座    A大海      射手座    A宋宋      白羊座    B猪八戒  白羊座    A凤姐      射手座    A</code></pre></li><li><p>创建hive表并导入数据</p><pre><code>create table person_info( name string,  constellation string,  blood_type string) row format delimited fields terminated by "\t";load data local inpath “/opt/module/datas/person_info.txt” into table person_info;</code></pre></li><li><p>按需求查询数据</p><pre><code>select   t1.base,   concat_ws('|', collect_set(t1.name)) namefrom   (select       name,       concat(constellation, ",", blood_type) base   from       person_info) t1group by   t1.base;</code></pre></li></ol><h3 id="列转行函数（EXPLODE）"><a href="#列转行函数（EXPLODE）" class="headerlink" title="列转行函数（EXPLODE）"></a>列转行函数（EXPLODE）</h3><ol><li><p>函数说明</p><p>EXPLODE(col)：将hive一列中复杂的array或者map结构拆分成多行。</p><p>LATERAL VIEW<br>用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias<br>解释：用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p></li><li><p>数据准备</p><table><thead><tr><th align="left">movie</th><th align="left">category</th></tr></thead><tbody><tr><td align="left">《疑犯追踪》</td><td align="left">悬疑,动作,科幻,剧情</td></tr><tr><td align="left">《Lie to me》</td><td align="left">悬疑,警匪,动作,心理,剧情</td></tr><tr><td align="left">《战狼2》</td><td align="left">战争,动作,灾难</td></tr></tbody></table></li><li><p>需求：将电影分类中的数组数据展开，结果如下</p><pre><code>《疑犯追踪》      悬疑《疑犯追踪》      动作《疑犯追踪》      科幻《疑犯追踪》      剧情《Lie to me》   悬疑《Lie to me》   警匪《Lie to me》   动作《Lie to me》   心理《Lie to me》   剧情《战狼2》        战争《战狼2》        动作《战狼2》        灾难</code></pre></li><li><p>创建本地movie.txt，导入数据</p><pre><code>$ vi movie.txt《疑犯追踪》    悬疑,动作,科幻,剧情《Lie to me》    悬疑,警匪,动作,心理,剧情《战狼2》    战争,动作,灾难</code></pre></li><li><p>创建hive表并导入数据</p><pre><code>create table movie_info(   movie string,    category array&lt;string&gt;) row format delimited fields terminated by "\t"collection items terminated by ",";load data local inpath "/opt/module/datas/movie.txt" into table movie_info;</code></pre></li><li><p>按需求查询数据</p><pre><code>select movie, category_namefrom movie_info lateral view explode(category) table_tmp as category_name;</code></pre></li></ol><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><ol><li><p>函数说明</p><ul><li><strong>OVER()</strong> 指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化</li><li><strong>CURRENT ROW</strong> 当前行</li><li><strong>n PRECEDING</strong> 往前n行数据</li><li><strong>n FOLLOWING</strong> 往后n行数据</li><li><strong>UNBOUNDED</strong> 起点，UNBOUNDED PRECEDING 表示从前面的起点， UNBOUNDED FOLLOWING表示到后面的终点</li><li><strong>LAG(col,n)</strong> 往前第n行数据</li><li><strong>LEAD(col,n)</strong> 往后第n行数据</li><li><strong>NTILE(n)</strong> 把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。</li></ul><blockquote><p>注意：n必须为int类型。</p></blockquote></li><li><p>数据准备</p><pre><code>| name  | orderdate  | cost  || :---- | :--------- | :---- || jack  | 2017-01-01 | 10    || tony  | 2017-01-02 | 15    || jack  | 2017-02-03 | 23    || tony  | 2017-01-04 | 29    || jack  | 2017-01-05 | 46    || jack  | 2017-04-06 | 42    || tony  | 2017-01-07 | 50    || jack  | 2017-01-08 | 55    || mart  | 2017-04-08 | 62    || mart  | 2017-04-09 | 68    || neil  | 2017-05-10 | 12    || mart  | 2017-04-11 | 75    || neil  | 2017-06-12 | 80    || mart  | 2017-04-13 | 94    |</code></pre></li><li><p>需求</p><ul><li>查询在2017年4月份购买过的顾客及总人数</li><li>查询顾客的购买明细及月购买总额</li><li>上述的场景,要将cost按照日期进行累加</li><li>查询顾客上次的购买时间</li><li>查询前20%时间的订单信息</li></ul></li><li><p>创建本地business.txt，导入数据</p><pre><code>$ vi business.txtjack,2017-01-01,10tony,2017-01-02,15jack,2017-02-03,23tony,2017-01-04,29jack,2017-01-05,46jack,2017-04-06,42tony,2017-01-07,50jack,2017-01-08,55mart,2017-04-08,62mart,2017-04-09,68neil,2017-05-10,12mart,2017-04-11,75neil,2017-06-12,80mart,2017-04-13,94</code></pre></li><li><p>创建hive表并导入数据</p><pre><code>create table business( name string,  orderdate string, cost int)row format delimited fields terminated by ',';load data local inpath "/opt/module/datas/business.txt" into table business;</code></pre></li><li><p>按需求查询数据</p><ul><li><p>查询在2017年4月份购买过的顾客及总人数</p><pre><code> select name, count(*) over ()  from business  where substring(orderdate, 1, 7) = '2015-04'  group by name;</code></pre></li><li><p>查询顾客的购买明细及月购买总额</p><pre><code> select name, orderdate, cost, sum(cost) over(partition by month(orderdate))  from business;</code></pre></li><li><p>上述的场景,要将cost按照日期进行累加</p><pre><code> select name,orderdate,cost,  sum(cost) over() as sample1,--所有行相加  sum(cost) over(partition by name) as sample2,--按name分组，组内数据相加  sum(cost) over(partition by name order by orderdate) as sample3,--按name分组，组内数据累加  sum(cost) over(partition by name order by orderdate rows between UNBOUNDED PRECEDING and current row ) as sample4 ,--和sample3一样,由起点到当前行的聚合  sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING and current row) as sample5, --当前行和前面一行做聚合  sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING AND 1 FOLLOWING ) as sample6,--当前行和前边一行及后面一行  sum(cost) over(partition by name order by orderdate rows between current row and UNBOUNDED FOLLOWING ) as sample7 --当前行及后面所有行  from business;</code></pre></li><li><p>查看顾客上次的购买时间</p><pre><code> select name,orderdate,cost,  lag(orderdate,1,'1900-01-01') over(partition by name order by orderdate ) as time1, lag(orderdate,2) over (partition by name order by orderdate) as time2  from business;</code></pre></li><li><p>查询前20%时间的订单信息</p><pre><code> select * from (     select name,orderdate,cost, ntile(5) over(order by orderdate) sorted     from business ) t where sorted = 1;</code></pre></li></ul></li></ol><h3 id="排名函数（Rank）"><a href="#排名函数（Rank）" class="headerlink" title="排名函数（Rank）"></a>排名函数（Rank）</h3><ol><li><p>函数说明</p><ul><li><strong>RANK()</strong> 排序相同时会重复，总数不会变</li><li><strong>DENSE_RANK()</strong> 排序相同时会重复，总数会减少</li><li><strong>ROW_NUMBER()</strong> 会根据顺序计算</li></ul></li><li><p>数据准备</p><pre><code>| name  | subject  | score || :---- | :------- | :---- || 孙悟空 | 语文      | 87    || 孙悟空 | 数学      | 95    || 孙悟空 | 英语      | 68    || 大海   | 语文      | 94    || 大海   | 数学      | 56    || 大海   | 英语      | 84    || 宋宋   | 语文      | 64    || 宋宋   | 数学      | 86    || 宋宋   | 英语      | 84    || 婷婷   | 语文      | 65    || 婷婷   | 数学      | 85    || 婷婷   | 英语      | 78    |</code></pre></li><li><p>需求：计算没门学科成绩排名，结果如下</p><pre><code>name    subject score   rp      drp     rmp孙悟空  数学    95      1       1       1宋宋    数学    86      2       2       2婷婷    数学    85      3       3       3大海    数学    56      4       4       4宋宋    英语    84      1       1       1大海    英语    84      1       1       2婷婷    英语    78      3       2       3孙悟空  英语    68      4       3       4大海    语文    94      1       1       1孙悟空  语文    87      2       2       2婷婷    语文    65      3       3       3宋宋    语文    64      4       4       4</code></pre></li><li><p>创建本地movie.txt，导入数据</p><pre><code>$ vi score.txt孙悟空,语文,87孙悟空,数学,95孙悟空,英语,68大海,语文,94大海,数学,56大海,英语,84宋宋,语文,64宋宋,数学,86宋宋,英语,84婷婷,语文,65婷婷,数学,85婷婷,英语,78</code></pre></li><li><p>创建hive表并导入数据</p><pre><code>create table score( name string, subject string,  score int) row format delimited fields terminated by "\t";load data local inpath '/opt/module/datas/score.txt' into table score;</code></pre></li><li><p>按需求查询数据</p><pre><code>select name,subject,score,rank() over(partition by subject order by score desc) rp,dense_rank() over(partition by subject order by score desc) drp,row_number() over(partition by subject order by score desc) rmpfrom score;</code></pre></li></ol><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><ul><li><p>查看系统自带的函数</p><pre><code>hive (default)&gt; show functions;</code></pre></li><li><p>显示自带的函数的用法</p><pre><code>hive (default)&gt; desc function upper;</code></pre></li><li><p>详细显示自带的函数的用法</p><pre><code>hive (default)&gt; desc function extended upper;</code></pre></li></ul><h2 id="自定义函数-UDF"><a href="#自定义函数-UDF" class="headerlink" title="自定义函数(UDF)"></a>自定义函数(UDF)</h2><p>Hive 自带了一些函数，比如：max/min等，但是数量有限，可以通过自定义UDF来方便的扩展。</p><p>当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（UDF：user-defined function）。</p><ol><li><p>根据用户自定义函数类别分为以下三种</p><ul><li>UDF（User-Defined-Function）一进一出</li><li>UDAF（User-Defined Aggregation Function）聚集函数，多进一出，类似于：count/max/min</li><li>UDTF（User-Defined Table-Generating Functions）一进多出，如lateral view explore()</li></ul></li><li><p>官方文档地址：<a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank" rel="noopener">前去查看</a></p></li><li><p>编程步骤</p><ul><li><p>继承org.apache.hadoop.hive.ql.UDF</p></li><li><p>需要实现evaluate函数，evaluate函数支持重载；</p></li><li><p>在hive的命令行窗口创建函数</p><pre><code> # 添加jar add jar linux_jar_path # 创建function， create [temporary] function [dbname.]function_name AS class_name;</code></pre></li></ul></li><li><p>注意事项</p><ul><li>UDF必须要有返回类型，可以返回null，但是返回类型不能为void；</li></ul></li><li><p>实战：自定义UDF函数</p><ul><li><p>创建一个Maven工程Hive</p></li><li><p>导入依赖</p><pre><code> &lt;dependencies&gt;     &lt;!-- https://mvnrepository.com/artifact/org.apache.hive/hive-exec --&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;       &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;       &lt;version&gt;1.2.1&lt;/version&gt;     &lt;/dependency&gt; &lt;/dependencies&gt;</code></pre><ul><li><p>创建一个类</p><pre><code>package com.philcode.hive;import org.apache.hadoop.hive.ql.exec.UDF;public class Lower extends UDF { public String evaluate (final String s) {   if (s == null) {     return null;   }   return s.toLowerCase(); }}</code></pre></li><li><p>打成jar包上传到服务器 /opt/module/jars/udf.jar</p></li><li><p>将jar包添加到hive的classpath</p><pre><code>hive (default)&gt; add jar /opt/module/datas/udf.jar;</code></pre></li><li><p>创建临时函数与开发好的java class关联</p><pre><code>hive (default)&gt; create temporary function mylower as "com.philcode.hive.Lower";</code></pre></li><li><p>即可在hql中使用自定义的函数strip</p><pre><code>hive (default)&gt; select ename, udf_lower(ename) lowername from emp;</code></pre></li></ul></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive HQL查询</title>
      <link href="/articles/hive/hql-cha-xun.html"/>
      <url>/articles/hive/hql-cha-xun.html</url>
      
        <content type="html"><![CDATA[<p>查询语句语法</p><pre><code>[WITH CommonTableExpression (, CommonTableExpression)*] (Note: Only available starting with Hive 0.13.0)SELECT [ALL | DISTINCT] select_expr, select_expr, ...FROM table_reference[WHERE where_condition][GROUP BY col_list][ORDER BY col_list][CLUSTER BY col_list | [DISTRIBUTE BY col_list] [SORT BY col_list]][LIMIT number]</code></pre><h2 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h2><ul><li>使用别名可以简化查询。</li><li>使用表名前缀可以提高执行效率。</li></ul><pre><code># 合并员工表和部门表hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d on e.deptno = d.deptno;</code></pre><h2 id="基本查询（Select…From）"><a href="#基本查询（Select…From）" class="headerlink" title="基本查询（Select…From）"></a>基本查询（Select…From）</h2><h3 id="全表和特定列查询"><a href="#全表和特定列查询" class="headerlink" title="全表和特定列查询"></a>全表和特定列查询</h3><ul><li><p>全表查询</p><pre><code>  hive (default)&gt; select * from emp;</code></pre></li><li><p>选择特定列查询</p><pre><code>  hive (default)&gt; select empno, ename from emp;</code></pre></li></ul><blockquote><p>注意：<br>（1）SQL 语言<font color="red">大小写不敏感</font><br>（2）SQL 可以写在一行或者多行<br>（3）<font color="red">关键字不能被缩写也不能分行</font><br>（4）各子句一般要分行写。<br>（5）使用缩进提高语句的可读性。</p></blockquote><h3 id="列别名"><a href="#列别名" class="headerlink" title="列别名"></a>列别名</h3><ul><li>重命名一个列</li><li>便于计算</li><li>紧跟列名，也可以<font color="red">在列名和别名之间加入关键字‘AS’</font></li></ul><p>查询名称和部门</p><pre><code>hive (default)&gt; select ename AS name, deptno dn from emp;</code></pre><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">A+B</td><td align="left">A和B 相加</td></tr><tr><td align="left">A-B</td><td align="left">A和B 相减</td></tr><tr><td align="left">A*B</td><td align="left">A和B 相乘</td></tr><tr><td align="left">A/B</td><td align="left">A和B 相除</td></tr><tr><td align="left">A%B</td><td align="left">A对B取余</td></tr><tr><td align="left">A&amp;B</td><td align="left">A和B按位取与</td></tr><tr><td align="left">A</td><td align="left">B</td></tr><tr><td align="left">A^B</td><td align="left">A和B按位取异或</td></tr><tr><td align="left">-A</td><td align="left">A按位取反</td></tr></tbody></table><p>查询出所有员工的薪水后加1显示</p><pre><code>hive (default)&gt; select sal +1 from emp;</code></pre><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li><p>求总行数（count）</p><pre><code>  hive (default)&gt; select count(*) cnt from emp;</code></pre></li><li><p>求工资的最大值（max）</p><pre><code>  hive (default)&gt; select max(sal) max_sal from emp;</code></pre></li><li><p>求工资的最小值（min）</p><pre><code>  hive (default)&gt; select min(sal) min_sal from emp;</code></pre></li><li><p>求工资的总和（sum）</p><pre><code>  hive (default)&gt; select sum(sal) sum_sal from emp; </code></pre></li><li><p>求工资的平均值（avg）</p><pre><code>  hive (default)&gt; select avg(sal) avg_sal from emp;</code></pre></li></ul><h3 id="Limit-语句"><a href="#Limit-语句" class="headerlink" title="Limit 语句"></a>Limit 语句</h3><p>LIMIT 子句用于限制返回的行数。</p><p>典型的查询会返回多行数据。</p><pre><code>hive (default)&gt; select * from emp limit 5;</code></pre><h2 id="Where语句"><a href="#Where语句" class="headerlink" title="Where语句"></a>Where语句</h2><ul><li><p>使用WHERE子句，将不满足条件的行过滤掉</p></li><li><p>WHERE子句紧随FROM子句</p><p>  查询出薪水大于1000的所有员工</p><pre><code>  hive (default)&gt; select * from emp where sal &gt; 1000;</code></pre></li></ul><h3 id="比较运算符（Between-In-Is-Null）"><a href="#比较运算符（Between-In-Is-Null）" class="headerlink" title="比较运算符（Between / In / Is Null）"></a>比较运算符（Between / In / Is Null）</h3><p>下面表中描述了谓词操作符，这些操作符同样可以用于JOIN…ON和HAVING语句中。</p><table><thead><tr><th align="left">操作符</th><th align="left">支持的数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">A = B</td><td align="left">基本数据类型</td><td align="left">如果A等于B则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &lt;=&gt; B</td><td align="left">基本数据类型</td><td align="left">如果A和B都为NULL，则返回TRUE，其他的和等号（=）操作符的结果一致，如果任一为NULL则结果为NULL</td></tr><tr><td align="left">A&lt;&gt;B, A!=B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL则返回NULL；如果A不等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &lt; B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A小于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &lt;= B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A小于等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &gt; B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A大于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &gt;= B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A大于等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A [NOT] BETWEEN B AND C</td><td align="left">基本数据类型</td><td align="left">如果A，B或者C任一为NULL，则结果为NULL。如果A的值大于等于B而且小于或等于C，则结果为TRUE，反之为FALSE。如果使用NOT关键字则可达到相反的效果。</td></tr><tr><td align="left">A IS NULL</td><td align="left">所有数据类型</td><td align="left">如果A等于NULL，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A IS NOT NULL</td><td align="left">所有数据类型</td><td align="left">如果A不等于NULL，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">IN(数值1, 数值2)</td><td align="left">所有数据类型</td><td align="left">使用 IN 运算显示列表中的值</td></tr><tr><td align="left">A [NOT] LIKE B</td><td align="left">STRING 类型</td><td align="left">B是一个SQL下的简单正则表达式，如果A与其匹配的话，则返回TRUE；反之返回FALSE。B的表达式说明如下：‘x%’表示A必须以字母‘x’开头，‘%x’表示A必须以字母’x’结尾，而‘%x%’表示A包含有字母’x’,可以位于开头，结尾或者字符串中间。如果使用NOT关键字则可达到相反的效果。</td></tr><tr><td align="left">A RLIKE B, A REGEXP B</td><td align="left">STRING 类型</td><td align="left">B是一个正则表达式，如果A与其匹配，则返回TRUE；反之返回FALSE。匹配使用的是JDK中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串A相匹配，而不是只需与其字符串匹配。</td></tr></tbody></table><pre><code># 查询出薪水等于5000的所有员工hive (default)&gt; select * from emp where sal = 5000;# 查询工资在500到1000的员工信息hive (default)&gt; select * from emp where sal between 500 and 1000;# 查询comm为空的所有员工信息hive (default)&gt; select * from emp where comm is null;# 查询工资是1500和5000的员工信息hive (default)&gt; select * from emp where sal IN (1500, 5000);</code></pre><h3 id="Like-和-RLike"><a href="#Like-和-RLike" class="headerlink" title="Like 和 RLike"></a>Like 和 RLike</h3><ul><li><p>使用LIKE运算选择类似的值</p></li><li><p>选择条件可以包含字符或数字:</p><ul><li><font color="red">% 代表零个或多个字符(任意个字符)</font>。</li><li><font color="red">_ 代表一个字符</font>。</li></ul></li><li><p>RLIKE子句是Hive中这个功能的一个扩展，其可以通过<font color="red">Java的正则表达式</font>这个更强大的语言来指定匹配条件。</p><pre><code>  # 查找以2开头薪水的员工信息  hive (default)&gt; select * from emp where sal LIKE '2%';  # 查找第二个数值为2的薪水的员工信息  hive (default)&gt; select * from emp where sal LIKE '_2%';  # 查找薪水中含有2的员工信息  hive (default)&gt; select * from emp where sal RLIKE '[2]';</code></pre></li></ul><h3 id="逻辑运算符（And-Or-Not）"><a href="#逻辑运算符（And-Or-Not）" class="headerlink" title="逻辑运算符（And/Or/Not）"></a>逻辑运算符（And/Or/Not）</h3><table><thead><tr><th align="left">操作符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">AND</td><td align="left">逻辑并</td></tr><tr><td align="left">OR</td><td align="left">逻辑或</td></tr><tr><td align="left">NOT</td><td align="left">逻辑否</td></tr></tbody></table><pre><code># 查询薪水大于1000，部门是30hive (default)&gt; select * from emp where sal&gt;1000 and deptno=30;# 查询薪水大于1000，或者部门是30hive (default)&gt; select * from emp where sal&gt;1000 or deptno=30;# 查询除了20部门和30部门以外的员工信息hive (default)&gt; select * from emp where deptno not IN(30, 20);</code></pre><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><h3 id="Group-By-语句"><a href="#Group-By-语句" class="headerlink" title="Group By 语句"></a>Group By 语句</h3><p>GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。</p><pre><code># 计算emp表每个部门的平均工资hive (default)&gt; select t.deptno, avg(t.sal) avg_sal from emp t group by t.deptno;# 计算emp每个部门中每个岗位的最高薪水hive (default)&gt; select t.deptno, t.job, max(t.sal) max_sal from emp t group by t.deptno, t.job;</code></pre><h3 id="Having-语句"><a href="#Having-语句" class="headerlink" title="Having 语句"></a>Having 语句</h3><p>having 与 where 不同点</p><ul><li><p><strong>where</strong> 针对表中的列发挥作用，查询数据；<strong>having</strong> 针对查询结果中的列发挥作用，筛选数据。</p></li><li><p><strong>where</strong> 后面不能写分组函数，而 <strong>having</strong> 后面可以使用分组函数。</p></li><li><p><strong>having</strong> 只用于 <strong>group by</strong> 分组统计语句。</p><pre><code>  # 求每个部门的平均工资  hive (default)&gt; select deptno, avg(sal) from emp group by deptno;  # 求每个部门的平均薪水大于2000的部门  hive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno having avg_sal &gt; 2000;</code></pre></li></ul><h2 id="Join-语句"><a href="#Join-语句" class="headerlink" title="Join 语句"></a>Join 语句</h2><p>Hive支持通常的SQL JOIN语句，但是<font color="red">只支持等值连接，不支持非等值连接</font>。</p><pre><code># 根据员工表和部门表中的部门编号相等，查询员工编号、员工名称和部门编号；hive (default)&gt; select e.empno, e.ename, d.deptno, d.dname from emp e join dept d on e.deptno = d.deptno;</code></pre><p>连接谓词(ON)中不支持or，以下 HQL 是错误的</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d on e.deptno = d.deptno or e.ename = d.ename;</code></pre><h3 id="内连接-JOIN"><a href="#内连接-JOIN" class="headerlink" title="内连接(JOIN)"></a>内连接(JOIN)</h3><p><strong>JOIN</strong> 只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d on e.deptno = d.deptno;</code></pre><h3 id="左外连接-LEFT-JOIN"><a href="#左外连接-LEFT-JOIN" class="headerlink" title="左外连接(LEFT JOIN)"></a>左外连接(LEFT JOIN)</h3><p><strong>LEFT JOIN</strong> 操作符<font color="red"><strong>左边表</strong></font>中符合 WHERE 子句的所有记录将会被返回，如果右边表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e left join dept d on e.deptno = d.deptno;</code></pre><h3 id="右外连接-RIGHT-JOIN"><a href="#右外连接-RIGHT-JOIN" class="headerlink" title="右外连接(RIGHT JOIN)"></a>右外连接(RIGHT JOIN)</h3><p><strong>RIGHT JOIN</strong> 操作符<font color="red"><strong>右边表</strong></font>中符合 WHERE 子句的所有记录将会被返回，如果左边表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e right join dept d on e.deptno = d.deptno;</code></pre><h3 id="满外连接-FULL-JOIN"><a href="#满外连接-FULL-JOIN" class="headerlink" title="满外连接(FULL JOIN)"></a>满外连接(FULL JOIN)</h3><p><strong>FULL JOIN</strong> 将会返回所有表中符合WHERE语句条件的所有记录，如果任一表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e full join dept d on e.deptno = d.deptno;</code></pre><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><blockquote><p>注意：连接 n个表，至少需要n-1个连接条件。例如：连接三个表，至少需要两个连接条件。</p></blockquote><pre><code>hive (default)&gt; SELECT e.ename, d.deptno, l.loc_nameFROM   emp e JOIN   dept dON     d.deptno = e.deptno JOIN   location lON     d.loc = l.loc;</code></pre><p>大多数情况下，Hive会对每对JOIN连接对象启动一个MapReduce任务。</p><p>本例中会首先启动一个MapReduce job对表e和表d进行连接操作，然后会再启动一个MapReduce job将第一个MapReduce job的输出和表l进行连接操作。</p><blockquote><p>注意：为什么不是表d和表l先进行连接操作呢？这是因为Hive总是按照从左到右的顺序执行的。</p></blockquote><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>笛卡尔集会在下面条件下产生:</p><ul><li><p>省略连接条件</p></li><li><p>连接条件无效</p></li><li><p>所有表中的所有行互相连接</p><pre><code>  hive (default)&gt; select empno, dname from emp, dept;</code></pre></li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="全局排序（Order-By）"><a href="#全局排序（Order-By）" class="headerlink" title="全局排序（Order By）"></a>全局排序（Order By）</h3><p><strong>Order By</strong> 全局排序，一个 MapReduce Job</p><ul><li><p>使用 ORDER BY 子句排序，ASC（ascend）: 升序（默认），DESC（descend）: 降序</p></li><li><p>ORDER BY 子句在SELECT语句的结尾</p></li><li><p>可以对列的别名进行排序</p></li><li><p>支持多个列排序</p><pre><code>  # 查询员工信息按工资升序排列  hive (default)&gt; select * from emp order by sal;  # 查询员工信息按工资降序排列  hive (default)&gt; select * from emp order by sal desc;  # 按照员工薪水的2倍排序（按照别名排序）  hive (default)&gt; select ename, sal*2 twosal from emp order by twosal;  # 按照部门升序排序和工资倒序排序（多个列排序）  hive (default)&gt; select ename, deptno, sal from emp order by deptno, sal desc;</code></pre></li></ul><h3 id="每个MapReduce内部排序（Sort-By）"><a href="#每个MapReduce内部排序（Sort-By）" class="headerlink" title="每个MapReduce内部排序（Sort By）"></a>每个MapReduce内部排序（Sort By）</h3><p><strong>Sort By</strong> 每个MapReduce内部进行排序，对全局结果集来说不是排序。</p><ol><li><p>设置reduce个数</p><pre><code> hive (default)&gt; set mapreduce.job.reduces=3;</code></pre></li></ol><p>2．查看设置reduce个数</p><pre><code>```hive (default)&gt; set mapreduce.job.reduces;```</code></pre><ol start="3"><li><p>根据部门编号降序查看员工信息</p><pre><code> hive (default)&gt; select * from emp sort by empno desc;</code></pre></li><li><p>将查询结果导入到文件中（按照部门编号降序排序）</p><pre><code> hive (default)&gt; insert overwrite local directory '/opt/module/datas/sortby-result' select * from emp sort by deptno desc;</code></pre></li></ol><h3 id="分区排序（Distribute-By）"><a href="#分区排序（Distribute-By）" class="headerlink" title="分区排序（Distribute By）"></a>分区排序（Distribute By）</h3><p><strong>Distribute By</strong> 类似MR中partition，进行分区，结合sort by使用。</p><blockquote><p>注意，Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前。</p></blockquote><p>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p><pre><code># 先按照部门编号分区，再按照员工编号降序排序。hive (default)&gt; set mapreduce.job.reduces=3;hive (default)&gt; insert overwrite local directory '/opt/module/datas/distribute-result' select * from emp distribute by deptno sort by empno desc;</code></pre><h3 id="Cluster-By"><a href="#Cluster-By" class="headerlink" title="Cluster By"></a>Cluster By</h3><p>当distribute by和sorts by字段相同时，可以使用cluster by方式。</p><p>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序<font color="red">只能是倒序排序</font>，不能指定排序规则为ASC或者DESC。</p><p>以下两种写法等价:</p><pre><code>hive (default)&gt; select * from emp cluster by deptno;hive (default)&gt; select * from emp distribute by deptno sort by deptno;</code></pre><blockquote><p>注意：按照部门编号分区，不一定就是固定死的数值，可以是20号和30号部门分到一个分区里面去。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive DML数据操作</title>
      <link href="/articles/hive/dml-shu-ju-cao-zuo.html"/>
      <url>/articles/hive/dml-shu-ju-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="向表中装载数据（Load）"><a href="#向表中装载数据（Load）" class="headerlink" title="向表中装载数据（Load）"></a>向表中装载数据（Load）</h3><ol><li><p>基本语法</p><pre><code> hive&gt; load data [local] inpath filepath [overwrite] into table table_name [partition (partcol1=val1,…)];</code></pre><p> 字段解释说明</p><ul><li><strong>load data</strong> 表示加载数据</li><li><strong>local</strong> 表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li><li><strong>inpath</strong> 表示加载数据的路径</li><li><strong>overwrite</strong> 表示覆盖表中已有数据，否则表示追加</li><li><strong>into table</strong> 表示加载到哪张表</li><li><strong>student</strong> 表示具体的表</li><li><strong>partition</strong> 表示上传到指定分区</li></ul></li><li><p>实操案例</p><p> 创建一张表</p><pre><code> hive (default)&gt; create table student(id string, name string) row format delimited fields terminated by '\t';</code></pre><ul><li><p>加载本地文件到hive</p><pre><code>hive (default)&gt; load data local inpath '/opt/module/datas/student.txt' into table default.student;</code></pre></li><li><p>加载HDFS文件到hive中</p><pre><code>   # 上传文件到HDFS   hive (default)&gt; dfs -put /opt/module/datas/student.txt /user/lvmaohai/hive;   # 加载HDFS上数据   hive (default)&gt; load data inpath '/user/lvmaohai/hive/student.txt' into table default.student;</code></pre></li><li><p>加载数据覆盖表中已有的数据</p><pre><code>   # 上传文件到HDFS   hive (default)&gt; dfs -put /opt/module/datas/student.txt /user/lvmaohai/hive;   # 加载数据覆盖表中已有的数据   hive (default)&gt; load data inpath '/user/lvmaohai/hive/student.txt' overwrite into table default.student;</code></pre></li></ul></li></ol><h3 id="向表中插入数据（Insert）"><a href="#向表中插入数据（Insert）" class="headerlink" title="向表中插入数据（Insert）"></a>向表中插入数据（Insert）</h3><p>创建一张分区表</p><pre><code>hive (default)&gt; create table student(id int, name string) partitioned by (month string) row format delimited fields terminated by '\t';</code></pre><ul><li>基本插入数据</li></ul><pre><code>insert into table student partition(month='201912') values(1,'xiaowei');</code></pre><ul><li>基本模式插入（根据单张表查询结果）</li></ul><pre><code>insert overwrite table student partition(month='201911') select id, name from student where month='201912';</code></pre><ul><li>多插入模式（根据多张表查询结果）</li></ul><pre><code>from student insert overwrite table student partition(month='201912') select id, name where month='201910' insert overwrite table student partition(month='201911') select id, name where month='201910';</code></pre><h3 id="创建表并加载数据（As-Select）"><a href="#创建表并加载数据（As-Select）" class="headerlink" title="创建表并加载数据（As Select）"></a>创建表并加载数据（As Select）</h3><p>根据查询结果创建表（查询的结果会添加到新创建的表中）</p><pre><code>create table if not exists student3 as select id, name from student;</code></pre><h3 id="创建表时指定加载数据路径"><a href="#创建表时指定加载数据路径" class="headerlink" title="创建表时指定加载数据路径"></a>创建表时指定加载数据路径</h3><ol><li><p>创建表，并指定在hdfs上的位置</p><pre><code> create table if not exists student5(     id int,      name string ) row format delimited fields terminated by '\t' location '/user/hive/warehouse/student5';</code></pre></li><li><p>上传数据到hdfs上</p><pre><code> hive (default)&gt; dfs -put /opt/module/datas/student.txt /user/hive/warehouse/student5;</code></pre></li><li><p>查询数据</p><pre><code> hive (default)&gt; select * from student5;</code></pre></li></ol><h3 id="Import数据到指定Hive表中"><a href="#Import数据到指定Hive表中" class="headerlink" title="Import数据到指定Hive表中"></a>Import数据到指定Hive表中</h3><blockquote><p>注意：先用export导出后，再将数据导入。</p></blockquote><pre><code>hive (default)&gt; import table student2 partition(month='201709') from '/user/hive/warehouse/export/student';</code></pre><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><h3 id="Insert导出"><a href="#Insert导出" class="headerlink" title="Insert导出"></a>Insert导出</h3><ol><li><p>将查询的结果导出到本地</p><pre><code> insert overwrite local directory '/opt/module/datas/export/student' select * from student;</code></pre></li><li><p>将查询的结果格式化导出到本地</p><pre><code> insert overwrite local directory '/opt/module/datas/export/student1'  ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' select * from student;</code></pre></li><li><p>将查询的结果导出到HDFS上(没有local)</p><pre><code> insert overwrite directory '/user/atguigu/student2' ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'  select * from student;</code></pre></li></ol><h3 id="Hadoop命令导出到本地"><a href="#Hadoop命令导出到本地" class="headerlink" title="Hadoop命令导出到本地"></a>Hadoop命令导出到本地</h3><pre><code>hive (default)&gt; dfs -get /user/hive/warehouse/student/month=201909/000000_0 /opt/module/datas/export/student3.txt;</code></pre><h3 id="Hive-Shell-命令导出"><a href="#Hive-Shell-命令导出" class="headerlink" title="Hive Shell 命令导出"></a>Hive Shell 命令导出</h3><p>基本语法：（hive -f/-e 执行语句或者脚本 &gt; file）</p><pre><code>$ bin/hive -e 'select * from default.student;' &gt;/opt/module/datas/export/student4.txt;</code></pre><h3 id="Export导出到HDFS上"><a href="#Export导出到HDFS上" class="headerlink" title="Export导出到HDFS上"></a>Export导出到HDFS上</h3><pre><code>hive (default)&gt; export table default.student to '/user/hive/warehouse/export/student';</code></pre><h2 id="清除表中数据（Truncate）"><a href="#清除表中数据（Truncate）" class="headerlink" title="清除表中数据（Truncate）"></a>清除表中数据（Truncate）</h2><blockquote><p>注意：Truncate只能删除管理表，不能删除外部表中数据</p></blockquote><pre><code>hive (default)&gt; truncate table student;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive DDL数据定义</title>
      <link href="/articles/hive/ddl-shu-ju-ding-yi.html"/>
      <url>/articles/hive/ddl-shu-ju-ding-yi.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ul><li><p>创建一个数据库，数据库在HDFS上的默认存储路径是: <strong>/user/hive/warehouse/*.db</strong>。</p><pre><code>  hive (default)&gt; create database db_hive;</code></pre></li><li><p>避免要创建的数据库已经存在错误，增加if not exists判断。（标准写法）</p><pre><code>  hive (default)&gt; create database db_hive;  FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. Database db_hive already exists  hive (default)&gt; create database if not exists db_hive;</code></pre></li><li><p>创建一个数据库，指定数据库在HDFS上存放的位置</p><pre><code>  hive (default)&gt; create database db_hive2 location '/db_hive2.db';</code></pre></li></ul><h2 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h2><h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><ul><li><p>显示全部数据库</p><pre><code>  hive (default)&gt; show databases;</code></pre></li><li><p>过滤显示数据库</p><pre><code>  hive (default)&gt; show databases like 'db_hive*';</code></pre></li></ul><h3 id="查看数据库详情"><a href="#查看数据库详情" class="headerlink" title="查看数据库详情"></a>查看数据库详情</h3><ul><li><p>显示数据库信息</p><pre><code>  hive (default)&gt; desc database db_hive;  OK  db_hive        hdfs://hadoop102:9000/user/hive/warehouse/</code></pre></li><li><p>显示数据库详细信息（extended）</p><pre><code>  hive (default)&gt; desc database db_hive;  OK  db_hive        hdfs://hadoop102:9000/user/hive/warehouse/</code></pre></li></ul><h3 id="切换当前数据库"><a href="#切换当前数据库" class="headerlink" title="切换当前数据库"></a>切换当前数据库</h3><pre><code>hive (default)&gt; use db_hive;</code></pre><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>用户可以使用 <strong>ALTER DATABASE</strong> 命令为某个数据库的 <strong>DBPROPERTIES</strong> 设置键-值对属性值，来描述这个数据库的属性信息。</p><p>数据库的其他元数据信息都是不可更改的，包括数据库名和数据库所在的目录位置。</p><pre><code>hive (default)&gt; alter database db_hive set dbproperties('createtime'='20200104');</code></pre><p>在hive中查看修改结果</p><pre><code>hive (default)&gt; desc database extended db_hive;db_name comment location        owner_name      owner_type      parametersdb_hive         hdfs://hadoop102:8020/user/hive/warehouse/db_hive.db    lvmaohai USER    {createtime=20200104}</code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><ul><li><p>删除空数据库</p><pre><code>  hive (default)&gt;drop database db_hive2;</code></pre></li><li><p>如果删除的数据库不存在，最好采用 if exists判断数据库是否存在</p><pre><code>  hive (default)&gt; drop database db_hive;  FAILED: SemanticException [Error 10072]: Database does not exist: db_hive  hive (default)&gt; drop database if exists db_hive2;</code></pre></li><li><p>如果数据库不为空，可以采用cascade命令，强制删除</p><pre><code>  hive&gt; drop database db_hive;  FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. InvalidOperationException(message:Database db_hive is not empty. One or more tables exist.)  hive&gt; drop database db_hive cascade;</code></pre></li></ul><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="建表语法"><a href="#建表语法" class="headerlink" title="建表语法"></a>建表语法</h3><pre><code>CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name [(col_name data_type [COMMENT col_comment], ...)] [COMMENT table_comment] [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)] [CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS] [ROW FORMAT row_format] [STORED AS file_format] [LOCATION hdfs_path]</code></pre><p>字段解释说明</p><ul><li><p><strong>CREATE TABLE</strong> 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</p></li><li><p><strong>EXTERNAL</strong> 表示创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION）。</p><blockquote><p>创建内部表时，会将数据移动到数据仓库指向的路径；<br>创建外部表时，仅记录数据所在的路径，不对数据的位置做任何改变。<br>在删除表的时，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</p></blockquote></li><li><p><strong>COMMENT</strong> 为表和列添加注释。</p></li><li><p><strong>PARTITIONED BY</strong> 创建分区表</p></li><li><p><strong>CLUSTERED BY</strong> 创建分桶表</p></li><li><p><strong>SORTED BY</strong> 按指定字段排序（不常用）</p></li><li><p><strong>ROW FORMAT DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char] [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]</strong> 用户在建表的时候可以自定义SerDe或者使用自带的SerDe。如果没有指定 <strong>ROW FORMAT</strong> 或者 <strong>ROW FORMAT DELIMITED</strong>，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive通过SerDe确定表的具体的列的数据。</p><blockquote><p>SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化。</p></blockquote></li><li><p><strong>STORED AS</strong> 指定存储文件类型</p><blockquote><p>常用的存储文件类型：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）<br>如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</p></blockquote></li><li><p><strong>LOCATION</strong> 指定表在HDFS上的存储位置。</p></li><li><p><strong>LIKE</strong> 允许用户复制现有的表结构，但是不复制数据。</p></li></ul><h3 id="管理表-内部表"><a href="#管理表-内部表" class="headerlink" title="管理表(内部表)"></a>管理表(内部表)</h3><p>默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表，Hive会（或多或少地）控制着数据的生命周期。Hive默认情况下会将这些表的数据存储在由配置项 <strong>hive.metastore.warehouse.dir</strong> (例如，/user/hive/warehouse)所定义的目录的子目录下。    当删除一个管理表时，Hive也会删除这个表中数据。管理表不适合和其他工具共享数据。</p><ul><li><p>普通创建表</p><pre><code>  create table if not exists student2(      id int,       name string  )  row format delimited fields terminated by '\t'  stored as textfile  location '/user/hive/warehouse/student2';</code></pre></li><li><p>根据查询结果创建表（查询的结果会添加到新创建的表中）</p><pre><code>  create table if not exists student3 as select id, name from student;</code></pre></li><li><p>根据已经存在的表结构创建表</p><pre><code>  create table if not exists student4 like student;</code></pre></li><li><p>查询表的类型</p><pre><code>  hive (default)&gt; desc formatted student2;  Table Type:             MANAGED_TABLE</code></pre></li></ul><h3 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h3><p>因为表是外部表，所以Hive并非认为其完全拥有这份数据。删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉。</p><ul><li><p>创建表</p><pre><code>  create external table if not exists student5(      id int,       name string  )  row format delimited fields terminated by '\t'  stored as textfile  location '/student5';</code></pre></li><li><p>查询表的类型</p><pre><code>  hive (default)&gt; desc formatted student5;  Table Type:             EXTERNAL_TABLE</code></pre></li></ul><h4 id="管理表与外部表的互相转换"><a href="#管理表与外部表的互相转换" class="headerlink" title="管理表与外部表的互相转换"></a>管理表与外部表的互相转换</h4><ol><li><p>查询表的类型</p><pre><code> hive (default)&gt; desc formatted student2; Table Type:             MANAGED_TABLE</code></pre></li><li><p>修改内部表student2为外部表</p><pre><code> alter table student2 set tblproperties('EXTERNAL'='TRUE');</code></pre></li><li><p>查询表的类型</p><pre><code> hive (default)&gt; desc formatted student2; Table Type:             EXTERNAL_TABLE</code></pre></li><li><p>修改外部表student2为内部表</p><pre><code> alter table student2 set tblproperties('EXTERNAL'='FALSE');</code></pre></li><li><p>查询表的类型</p><pre><code> hive (default)&gt; desc formatted student2; Table Type:             MANAGED_TABLE</code></pre><blockquote><p>注意：(‘EXTERNAL’=’TRUE’)和(‘EXTERNAL’=’FALSE’)为固定写法，区分大小写！</p></blockquote></li></ol><h4 id="管理表和外部表的使用场景"><a href="#管理表和外部表的使用场景" class="headerlink" title="管理表和外部表的使用场景"></a>管理表和外部表的使用场景</h4><p>每天将收集到的网站日志定期流入HDFS文本文件。在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过SELECT+INSERT进入内部表。</p><h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p>分区表实际上就是对应一个HDFS文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过WHERE子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>引入分区表（需要根据日期对日志进行管理）</li></ol><pre><code>/user/hive/warehouse/log_partition/20200102/20200102.log/user/hive/warehouse/log_partition/20200103/20200103.log/user/hive/warehouse/log_partition/20200104/20200104.log</code></pre><ol start="2"><li>创建分区表语法</li></ol><pre><code>create table dept_partition(    deptno int,     dname string,     loc string)partitioned by (month string)row format delimited fields terminated by '\t';</code></pre><ol start="3"><li>加载数据到分区表中</li></ol><pre><code>hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201910');hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201911');hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201912’);</code></pre><ol start="4"><li><p>查询分区表中数据</p><ul><li><p>单分区查询</p><pre><code>   select * from dept_partition where month='201910';</code></pre></li><li><p>多分区联合查询</p><pre><code>   select * from dept_partition where month='201912'   union   select * from dept_partition where month='201911'   union   select * from dept_partition where month='201910';</code></pre></li></ul></li><li><p>增加分区</p><ul><li><p>创建单个分区</p><pre><code>   alter table dept_partition add partition(month='201912');</code></pre></li><li><p>同时创建多个分区</p><pre><code>   alter table dept_partition add partition(month='201912') partition(month='201911');</code></pre></li></ul></li><li><p>删除分区</p><ul><li><p>删除单个分区</p><pre><code>   alter table dept_partition drop partition (month='201912');</code></pre></li><li><p>同时删除多个分区</p><pre><code>   alter table dept_partition drop partition (month='201911'), partition (month='201912');</code></pre></li></ul></li><li><p>查看分区表有多少分区</p><pre><code> show partitions dept_partition;</code></pre></li><li><p>查看分区表结构</p><pre><code> desc formatted dept_partition; # Partition Information           # col_name              data_type               comment</code></pre></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>创建二级分区表</p><pre><code> create table dept_partition2(     deptno int,      dname string,      loc string ) partitioned by (month string, day string) row format delimited fields terminated by '\t';</code></pre></li><li><p>正常的加载数据</p><ul><li><p>加载数据到二级分区表中</p><pre><code>   load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition2 partition(month='201912', day='13');</code></pre></li><li><p>查询分区数据</p><pre><code>   select * from dept_partition2 where month='201912' and day='13';</code></pre></li></ul></li><li><p>把数据直接上传到分区目录上，让分区表和数据产生关联的三种方式</p><p> <strong>方式一：上传数据后修复</strong></p><ul><li><p>上传数据</p><pre><code>  hive (default)&gt; dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201912/day=12;  hive (default)&gt; dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201912/day=12;</code></pre></li><li><p>查询数据（查询不到刚上传的数据）</p><pre><code>  hive (default)&gt; select * from dept_partition2 where month='201912' and day='12';</code></pre></li><li><p>执行修复命令</p><pre><code>  hive&gt; msck repair table dept_partition2;</code></pre></li><li><p>再次查询数据</p><pre><code>  hive (default)&gt; select * from dept_partition2 where month='201912' and day='12';</code></pre></li></ul><p> <strong>方式二：上传数据后添加分区</strong></p><ul><li><p>上传数据</p><pre><code>  hive (default)&gt; dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201912/day=11;  hive (default)&gt; dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201912/day=11;</code></pre></li><li><p>执行添加分区</p><pre><code>  hive (default)&gt; alter table dept_partition2 add partition(month='201912', day='11');</code></pre></li><li><p>查询数据</p><pre><code>  hive (default)&gt; select * from dept_partition2 where month='201912' and day='11';</code></pre></li></ul><p> <strong>方式三：上传数据后load数据到分区</strong></p><ul><li><p>创建目录</p><pre><code>  hive (default)&gt; dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201912/day=10;</code></pre></li><li><p>上传数据</p><pre><code>  hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table dept_partition2 partition(month='201912',day='10');</code></pre></li><li><p>查询数据</p><pre><code>  hive (default)&gt; select * from dept_partition2 where month='201912' and day='10';</code></pre></li></ul></li></ol><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><ol><li><p>语法</p><pre><code> ALTER TABLE table_name RENAME TO new_table_name</code></pre></li><li><p>实操案例</p><pre><code> hive (default)&gt; alter table dept_partition2 rename to dept_partition3;</code></pre></li></ol><h3 id="增加-修改-替换列信息"><a href="#增加-修改-替换列信息" class="headerlink" title="增加/修改/替换列信息"></a>增加/修改/替换列信息</h3><ol><li><p>语法</p><ul><li><p>更新列</p><pre><code>   ALTER TABLE table_name CHANGE [COLUMN] col_old_name col_new_name column_type [COMMENT col_comment] [FIRST|AFTER column_name]</code></pre></li><li><p>增加和替换列</p><pre><code>   ALTER TABLE table_name ADD|REPLACE COLUMNS (col_name data_type [COMMENT col_comment], ...) </code></pre><blockquote><p>注：ADD是代表新增一字段，字段位置在所有列后面(partition列前)，REPLACE则是表示替换表中所有字段。</p></blockquote></li></ul></li><li><p>实操案例</p><ul><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li><li><p>添加列</p><pre><code>   hive (default)&gt; alter table dept_partition add columns(deptdesc string);</code></pre></li><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li><li><p>更新列</p><pre><code>   hive (default)&gt; alter table dept_partition change column deptdesc desc int;</code></pre></li><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li><li><p>替换列</p><pre><code>   hive (default)&gt; alter table dept_partition replace columns(deptno string, dname string, loc string);</code></pre></li><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li></ul></li></ol><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><pre><code>hive (default)&gt; drop table dept_partition;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 数据类型</title>
      <link href="/articles/hive/shu-ju-lei-xing.html"/>
      <url>/articles/hive/shu-ju-lei-xing.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th align="left">Hive数据类型</th><th align="left">Java数据类型</th><th align="left">长度</th><th align="left">语法示例</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">byte</td><td align="left">1byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">SMALINT</td><td align="left">short</td><td align="left">2byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">INT</td><td align="left">int</td><td align="left">4byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">BIGINT</td><td align="left">long</td><td align="left">8byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">BOOLEAN</td><td align="left">boolean</td><td align="left">布尔类型，true或者false</td><td align="left">TRUE / FALSE</td></tr><tr><td align="left">FLOAT</td><td align="left">float</td><td align="left">单精度浮点数</td><td align="left">3.14159</td></tr><tr><td align="left">DOUBLE</td><td align="left">double</td><td align="left">双精度浮点数</td><td align="left">3.14159</td></tr><tr><td align="left">STRING</td><td align="left">string</td><td align="left">字符系列。可以指定字符集。可以使用单引号或者双引号。</td><td align="left">‘now is the time’ “for all good men”</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">date</td><td align="left">时间类型</td><td align="left">2020-01-04 00:00:00</td></tr><tr><td align="left">BINARY</td><td align="left">byte[]</td><td align="left">字节数组</td><td align="left"></td></tr></tbody></table><p>对于Hive的String类型相当于数据库的varchar类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储2GB的字符数。</p><h2 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h2><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th><th align="left">语法示例</th></tr></thead><tbody><tr><td align="left">STRUCT</td><td align="left">和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用。</td><td align="left">struct()</td></tr><tr><td align="left">MAP</td><td align="left">MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td align="left">map()</td></tr><tr><td align="left">ARRAY</td><td align="left">数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td align="left">array()</td></tr></tbody></table><p>Hive有三种复杂数据类型ARRAY、MAP 和 STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p>Hive的原子数据类型是可以进行隐式转换的，类似于Java的类型转换，例如某表达式使用INT类型，TINYINT会自动转换为INT类型，但是Hive不会进行反向转化，例如，某表达式使用TINYINT类型，INT不会自动转换为TINYINT类型，它会返回错误，除非使用CAST操作。</p><ol><li><p>隐式类型转换规则如下</p><ul><li>任何整数类型都可以隐式地转换为一个范围更广的类型，如TINYINT可以转换成INT，INT可以转换成BIGINT。</li><li>所有整数类型、FLOAT和STRING类型都可以隐式地转换成DOUBLE。</li><li>TINYINT、SMALLINT、INT都可以转换为FLOAT。</li><li>BOOLEAN类型不可以转换为任何其它的类型。</li></ul></li><li><p>可以使用CAST操作显示进行数据类型转换</p><p> 例如CAST(‘1’ AS INT)将把字符串’1’ 转换成整数1；如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值 NULL。</p></li></ol><h2 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h2><p>假设某表有如下一行，我们用JSON格式来表示其数据结构。在Hive下访问的格式为：</p><pre><code>{    "name": "songsong",    "friends": ["bingbing" , "lili"] , //列表Array,     "children": {                      //键值Map,        "xiao song": 18 ,        "xiaoxiao song": 19    }    "address": {                      //结构Struct,        "street": "hui long guan" ,        "city": "beijing"     }}</code></pre><p>基于上述数据结构，我们在Hive里创建对应的表，并导入数据。 </p><ol><li><p>创建本地测试文件test.txt</p><pre><code> songsong,bingbing_lili,xiao song:18_xiaoxiao song:19,hui long guan_beijingyangyang,caicai_susu,xiao yang:18_xiaoxiao yang:19,chao yang_beijing</code></pre><p> 注意：MAP，STRUCT和ARRAY里的元素间关系都可以用同一个字符表示，这里用“_”。</p></li><li><p>Hive上创建测试表test</p><pre><code> create table test(     name string,     friends array&lt;string&gt;,     children map&lt;string, int&gt;,     address struct&lt;street:string, city:string&gt; ) row format delimited fields terminated by ',' collection items terminated by '_' map keys terminated by ':' lines terminated by '\n';</code></pre><p> 字段解释：</p><ul><li><p><strong>row format delimited fields terminated by ‘,’</strong>        【 列分隔符 】</p></li><li><p><strong>collection items terminated by ‘_’</strong>                  【 MAP STRUCT 和 ARRAY 的分隔符(数据分割符号) 】</p></li><li><p><strong>map keys terminated by ‘:’</strong>                           【 MAP中的key与value的分隔符 】</p></li><li><p><strong>lines terminated by ‘\n’;</strong>                           【 行分隔符 】</p></li></ul></li><li><p>导入文本数据到测试表</p><pre><code> hive (default)&gt; load data local inpath '/opt/module/datas/test.txt' into table test</code></pre></li><li><p>访问三种集合列里的数据，以下分别是ARRAY，MAP，STRUCT的访问方式</p><pre><code> hive (default)&gt; select friends[1], children['xiao song'], address.city from test where name="songsong"; OK _c0     _c1     city lili    18      beijing Time taken: 0.076 seconds, Fetched: 1 row(s)</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 常见属性配置</title>
      <link href="/articles/hive/chang-jian-shu-xing-pei-zhi.html"/>
      <url>/articles/hive/chang-jian-shu-xing-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hive数据仓库位置配置"><a href="#Hive数据仓库位置配置" class="headerlink" title="Hive数据仓库位置配置"></a>Hive数据仓库位置配置</h2><ol><li><p>Default数据仓库的最原始位置是在hdfs上的：/user/hive/warehouse路径下。</p></li><li><p>在仓库目录下，没有对默认的数据库default创建文件夹。如果某张表属于default数据库，直接在数据仓库目录下创建一个文件夹。</p></li><li><p>修改default数据仓库原始位置（hive-site.xml）</p><pre><code> &lt;property&gt;     &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;     &lt;value&gt;/user/hive/warehouse&lt;/value&gt;     &lt;description&gt;location of default database for the warehouse&lt;/description&gt; &lt;/property&gt;</code></pre></li><li><p>配置同组用户有执行权限</p><pre><code>$ bin/hdfs dfs -chmod g+w /user/hive/warehouse</code></pre></li></ol><h2 id="HQL查询信息显示配置"><a href="#HQL查询信息显示配置" class="headerlink" title="HQL查询信息显示配置"></a>HQL查询信息显示配置</h2><ol><li><p>在hive-site.xml文件中添加如下配置信息，就可以实现显示当前数据库，以及查询表的头信息配置。</p><pre><code> &lt;property&gt;     &lt;name&gt;hive.cli.print.header&lt;/name&gt;     &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt;     &lt;name&gt;hive.cli.print.current.db&lt;/name&gt;     &lt;value&gt;true&lt;/value&gt; &lt;/property&gt;</code></pre></li><li><p>重新启动hive，对比配置前后差异。</p></li></ol><ul><li><p>配置前，如图所示<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-02.jpg" alt=""></p></li><li><p>配置后，如图所示<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-03.jpg" alt=""></p></li></ul><h2 id="参数配置方式"><a href="#参数配置方式" class="headerlink" title="参数配置方式"></a>参数配置方式</h2><ol><li><p>查看当前所有的配置信息</p><pre><code>hive&gt; set;</code></pre></li><li><p>参数的配置三种方式</p></li></ol><ul><li><p>配置文件方式</p><p>  默认配置文件：hive-default.xml </p><p>  用户自定义配置文件：hive-site.xml</p><p>  注意：用户自定义配置会覆盖默认配置。另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。配置文件的设定对本机启动的所有Hive进程都有效。</p></li><li><p>命令行参数方式</p><p>  启动Hive时，可以在命令行添加-hiveconf param=value来设定参数。</p><pre><code>  $ bin/hive -hiveconf mapred.reduce.tasks=10;</code></pre><p>  注意：仅对本次hive启动有效</p><p>  查看参数设置：</p><pre><code>  hive (default)&gt; set mapred.reduce.tasks;</code></pre></li><li><p>参数声明方式</p><p>  可以在HQL中使用SET关键字设定参数</p><pre><code>  hive (default)&gt; set mapred.reduce.tasks=100;</code></pre><p>  注意：仅对本次hive启动有效。</p><p>  查看参数设置</p><pre><code>  hive (default)&gt; set mapred.reduce.tasks;</code></pre></li></ul><p>上述三种设定方式的优先级依次递增。即配置文件&lt;命令行参数&lt;参数声明。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在会话建立以前已经完成了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 安装和配置</title>
      <link href="/articles/hive/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/hive/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Hive 版本：3.1.2</p></blockquote><h2 id="Homebrew安装Hive"><a href="#Homebrew安装Hive" class="headerlink" title="Homebrew安装Hive"></a>Homebrew安装Hive</h2><pre><code>$ brew install hive$ cd /usr/local/Celler/hive/3.1.2/libexec</code></pre><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><pre><code>$ vim ~/.zshrcexport HIVE_HOME="/usr/local/Cellar/hive/3.1.2/libexec"  export PATH="$HIVE_HOME/bin:$PATH"$ source ~/.zshrc</code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><blockquote><p>在 <strong>libexec/conf</strong> 下提供了一些 <strong>.template</strong> 模板，拷贝文件并去掉 <strong>.template</strong> 后缀即可</p></blockquote><h3 id="修改日志文件"><a href="#修改日志文件" class="headerlink" title="修改日志文件"></a>修改日志文件</h3><pre><code>$ cp hive-log4j2.properties.template hive-log4j2.properties$ cp beeline-log4j2.properties.template beeline-log4j2.properties$ cp hive-exec-log4j2.properties.template hive-exec-log4j2.properties$ cp llap-daemon-log4j2.properties.template llap-daemon-log4j2.properties$ cp llap-cli-log4j2.properties.template llap-cli-log4j2.properties# 更改 hive log 目录，默认为：/tmp$ vim hive-log4j2.propertiesproperty.hive.log.dir = /usr/local/Cellar/hive/3.1.2/libexec/logs</code></pre><h3 id="hive-site-xml-配置"><a href="#hive-site-xml-配置" class="headerlink" title="hive-site.xml 配置"></a>hive-site.xml 配置</h3><blockquote><p>将 <strong>hive-default.xml.template</strong> 文件复制一份，并且改名为 <strong>hive-site.xml</strong></p></blockquote><pre><code>$ cp hive-default.xml.template hive-site.xml</code></pre><ul><li><p>在 hdfs 创建 hive 目录（在hive-site.xml中有这样的配置）</p><pre><code>  &lt;property&gt;      &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;      &lt;value&gt;/user/hive/warehouse&lt;/value&gt;      &lt;description&gt;Hive 默认的数据文件存储路径，通常为 HDFS 可写的路径&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.exec.scratchdir&lt;/name&gt;      &lt;value&gt;/tmp/hive&lt;/value&gt;      &lt;description&gt;HDFS路径，用于存储不同 map/reduce 阶段的执行计划和这些阶段的中间输出结果&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.cli.print.header&lt;/name&gt;      &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.cli.print.current.db&lt;/name&gt;      &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;</code></pre><p>  在hdfs中新建目录 <strong>/user/hive/warehouse</strong> 和 <strong>/tmp/hive</strong>，赋予读写权限</p><pre><code>  $ hadoop fs -mkdir -p /user/hive/warehouse  $ hadoop fs -chmod 777 /user/hive/warehouse  $ hadoop fs -mkdir -p /tmp/hive  $ hadoop fs -chmod 777 /tmp/hive</code></pre></li><li><p>修改 hive 临时目录</p><blockquote><p>将 ${system:java.io.tmpdir} 替换为本地hive的临时目录(/usr/local/Cellar/hive/3.1.2/tmp/hive)，并赋予读写权限；<br>将 ${system:user.name} 替换为root；</p></blockquote><pre><code>  &lt;property&gt;      &lt;name&gt;hive.querylog.location&lt;/name&gt;      &lt;value&gt;${system:java.io.tmpdir}/${system:user.name}&lt;/value&gt;      &lt;description&gt;Location of Hive run time structured log file&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.server2.logging.operation.log.location&lt;/name&gt;      &lt;value&gt;${system:java.io.tmpdir}/${system:user.name}/operation_logs&lt;/value&gt;      &lt;description&gt;Top level directory where operation logs are stored if logging functionality is enabled&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;      &lt;value&gt;${system:java.io.tmpdir}/${system:user.name}&lt;/value&gt;      &lt;description&gt;Local scratch space for Hive jobs&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.downloaded.resources.dir&lt;/name&gt;      &lt;value&gt;${system:java.io.tmpdir}/${hive.session.id}_resources&lt;/value&gt;      &lt;description&gt;Temporary local directory for added resources in the remote file system.&lt;/description&gt;  &lt;/property&gt;</code></pre></li><li><p>修改数据库相关的配置</p><blockquote><p>javax.jdo.option.ConnectionURL    将对应的value修改为MySQL的地址<br>javax.jdo.option.ConnectionDriverName    将对应的value修改为MySQL驱动类路径<br>javax.jdo.option.ConnectionUserName    将对应的value修改为MySQL数据库登录名<br>javax.jdo.option.ConnectionPassword    将对应的value修改为MySQL数据库的登录密码<br>hive.metastore.schema.verification    将对应的value修改为false</p></blockquote><pre><code>  &lt;property&gt;      &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;      &lt;value&gt;jdbc:mysql://127.0.0.1:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;      &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;      &lt;value&gt;root&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;      &lt;value&gt;&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;      &lt;value&gt;false&lt;/value&gt;  &lt;/property&gt;</code></pre><p>  <a href="https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-5.1.48.tar.gz" target="_blank" rel="noopener">下载MySQL驱动包</a> 并 copy 到lib目录下</p></li><li><p>WebUI</p><blockquote><p>Hive从2.0版本开始，为HiveServer2提供了一个简单的WEB UI界面，界面中可以直观的看到当前链接的会话、历史日志、配置参数以及度量信息。</p></blockquote><pre><code>  &lt;property&gt;      &lt;name&gt;hive.server2.webui.host&lt;/name&gt;      &lt;value&gt;127.0.0.1&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;      &lt;name&gt;hive.server2.webui.port&lt;/name&gt;      &lt;value&gt;10002&lt;/value&gt;  &lt;/property&gt;</code></pre><p>  需要重启HiveServer2</p><pre><code>  $ hive --service hiveserver2 &amp;</code></pre></li></ul><h3 id="hive-env-sh-配置"><a href="#hive-env-sh-配置" class="headerlink" title="hive-env.sh 配置"></a>hive-env.sh 配置</h3><blockquote><p>将 <strong>hive-env.sh.template</strong> 文件复制一份，并且改名为 <strong>hive-env.sh</strong> 文件</p></blockquote><pre><code>$ cp hive-env.sh.template hive-env.sh$ vim hive-env.shexport HADOOP_HOME=/usr/local/Cellar/hadoop/3.2.1/libexecexport HIVE_CONF_DIR=/usr/local/Cellar/hive/3.1.2/confexport HIVE_AUX_JARS_PATH=/usr/local/Cellar/hive/3.1.2/lib</code></pre><h2 id="启动和测试"><a href="#启动和测试" class="headerlink" title="启动和测试"></a>启动和测试</h2><h3 id="对MySQL数据库进行初始化"><a href="#对MySQL数据库进行初始化" class="headerlink" title="对MySQL数据库进行初始化"></a>对MySQL数据库进行初始化</h3><blockquote><p>执行成功后，hive数据库里已经有一堆表创建好了</p></blockquote><pre><code>$ /usr/local/opt/hive/bin/schematool -initSchema -dbType mysql</code></pre><h3 id="启动hive"><a href="#启动hive" class="headerlink" title="启动hive"></a>启动hive</h3><pre><code>$ /usr/local/opt/hive/bin/hiveor$ hive</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code># 进入hive命令行&gt; show functions;</code></pre><h3 id="新建表以及导入数据的测试"><a href="#新建表以及导入数据的测试" class="headerlink" title="新建表以及导入数据的测试"></a>新建表以及导入数据的测试</h3><pre><code>&gt; create database db_hive_edu;&gt; use db_hive_edu;&gt; create table student(id int,name string) row format delimited fields terminated by '\t';# 将文件数据写入表中$ touch /opt/hive/student.txt001 zhangsan002 lisi003 wangwu004 zhaoliu005 chenqi# 载入表&gt; load data local inpath '/opt/hive/student.txt' into table db_hive_edu.student;# 测试&gt; select * from student;OK001 zhangsan002 lisi003 wangwu004 zhaoliu005 chenqi# 查看hdfs上数据/user/hive/warehouse/db_hive_edu.db/student# 在MySQL中查看$ SELECT * FROM hive.TBLS;</code></pre><h3 id="错误和解决"><a href="#错误和解决" class="headerlink" title="错误和解决"></a>错误和解决</h3><ol><li><p>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</p><p>解决方案：实际上其实这个警告可以不予理会。</p></li></ol><ol start="2"><li><p>There are 2 datanode(s) running and 2 node(s) areexcluded in this operation.</p><p> 发生原因：hadoop中的datanode有问题，没法写入数据。</p><p> 解决方案：检查hadoop是否正常运行。</p></li><li><p>Class path contains multiple SLF4J bindings.</p><pre><code> SLF4J: Class path contains multiple SLF4J bindings. SLF4J: Found binding in [jar:file:/usr/local/Cellar/hive/3.1.2/libexec/lib/log4j-slf4j-impl-2.10.0.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: Found binding in [jar:file:/usr/local/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</code></pre><p> 发生原因：hive 和 hadoop 依赖的 log4j-slf4j 包版本不一致，造成冲突</p><p> 解决方案：删除 hive lib 目录下的 log4j-slf4j 包；</p><pre><code> $ rm /usr/local/Cellar/hive/3.1.2/libexec/lib/log4j-slf4j-impl-2.10.0.jar</code></pre></li><li><p>Exception in thread “main” java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument</p><pre><code> Exception in thread "main" java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V     at org.apache.hadoop.conf.Configuration.set(Configuration.java:1357)     at org.apache.hadoop.conf.Configuration.set(Configuration.java:1338)     at org.apache.hadoop.mapred.JobConf.setJar(JobConf.java:536)     at org.apache.hadoop.mapred.JobConf.setJarByClass(JobConf.java:554)     at org.apache.hadoop.mapred.JobConf.&lt;init&gt;(JobConf.java:448)     at org.apache.hadoop.hive.conf.HiveConf.initialize(HiveConf.java:5141)     at org.apache.hadoop.hive.conf.HiveConf.&lt;init&gt;(HiveConf.java:5104)     at org.apache.hive.beeline.HiveSchemaTool.&lt;init&gt;(HiveSchemaTool.java:96)     at org.apache.hive.beeline.HiveSchemaTool.main(HiveSchemaTool.java:1473)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.apache.hadoop.util.RunJar.run(RunJar.java:323)     at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</code></pre><p> 发生原因：hive内依赖的guava.jar和hadoop内的版本不一致造成的。</p><p> 解决方案：</p><ul><li><p>查看hadoop安装目录下share/hadoop/common/lib内guava.jar版本；</p></li><li><p>查看hive安装目录下lib内guava.jar的版本；</p></li><li><p>如果两者不一致，删除版本低的，并拷贝高版本的到相应的目录下；</p><pre><code>$ rm /usr/local/Cellar/hive/3.1.2/libexec/lib/guava-19.0.jar$ cp /usr/local/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/guava-27.0-jre.jar /usr/local/Cellar/hive/3.1.2/libexec/lib/</code></pre></li></ul></li><li><p>com.ctc.wstx.exc.WstxParsingException: Illegal character entity: expansion character</p><pre><code> Exception in thread "main" java.lang.RuntimeException: com.ctc.wstx.exc.WstxParsingException: Illegal character entity: expansion character (code 0x8 at [row,col,system-id]: [3215,96,"file:/usr/local/Cellar/hive/3.1.2/libexec/conf/hive-site.xml"]     at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:3024)     at org.apache.hadoop.conf.Configuration.loadResources(Configuration.java:2973)     at org.apache.hadoop.conf.Configuration.getProps(Configuration.java:2848)     at org.apache.hadoop.conf.Configuration.get(Configuration.java:1460)     at org.apache.hadoop.hive.conf.HiveConf.getVar(HiveConf.java:4996)     at org.apache.hadoop.hive.conf.HiveConf.getVar(HiveConf.java:5069)     at org.apache.hadoop.hive.conf.HiveConf.initialize(HiveConf.java:5156)     at org.apache.hadoop.hive.conf.HiveConf.&lt;init&gt;(HiveConf.java:5104)     at org.apache.hive.beeline.HiveSchemaTool.&lt;init&gt;(HiveSchemaTool.java:96)     at org.apache.hive.beeline.HiveSchemaTool.main(HiveSchemaTool.java:1473)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.apache.hadoop.util.RunJar.run(RunJar.java:323)     at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</code></pre><p> 发生原因：hive-site.xml包括无效字符</p><pre><code> &lt;property&gt;     &lt;name&gt;hive.txn.xlock.iow&lt;/name&gt;     &lt;value&gt;true&lt;/value&gt;     &lt;description&gt;     Ensures commands with OVERWRITE (such as INSERT OVERWRITE) acquire Exclusive locks for&amp;...8;transactional tables.  This ensures that inserts (w/o overwrite) running concurrently     are not hidden by the INSERT OVERWRITE.     &lt;/description&gt; &lt;/property</code></pre><p> 解决方案：去掉无效字符</p><pre><code> &lt;property&gt;     &lt;name&gt;hive.txn.xlock.iow&lt;/name&gt;     &lt;value&gt;true&lt;/value&gt;     &lt;description&gt;     Ensures commands with OVERWRITE (such as INSERT OVERWRITE) acquire Exclusive locks for;transactional tables.  This ensures that inserts (w/o overwrite) running concurrently     are not hidden by the INSERT OVERWRITE.     &lt;/description&gt; &lt;/property&gt;</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 基本概念</title>
      <link href="/articles/hive/ji-ben-gai-nian.html"/>
      <url>/articles/hive/ji-ben-gai-nian.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h2><p>Hive是由Facebook开源用于解决海量结构化日志的数据统计。</p><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类SQL查询功能。</p><p>本质是：将HQL转化成MapReduce程序。</p><ul><li>Hive处理的数据存储在HDFS</li><li>Hive分析数据底层的实现是MapReduce</li><li>执行程序运行在Yarn上</li></ul><h2 id="Hive的优缺点"><a href="#Hive的优缺点" class="headerlink" title="Hive的优缺点"></a>Hive的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。</li><li>避免了去写MapReduce，减少开发人员的学习成本。</li><li>Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。</li><li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</li><li>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>Hive的HQL表达能力有限</p><ul><li>迭代式算法无法表达</li><li>数据挖掘方面不擅长</li></ul></li><li><p>Hive的效率比较低</p><ul><li>Hive自动生成的MapReduce作业，通常情况下不够智能化</li><li>Hive调优比较困难，粒度较粗</li></ul></li></ul><h2 id="Hive架构原理"><a href="#Hive架构原理" class="headerlink" title="Hive架构原理"></a>Hive架构原理</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-00.jpg" alt=""></p><ul><li><p>用户接口：Client</p><ul><li>CLI（hive shell）</li><li>JDBC/ODBC(java访问hive)</li><li>WEBUI（浏览器访问hive）</li></ul></li><li><p>元数据：Metastore</p><p>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；</p><p>默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore</p></li><li><p>Hadoop</p><p>使用HDFS进行存储，使用MapReduce进行计算。</p></li><li><p>驱动器：Driver</p><ul><li>解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</li><li>编译器（Physical Plan）：将AST编译生成逻辑执行计划。</li><li>优化器（Query Optimizer）：对逻辑执行计划进行优化。</li><li>执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-01.jpg" alt=""></p><p>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</p><h2 id="Hive和数据库比较"><a href="#Hive和数据库比较" class="headerlink" title="Hive和数据库比较"></a>Hive和数据库比较</h2><p>由于 Hive 采用了类似SQL 的查询语言 HQL(Hive Query Language)，因此很容易将 Hive 理解为数据库。其实从结构上来看，Hive 和数据库除了拥有类似的查询语言，再无类似之处。本文将从多个方面来阐述 Hive 和数据库的差异。数据库可以用在 Online 的应用中，但是Hive 是为数据仓库而设计的，清楚这一点，有助于从应用角度理解 Hive 的特性。</p><ul><li><p>查询语言</p><p>由于SQL被广泛的应用在数据仓库中，因此，专门针对Hive的特性设计了类SQL的查询语言HQL。熟悉SQL开发的开发者可以很方便的使用Hive进行开发。</p></li><li><p>数据存储位置</p><p>Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。</p></li><li><p>数据更新</p><p>由于Hive是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET修改数据。</p></li><li><p>索引</p><p>Hive在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key建立索引。Hive要访问数据中满足条件的特定值时，需要暴力扫描整个数据，因此访问延迟较高。由于 MapReduce 的引入， Hive 可以并行访问数据，因此即使没有索引，对于大数据量的访问，Hive 仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了 Hive 不适合在线数据查询。</p></li><li><p>执行</p><p>Hive中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的。而数据库通常有自己的执行引擎。</p></li><li><p>执行延迟</p><p>Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce框架。由于MapReduce 本身具有较高的延迟，因此在利用MapReduce 执行Hive查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive的并行计算显然能体现出优势。</p></li><li><p>可扩展性</p><p>由于Hive是建立在Hadoop之上的，因此Hive的可扩展性是和Hadoop的可扩展性是一致的（世界上最大的Hadoop 集群在 Yahoo!，2009年的规模在4000 台节点左右）。而数据库由于 ACID 语义的严格限制，扩展行非常有限。目前最先进的并行数据库 Oracle 在理论上的扩展能力也只有100台左右。</p></li><li><p>数据规模</p><p>由于Hive建立在集群上并可以利用MapReduce进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 安装和配置</title>
      <link href="/articles/hadoop/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/hadoop/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Hadoop 版本：3.2.1</p></blockquote><h2 id="打开本地电脑的ssh登录方式"><a href="#打开本地电脑的ssh登录方式" class="headerlink" title="打开本地电脑的ssh登录方式"></a>打开本地电脑的ssh登录方式</h2><pre><code># 生成公钥$ ssh-keygen -t rsa -C "your.email@example.com" -b 4096# 一路默认# 拷贝$ cat ~/.ssh/id_rsa.pub# 拷贝至电脑信任列表$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></pre><p>系统设置(System Preferences) -&gt; 共享(sharing) -&gt; 勾选☑️远程登录(Remote Login)</p><p>最后可以在终端(Terminal)测试下</p><pre><code>$ ssh localhost</code></pre><h2 id="使用Homebrew安装Hadoop"><a href="#使用Homebrew安装Hadoop" class="headerlink" title="使用Homebrew安装Hadoop"></a>使用Homebrew安装Hadoop</h2><pre><code>$ brew install hadoop$ cd /usr/local/Celler/hadoop/3.2.1/libexec</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><blockquote><p>Hadoop有三种安装模式：单机模式，伪分布式模式，分布式模式。Homebrew生成的默认是单机模式，下面只涉及伪分布式配置。<br>配置文件路径：/usr/local/Celler/hadoop/3.2.1/libexec/etc/hadoop</p></blockquote><ul><li>修改core-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;    &lt;value&gt;/usr/local/Cellar/hadoop/hdfs/tmp&lt;/value&gt;    &lt;description&gt;A base for other temporary directories&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;fs.default.name&lt;/name&gt;    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>修改mapred-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;mapred.job.tracker&lt;/name&gt;    &lt;value&gt;localhost:9010&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;    &lt;value&gt;HADOOP_MAPRED_HOME=$HADOOP_HOME&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;mapreduce.map.env&lt;/name&gt;    &lt;value&gt;HADOOP_MAPRED_HOME=$HADOOP_HOME&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;    &lt;value&gt;HADOOP_MAPRED_HOME=$HADOOP_HOME&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>修改hdfs-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;!-- 伪分布式配置 --&gt;  &lt;property&gt;    &lt;name&gt;dfs.replication&lt;/name&gt;    &lt;value&gt;1&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>yarn-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>修改hadoop-env.sh</li></ul><pre><code>export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home"export HADOOP_OPTS="-Djava.net.preferIPv4Stack=true -Dsun.security.krb5.debug=true -Dsun.security.spnego.debug"export HADOOP_OS_TYPE=${HADOOP_OS_TYPE:-$(uname -s)}case ${HADOOP_OS_TYPE} in  Darwin*)    export HADOOP_OPTS="${HADOOP_OPTS} -Djava.security.krb5.realm= "    export HADOOP_OPTS="${HADOOP_OPTS} -Djava.security.krb5.kdc= "    export HADOOP_OPTS="${HADOOP_OPTS} -Djava.security.krb5.conf= "    export YARN_HOME=$HADOOP_HOME  ;;esac</code></pre><h2 id="初始化NameNode"><a href="#初始化NameNode" class="headerlink" title="初始化NameNode"></a>初始化NameNode</h2><blockquote><p>注意⚠️建议不要往~/.bash_profile里PATH变量添加hadoop相关的路径，楼主遇到过坑，每次在终端打开/usr/local/Celler/hadoop/3.2.1/</p></blockquote><pre><code>$ ./bin/hdfs namenode -format </code></pre><blockquote><p>只需要第一次,玩崩了也可以再执行下</p></blockquote><h2 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h2><blockquote><p>可以在终端任意位置使用jps查看启动的java应用程序，理论启动完毕其中会包括：NameNode, DataNode, NodeManager, ResoureManager四个java程序</p></blockquote><ul><li>启动NameNode和DataNode</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/start-dfs.sh$ jps -lm</code></pre><p>启动完毕即可登录：<a href="http://localhost:9870" target="_blank" rel="noopener">http://localhost:9870</a></p><ul><li>启动Yarn(ResourceManager和NodeManager)</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/start-yarn.sh$ jps -lm</code></pre><p>启动完毕即可登录：<a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></p><ul><li>关闭NameNode和DataNode</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/stop-dfs.sh$ jps -lm</code></pre><ul><li>关闭Yarn(ResourceManager和NodeManager)</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/stop-yarn.sh$ jps -lm</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code># 打开文件执行位置$ cd /usr/local/Cellar/hadoop/3.2.1/bin# 查看已启动内容$ jps# 查看信息$ hdfs dfsadmin -report# 创建文件夹$ hdfs dfs -mkdir /test# 查看文件夹下文件$ hdfs dfs -ls /# 查看所有命令$ hdfs dfs -help# 查看文件内容$ hdfs dfs -cat /test/mk.txt# 拷贝至hdfs$ hdfs dfs -copyFromLocal /Users/goddy/repo/hadoop/hdfs-file/mk.txt /test/# 拷贝至本地$ hdfs dfs -copyToLocal /test/mk.txt /Users/goddy/repo/hadoop/hdfs-file/mk2.txt# 更改文件权限$ hdfs dfs -chmod 777 /test/mk.txt备注：hdfs dfs 可以替换为：hadoop fs</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka API 应用实战</title>
      <link href="/articles/kafka/api-ying-yong-shi-zhan.html"/>
      <url>/articles/kafka/api-ying-yong-shi-zhan.html</url>
      
        <content type="html"><![CDATA[<h2 id="Producer-API"><a href="#Producer-API" class="headerlink" title="Producer API"></a>Producer API</h2><h3 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h3><p>Kafka 的 Producer 发送消息采用的是<font color="red">异步发送</font>的方式。在消息发送的过程中，涉及到了两个线程——<font color="red">main 线程和 Sender 线程</font>，以及<font color="red">一个线程共享变量——RecordAccumulator</font>。 main 线程将消息发送给 RecordAccumulator，Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-15.jpg" alt="KafkaProducer 发送消息流程"></p><p><strong><font color="red">相关参数:</font></strong></p><ul><li><strong>batch.size</strong> 只有数据积累到 batch.size 之后，sender 才会发送数据。</li><li><strong>linger.ms</strong> 如果数据迟迟未达到 batch.size，sender 等待 linger.time 之后就会发送数据。</li></ul><h3 id="异步发送-API"><a href="#异步发送-API" class="headerlink" title="异步发送 API"></a>异步发送 API</h3><ol><li><p>导入依赖</p><pre><code> &lt;dependency&gt;     &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;     &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;     &lt;version&gt;0.11.0.0&lt;/version&gt; &lt;/dependency&gt;</code></pre></li><li><p>编写代码</p></li></ol><p>需要用到的类:</p><p><strong>KafkaProducer:</strong> 需要创建一个生产者对象，用来发送数据<br><strong>ProducerConfig:</strong> 获取所需的一系列配置参数<br><strong>ProducerRecord:</strong> 每条数据都要封装成一个 ProducerRecord 对象</p><ul><li><p>不带回调函数的 API</p><pre><code>  package com.philcode.kafka;  import org.apache.kafka.clients.producer.KafkaProducer;  import org.apache.kafka.clients.producer.Producer;  import org.apache.kafka.clients.producer.ProducerRecord;  import java.util.Properties;  public class CustomProducer {      public static void main(String[] args) {          Properties props = new Properties();          // kafka 集群，broker-list          props.put("bootstrap.servers", "localhost:9092");          // 重试次数          props.put("retries", 1);          // 批次大小          props.put("batch.size", 16384);          // 等待时间          props.put("linger.ms", 1);          // RecordAccumulator 缓冲区大小          props.put("buffer.memory", 33554432);          props.put("acks", "all");          props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");          props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");          Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);          for (int i = 0; i &lt; 100; i++) {              producer.send(new ProducerRecord&lt;&gt;(                  "first",                  Integer.toString(i),                  Integer.toString(i)              ));          }          producer.close();      }  }</code></pre></li><li><p>带回调函数的 API</p><p>  回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是 RecordMetadata 和 Exception，如果 Exception 为 null，说明消息发送成功，如果 Exception 不为 null，说明消息发送失败。</p><p>  <font color="red">注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试。</font></p><pre><code>  package com.philcode.kafka;  import org.apache.kafka.clients.producer.Callback;  import org.apache.kafka.clients.producer.KafkaProducer;  import org.apache.kafka.clients.producer.Producer;  import org.apache.kafka.clients.producer.ProducerRecord;  import org.apache.kafka.clients.producer.RecordMetadata;  import java.util.Properties;  public class CustomProducer {      public static void main(String[] args) {          Properties props = new Properties();          // kafka 集群，broker-list          props.put("bootstrap.servers", "localhost:9092");          // 重试次数          props.put("retries", 1);          // 批次大小          props.put("batch.size", 16384);          // 等待时间          props.put("linger.ms", 1);          // RecordAccumulator 缓冲区大小          props.put("buffer.memory", 33554432);          props.put("acks", "all");          props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");          props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");          Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);          for (int i = 0; i &lt; 100; i++) {              producer.send(new ProducerRecord&lt;&gt;(                  "first",                  Integer.toString(i),                  Integer.toString(i)),                  new Callback() {                      //回调函数，该方法会在 Producer 收到 ack 时调用，为异步调用 @Override                      public void onCompletion(RecordMetadata metadata, Exception exception) {                          if (exception == null) {                              System.out.println("success-&gt;" + metadata.offset());                          } else {                              exception.printStackTrace();                          }                      }                  }              );          }          producer.close();      }  }</code></pre></li></ul><h3 id="同步发送-API"><a href="#同步发送-API" class="headerlink" title="同步发送 API"></a>同步发送 API</h3><p>同步发送的意思就是，一条消息发送之后，会阻塞当前线程，直至返回 ack。</p><p>由于 send 方法返回的是一个 Future 对象，根据 Futrue 对象的特点，我们也可以实现同步发送的效果，只需在调用 Future 对象的 get 方发即可。</p><pre><code>package com.philcode.kafka;import org.apache.kafka.clients.producer.KafkaProducer;import org.apache.kafka.clients.producer.Producer;import org.apache.kafka.clients.producer.ProducerRecord;import java.util.Properties;public class CustomProducer {    public static void main(String[] args) {        Properties props = new Properties();        // kafka 集群，broker-list        props.put("bootstrap.servers", "localhost:9092");        // 重试次数        props.put("retries", 1);        // 批次大小        props.put("batch.size", 16384);        // 等待时间        props.put("linger.ms", 1);        // RecordAccumulator 缓冲区大小        props.put("buffer.memory", 33554432);        props.put("acks", "all");        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);        for (int i = 0; i &lt; 100; i++) {            producer.send(new ProducerRecord&lt;&gt;(                "first",                Integer.toString(i),                Integer.toString(i)            )).get();        }        producer.close();    }}</code></pre><h2 id="Consumer-API"><a href="#Consumer-API" class="headerlink" title="Consumer API"></a>Consumer API</h2><p>Consumer 消费数据时的可靠性是很容易保证的，因为数据在 Kafka 中是持久化的，故 不用担心数据丢失问题。</p><p>由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。</p><p>所以 offset 的维护是 Consumer 消费数据是必须考虑的问题。</p><h3 id="自动提交-offset"><a href="#自动提交-offset" class="headerlink" title="自动提交 offset"></a>自动提交 offset</h3><ol><li><p>导入依赖</p><pre><code> &lt;dependency&gt;     &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;     &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;     &lt;version&gt;0.11.0.0&lt;/version&gt; &lt;/dependency&gt;</code></pre></li><li><p>编写代码</p><p> 需要用到的类:</p><ul><li><p><strong>KafkaConsumer:</strong> 需要创建一个消费者对象，用来消费数据</p></li><li><p><strong>ConsumerConfig:</strong> 获取所需的一系列配置参数</p></li><li><p><strong>ConsuemrRecord:</strong> 每条数据都要封装成一个 ConsumerRecord 对象</p><p>为了使我们能够专注于自己的业务逻辑，Kafka 提供了自动提交 offset 的功能，自动提交 offset 的相关参数:</p></li><li><p><strong>enable.auto.commit:</strong> 是否开启自动提交 offset 功能</p></li><li><p><strong>auto.commit.interval.ms:</strong> 自动提交 offset 的时间间隔</p><pre><code>package com.philcode.kafka;import org.apache.kafka.clients.consumer.ConsumerRecord;import org.apache.kafka.clients.consumer.ConsumerRecords;import org.apache.kafka.clients.consumer.KafkaConsumer;import java.util.Arrays;import java.util.Properties;public class CustomConsumer {  public static void main(String[] args) {      Properties props = new Properties();      props.put("bootstrap.servers", "localhost:9092");      props.put("group.id", "test");      // 打开自动提交 offset      props.put("enable.auto.commit", "true");      props.put("auto.commit.interval.ms", "1000");      props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");      props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");      KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);      consumer.subscribe(Arrays.asList("first"));      while (true) {          ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);          for (ConsumerRecord&lt;String, String&gt; record : records) {              System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());          }      }  }}</code></pre></li></ul></li></ol><h3 id="手动提交-offset"><a href="#手动提交-offset" class="headerlink" title="手动提交 offset"></a>手动提交 offset</h3><p>虽然自动提交 offset 十分简介便利，但由于其是基于时间提交的，开发人员难以把握 offset 提交的时机。因此 Kafka 还提供了手动提交 offset 的 API。</p><p>手动提交 offset 的方法有两种：分别是 commitSync(同步提交)和 commitAsync(异步提交)。两者的相同点是，都会将本次 poll 的一批数据最高的偏移量提交；不同点是， commitSync 阻塞当前线程，一直到提交成功，并且会自动失败重试(由不可控因素导致，也会出现提交失败)；而 commitAsync 则没有失败重试机制，故有可能提交失败。</p><ul><li><p>同步提交 offset</p><p>  由于同步提交 offset 有失败重试机制，故更加可靠，以下为同步提交 offset 的示例。</p><pre><code>  package com.philcode.kafka;  import org.apache.kafka.clients.consumer.ConsumerRecord;  import org.apache.kafka.clients.consumer.ConsumerRecords;  import org.apache.kafka.clients.consumer.KafkaConsumer;  import java.util.Arrays;  import java.util.Properties;  public class CustomConsumer {      public static void main(String[] args) {          Properties props = new Properties();          props.put("bootstrap.servers", "localhost:9092");          props.put("group.id", "test");          // 关闭自动提交 offset          props.put("enable.auto.commit", "false");          props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");          props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");          KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);          consumer.subscribe(Arrays.asList("first"));          while (true) {              ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);              for (ConsumerRecord&lt;String, String&gt; record : records) {                  System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());              }              // 同步提交，当前线程会阻塞直到 offset 提交成功              consumer.commitSync();          }      }  }</code></pre></li><li><p>异步提交 offset</p><p>  虽然同步提交 offset 更可靠一些，但是由于其会阻塞当前线程，直到提交成功，因此吞吐量会收到很大的影响，所以更多的情况下，会选用异步提交 offset 的方式。 </p><p>  以下为异步提交 offset 的示例:</p><pre><code>  package com.philcode.kafka;  import org.apache.kafka.clients.consumer.ConsumerRecord;  import org.apache.kafka.clients.consumer.ConsumerRecords;  import org.apache.kafka.clients.consumer.KafkaConsumer;  import org.apache.kafka.clients.consumer.OffsetAndMetadata;  import org.apache.kafka.clients.consumer.OffsetCommitCallback;  import org.apache.kafka.common.TopicPartition;  import java.util.Arrays;  import java.util.Map;  import java.util.Properties;  public class CustomConsumer {      public static void main(String[] args) {          Properties props = new Properties();          props.put("bootstrap.servers", "localhost:9092");          props.put("group.id", "test");          // 关闭自动提交 offset          props.put("enable.auto.commit", "false");          props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");          props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");          KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);          consumer.subscribe(Arrays.asList("first"));          while (true) {              ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);              for (ConsumerRecord&lt;String, String&gt; record : records) {                  System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());              }              // 异步提交              consumer.commitAsync(new OffsetCommitCallback() {                  @Override                  public void onComplete(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception) {                      if (exception != null) {                          System.err.println("Commit failed for" + offsets);                      }                  }              });          }      }  }</code></pre></li><li><p>数据漏消费和重复消费分析</p></li></ul><p>无论是同步提交还是异步提交 offset，都有可能会造成数据的漏消费或者重复消费。</p><p>先提交 offset 后消费，有可能造成数据的漏消费；而先消费后提交 offset，有可能会造成数据的重复消费。</p><h3 id="自定义存储-offset"><a href="#自定义存储-offset" class="headerlink" title="自定义存储 offset"></a>自定义存储 offset</h3><p>Kafka 0.9 版本之前，offset 存储在 zookeeper，0.9 版本及之后，默认将 offset 存储在 Kafka 的一个内置的 topic 中。除此之外，Kafka 还可以选择自定义存储 offset。</p><p>offset 的维护是相当繁琐的，因为需要考虑到消费者的 Rebalace。</p><p><font color="red">当有新的消费者加入消费者组、已有的消费者推出消费者组或者所订阅的主题的分区发 生变化，就会触发到分区的重新分配，重新分配的过程叫做 Rebalance。</font></p><p>消费者发生 Rebalance 之后，每个消费者消费的分区就会发生变化。<font color="red">因此消费者要首先获取到自己被重新分配到的分区，并且定位到每个分区最近提交的 offset 位置继续消费。</font></p><p>要实现自定义存储 offset，需要借助 ConsumerRebalanceListener，以下为示例代码，其中提交和获取 offset 的方法，需要根据所选的 offset 存储系统自行实现。</p><pre><code>package com.philcode.kafka;import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;import org.apache.kafka.clients.consumer.ConsumerRecord;import org.apache.kafka.clients.consumer.ConsumerRecords;import org.apache.kafka.clients.consumer.KafkaConsumer;import org.apache.kafka.common.TopicPartition;import java.util.Arrays;import java.util.Collection;import java.util.HashMap;import java.util.Map;import java.util.Properties;public class CustomConsumer {    private static Map&lt;TopicPartition, Long&gt; currentOffset = new HashMap&lt;&gt;();    public static void main(String[] args) {        Properties props = new Properties();        props.put("bootstrap.servers", "localhost:9092");        props.put("group.id", "test");        // 关闭自动提交 offset        props.put("enable.auto.commit", "false");        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);        consumer.subscribe(                Arrays.asList("first"),                new ConsumerRebalanceListener() {                    //该方法会在 Rebalance 之前调用                    @Override                    public void                    onPartitionsRevoked(Collection&lt;TopicPartition&gt; partitions) {                        commitOffset(currentOffset);                    }                    //该方法会在 Rebalance 之后调用                    @Override                    public void onPartitionsAssigned(Collection&lt;TopicPartition&gt; partitions) {                        currentOffset.clear();                        for (TopicPartition partition : partitions) {                            // 定位到最近提交的 offset 位置继续消费                            consumer.seek(partition, getOffset(partition));                        }                    }                }        );        while (true) {            // 消费者拉取数据            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);            for (ConsumerRecord&lt;String, String&gt; record : records) {                System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());                currentOffset.put(new TopicPartition(record.topic(), record.partition()), record.offset());            }            commitOffset(currentOffset);        }    }    //获取某分区的最新 offset    private static long getOffset(TopicPartition partition) {        return 0;    }    //提交该消费者所有分区的 offset    private static void commitOffset(Map&lt;TopicPartition, Long&gt; currentOffset) {    }}</code></pre><h2 id="自定义-Interceptor"><a href="#自定义-Interceptor" class="headerlink" title="自定义 Interceptor"></a>自定义 Interceptor</h2><h3 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h3><p>Producer 拦截器(interceptor)是在 Kafka 0.10 版本被引入的，主要用于实现 clients 端的定制化控制逻辑。</p><p>对于 producer 而言，interceptor 使得用户在消息发送前以及 producer 回调逻辑前有机会对消息做一些定制化需求，比如修改消息等。</p><p>同时，producer 允许用户指定多个 interceptor 按序作用于同一条消息从而形成一个拦截链(interceptor chain)。</p><p>Intercetpor 的实现接口是 <strong>org.apache.kafka.clients.producer.ProducerInterceptor</strong>，其定义的方法包括:</p><ul><li><p><strong>configure(configs)</strong> </p><p>  获取配置信息和初始化数据时调用。</p></li><li><p><strong>onSend(ProducerRecord)</strong> </p><p>  该方法封装进 KafkaProducer.send 方法中，即它运行在用户主线程中。Producer 确保在消息被序列化以及计算分区前调用该方法。</p><p>  用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的 topic 和分区，否则会影响目标分区的计算。</p></li><li><p><strong>onAcknowledgement(RecordMetadata, Exception)</strong></p><p>  该方法会在消息从 RecordAccumulator 成功发送到 Kafka Broker 之后，或者在发送过程中失败时调用。并且通常都是在 producer 回调逻辑触发之前。</p><p>  onAcknowledgement 运行在 producer 的 IO 线程中，因此不要在该方法中放入很重的逻辑，否则会拖慢 producer 的消息发送效率。</p></li><li><p><strong>close()</strong></p><p>  关闭 interceptor，主要用于执行一些资源清理工作。</p><p>  如前所述，interceptor 可能被运行在多个线程中，因此在具体实现时用户需要自行确保线程安全。</p><p>  另外倘若指定了多个 interceptor，则 producer 将按照指定顺序调用它们，并仅仅是捕获每个 interceptor 可能抛出的异常记录到错误日志中而非在向上传递。</p></li></ul><h3 id="拦截器案例"><a href="#拦截器案例" class="headerlink" title="拦截器案例"></a>拦截器案例</h3><ol><li><p>需求<br> 实现一个简单的双 interceptor 组成的拦截链。</p><p> 第一个 interceptor 会在消息发送前将时间 戳信息加到消息 value 的最前部；<br> 第二个 interceptor 会在消息发送后更新成功发送消息数或 失败发送消息数。</p><p> <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-16.jpg" alt="Kafka拦截器"></p></li><li><p>案例实操</p><ul><li><p>增加时间戳拦截器</p><pre><code>   package com.philcode.kafka.interceptor;   import org.apache.kafka.clients.producer.ProducerInterceptor;   import org.apache.kafka.clients.producer.ProducerRecord;   import org.apache.kafka.clients.producer.RecordMetadata;   import java.util.Map;   public class TimeInterceptor implements ProducerInterceptor&lt;String, String&gt; {       @Override       public void configure(Map&lt;String, ?&gt; configs) {       }       @Override       public ProducerRecord&lt;String, String&gt; onSend(ProducerRecord&lt;String, String&gt; record) {           // 创建一个新的 record，把时间戳写入消息体的最前部           return new ProducerRecord(               record.topic(),                record.partition(),                record.timestamp(),                record.key(),               System.currentTimeMillis() + "," + record.value()           );       }       @Override       public void onAcknowledgement(RecordMetadata metadata, Exception exception) {       }       @Override       public void close() {       }   }</code></pre></li><li><p>统计发送消息成功和发送失败消息数，并在 producer 关闭时打印这两个计数器</p><pre><code>   package com.philcode.kafka.interceptor;   import org.apache.kafka.clients.producer.ProducerInterceptor;   import org.apache.kafka.clients.producer.ProducerRecord;   import org.apache.kafka.clients.producer.RecordMetadata;   import java.util.Map;   public class CounterInterceptor implements ProducerInterceptor&lt;String, String&gt; {       private int errorCounter = 0;       private int successCounter = 0;       @Override       public void configure(Map&lt;String, ?&gt; configs) {       }       @Override       public ProducerRecord&lt;String, String&gt; onSend(ProducerRecord&lt;String, String&gt; record) {           return record;       }       @Override       public void onAcknowledgement(RecordMetadata metadata, Exception exception) {           // 统计成功和失败的次数           if (exception == null) {               successCounter++;           } else {               errorCounter++;           }       }       @Override       public void close() {           // 保存结果           System.out.println("Successful sent: " + successCounter);           System.out.println("Failed sent: " + errorCounter);       }   }</code></pre></li><li><p>producer 主程序</p><pre><code>   package com.philcode.kafka.interceptor;   import org.apache.kafka.clients.producer.KafkaProducer;   import org.apache.kafka.clients.producer.Producer;   import org.apache.kafka.clients.producer.ProducerConfig;   import org.apache.kafka.clients.producer.ProducerRecord;   import java.util.ArrayList;   import java.util.List;   import java.util.Properties;   public class InterceptorProducer {       public static void main(String[] args) {           // 1 设置配置信息           Properties props = new Properties();           props.put("bootstrap.servers", "localhost:9092");           props.put("acks", "all");           props.put("retries", 3);           props.put("batch.size", 16384);           props.put("linger.ms", 1);           props.put("buffer.memory", 33554432);           props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");           props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");           // 2 构建拦截链           List&lt;String&gt; interceptors = new ArrayList&lt;&gt;();           interceptors.add("com.atguigu.kafka.interceptor.TimeInterce ptor");           interceptors.add("com.atguigu.kafka.interceptor.CounterInterceptor");           props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);           Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);           // 3 发送消息           String topic = "first";           for (int i = 0; i &lt; 10; i++) {               ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt; (topic, "message" + i);               producer.send(record);           }           // 4 一定要关闭 producer，这样才会调用 interceptor 的 close 方法           producer.close();       }   }</code></pre></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka 架构原理</title>
      <link href="/articles/kafka/jia-gou-yuan-li.html"/>
      <url>/articles/kafka/jia-gou-yuan-li.html</url>
      
        <content type="html"><![CDATA[<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-05.jpg" alt=""></p><p>Kafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，都是面向 topic 的。</p><p>topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 producer 生产的数据。</p><p>Producer 生产的数据会被不断追加到该 log 文件末端，且每条数据都有自己的 offset。</p><p>消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费。</p><h2 id="文件存储机制"><a href="#文件存储机制" class="headerlink" title="文件存储机制"></a>文件存储机制</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-06.jpg" alt=""></p><p>由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位效率低下，Kafka 采取了<font color="red">分片</font>和<font color="red">索引</font>机制，将每个 partition 分为多个 segment。</p><p>每个 segment 对应两个文件——“.index”文件和“.log”文件，这些文件位于一个文件夹下，该文件夹的命名规则为：topic 名称+分区序号。</p><p>例如，first 这个 topic 有三个分区，则其对应的文件夹为 first- 0,first-1,first-2。</p><pre><code>00000000000000000000.index00000000000000000000.log00000000000000170410.index00000000000000170410.log00000000000000239430.index00000000000000239430.log</code></pre><p>index 和 log 文件以当前 segment 的第一条消息的 offset 命名。下图为 index 文件和 log 文件的结构示意图。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-07.jpg" alt=""></p><p><font color="red">“.index”文件存储大量的索引信息，“.log”文件存储大量的数据，</font>索引文件中的元数据指向对应数据文件中 message 的物理偏移地址。</p><h2 id="Kafka-生产者"><a href="#Kafka-生产者" class="headerlink" title="Kafka 生产者"></a>Kafka 生产者</h2><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><ul><li><p>分区的原因</p><ul><li>方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了; </li><li>可以提高并发，因为可以以 Partition 为单位读写了。</li></ul></li><li><p>分区的原则</p><p>需要将 producer 发送的数据封装成一个 ProducerRecord 对象。</p><ul><li>指明 partition 的情况下，直接将指明的值直接作为 partiton 值;</li><li>没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值;</li><li>既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数(后面每次调用在这个整数上自增)，将这个值与 topic 可用的 partition 总数取余得到 partition 值，也就是常说的 round-robin 算法。</li></ul></li></ul><h3 id="数据可靠性保证"><a href="#数据可靠性保证" class="headerlink" title="数据可靠性保证"></a>数据可靠性保证</h3><p>为保证 producer 发送的数据，能可靠的发送到指定的 topic，topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 ack(acknowledgement 确认收到)，如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-08.jpg" alt=""></p><ul><li><p>副本数据同步策略</p><table><thead><tr><th align="left">方案</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">半数以上完成同步，就发 送 ack</td><td align="left">延迟低</td><td align="left">选举新的 leader 时，容忍 n 台 节点的故障，需要 2n+1 个副 本</td></tr><tr><td align="left">全部完成同步，才发送 ack</td><td align="left">选举新的 leader 时，容忍 n 台 节点的故障，需要 n+1 个副 本</td><td align="left">延迟高</td></tr></tbody></table><p>Kafka 选择了第二种方案，原因如下:</p><ul><li>同样为了容忍 n 台节点的故障，第一种方案需要 2n+1 个副本，而第二种方案只需要 n+1 个副本，而 Kafka 的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。 </li><li>虽然第二种方案的网络延迟会比较高，但网络延迟对 Kafka 的影响较小。</li></ul></li><li><p>ISR</p></li></ul><p>采用第二种方案之后，设想以下情景：leader 收到数据，所有 follower 都开始同步数据，但有一个 follower，因为某种故障，迟迟不能与 leader 进行同步，那 leader 就要一直等下去，直到它完成同步，才能发送 ack。这个问题怎么解决呢?</p><p>Leader 维护了一个动态的 in-sync replica set (ISR)，意为和 leader 保持同步的 follower 集合。当 ISR 中的 follower 完成数据的同步之后，leader 就会给 follower 发送 ack。如果 follower 长时间未向 leader 同步数据，则该 follower 将被踢出 ISR，该时间阈值由 <strong>replica.lag.time.max.ms</strong> 参数设定。Leader 发生故障之后，就会从 ISR 中选举新的 leader。</p><ul><li>ack 应答机制</li></ul><p>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失， 所以没必要等 ISR 中的 follower 全部接收成功。</p><p>所以 Kafka 为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡， 选择以下的配置。</p><p><strong>acks 参数配置:</strong></p><ul><li><p><strong>acks=0</strong>：producer 不等待 broker 的 ack，这一操作提供了一个最低的延迟，broker 一接收到还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据;</p></li><li><p><strong>acks=1</strong>：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会丢失数据;<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-09.jpg" alt="acks=1 数据丢失案例"></p></li><li><p><strong>acks=-1（all）</strong>：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才返回 ack。但是如果在 follower 同步完成后，broker 发送 ack 之前，leader 发生故障，那么会造成数据重复。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-10.jpg" alt="acks=-1 数据重复案例"></p></li><li><p>故障处理细节</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-11.jpg" alt="Log文件中的HW和LEO"></p><p><strong>LEO:指的是每个副本最大的 offset;</strong></p><p><strong>HW:指的是消费者能见到的最大的 offset，ISR 队列中最小的 LEO。</strong></p><ul><li><p>follower 故障</p><p>follower 发生故障后会被临时踢出 ISR，待该 follower 恢复后，follower 会读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步。 等该 <font color="red">follower 的 LEO 大于等于该 Partition 的 HW</font>，即 follower 追上 leader 之后，就可以重新加入 ISR 了。</p></li><li><p>leader 故障</p><p>leader 发生故障之后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件<font color="red">高于 HW 的部分截掉</font>，然后从新的 leader 同步数据。</p><p><font color="red"><strong>注意:这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</strong></font></p></li></ul><h3 id="Exactly-Once-语义"><a href="#Exactly-Once-语义" class="headerlink" title="Exactly Once 语义"></a>Exactly Once 语义</h3><p>将服务器的 ACK 级别设置为-1，可以保证 Producer 到 Server 之间不会丢失数据，即 At Least Once 语义。</p><p>将服务器 ACK 级别设置为 0，可以保证生产者每条消息只会被 发送一次，即 At Most Once 语义。</p><p>At Least Once 可以保证数据不丢失，但是不能保证数据不重复；At Least Once 可以保证数据不重复，但是不能保证数据不丢失。</p><p>但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义。</p><p>在 0.11 版 本以前的 Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。0.11 版本的 Kafka，引入了一项重大特性：幂等性。所谓的幂等性就是指 Producer 不论 向 Server 发送多少次重复数据，Server 端都只会持久化一条。幂等性结合 At Least Once 语义，就构成了 Kafka 的 Exactly Once 语义。即：At Least Once + 幂等性 = Exactly Once</p><p>要启用幂等性，只需要将 Producer 的参数中 <strong>enable.idompotence</strong> 设置为 true 即可。Kafka 的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的 Producer 在初始化的时候会被分配一个 PID，发往同一 Partition 的消息会附带 Sequence Number。而 Broker 端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker 只会持久化一条。但是 PID 重启就会变化，同时不同的 Partition 也具有不同主键，所以幂等性无法保证跨分区跨会话的 Exactly Once。</p><h2 id="Kafka-消费者"><a href="#Kafka-消费者" class="headerlink" title="Kafka 消费者"></a>Kafka 消费者</h2><h3 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h3><p>consumer 采用 pull(拉)模式从 broker 中读取数据。</p><p>push(推)模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息。</p><p>pull 模式不足之处是，如果 kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。</p><h3 id="分区分配策略"><a href="#分区分配策略" class="headerlink" title="分区分配策略"></a>分区分配策略</h3><p>一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定那个 partition 由哪个 consumer 来消费。</p><p>Kafka 有两种分配策略:</p><ul><li><p><strong>Range</strong> 范围分区</p><p>Range 范围分区策略是对每个 topic 而言的。</p><p>首先对同一个 topic 里面的分区按照序号进行排序，并对消费者按照字母顺序进行排序。</p><p>假如现在有 10 个分区，3 个消费者，排序后的分区将会是0,1,2,3,4,5,6,7,8,9；消费者排序完之后将会是C1-0, C2-0, C3-0。通过 <font color="red">partitions数/consumer数</font> 来决定每个消费者应该消费几个分区。如果除不尽，那么前面几个消费者将会多消费 1 个分区。</p><p>例如，10/3 = 3 余 1，除不尽，那么消费者 C1-0 便会多消费 1 个分区，最终分区分配结果如下：</p><table><thead><tr><th align="left">消费者</th><th align="left">消费分区情况</th></tr></thead><tbody><tr><td align="left">C1-0</td><td align="left">消费 0,1,2,3 分区</td></tr><tr><td align="left">C2-0</td><td align="left">消费 4,5,6 分区</td></tr><tr><td align="left">C3-0</td><td align="left">消费 7,8,9 分区(如果有11 个分区的话，C1-0 将消费 0,1,2,3 分区，C2-0 将消费 4,5,6,7分区，C3-0 将消费 8,9,10 分区)</td></tr></tbody></table><p><strong>Range 范围分区的弊端：</strong></p><p>如上，只是针对 1 个 topic 而言，C1-0消费者多消费1个分区影响不是很大。如果有 N 多个 topic，那么针对每个 topic，消费者 C1-0 都将多消费 1 个分区，topic越多，C1-0 消费的分区会比其他消费者明显多消费 N 个分区。这就是 Range 范围分区的一个很明显的弊端了</p></li><li><p><strong>RoundRobin</strong> 轮询分区</p><p>RoundRobin 轮询分区策略，是把所有的 partition 和所有的 consumer 都列出来，然后按照 hascode 进行排序，最后通过轮询算法来分配 partition 给到各个消费者。</p><p>轮询分区分为如下两种情况：</p><p>① 如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。</p><p>例如：同一消费者组中，有 3 个消费者C0、C1和C2，都订阅了 2 个主题 t0  和 t1，并且每个主题都有 3 个分区(p0、p1、p2)，那么所订阅的所以分区可以标识为t0p0、t0p1、t0p2、t1p0、t1p1、t1p2。最终分区分配结果如下：</p><table><thead><tr><th align="left">消费者</th><th align="left">消费分区情况</th></tr></thead><tbody><tr><td align="left">消费者C0</td><td align="left">消费 t0p0 、t1p0 分区</td></tr><tr><td align="left">消费者C1</td><td align="left">消费 t0p1 、t1p1 分区</td></tr><tr><td align="left">消费者C2</td><td align="left">消费 t0p2 、t1p2 分区</td></tr></tbody></table><p>② 如果同一消费者组内，所订阅的消息是不相同的，那么在执行分区分配的时候，就不是完全的轮询分配，有可能会导致分区分配的不均匀。如果某个消费者没有订阅消费组内的某个 topic，那么在分配分区的时候，此消费者将不会分配到这个 topic 的任何分区。</p><p>例如：同一消费者组中，有3个消费者C0、C1和C2，他们共订阅了 3 个主题：t0、t1 和 t2，这 3 个主题分别有 1、2、3 个分区(即:t0有1个分区(p0)，t1有2个分区(p0、p1)，t2有3个分区(p0、p1、p2))，即整个消费者所订阅的所有分区可以标识为 t0p0、t1p0、t1p1、t2p0、t2p1、t2p2。具体而言，消费者C0订阅的是主题t0，消费者C1订阅的是主题t0和t1，消费者C2订阅的是主题t0、t1和t2，最终分区分配结果如下：</p><table><thead><tr><th align="left">消费者</th><th align="left">消费分区情况</th></tr></thead><tbody><tr><td align="left">消费者C0</td><td align="left">消费 t0p0 分区</td></tr><tr><td align="left">消费者C1</td><td align="left">t1p0 分区</td></tr><tr><td align="left">消费者C2</td><td align="left">消费 t1p1、t2p0、t2p1、t2p2 分区</td></tr></tbody></table><p><strong>RoundRobin轮询分区的弊端：</strong></p><p>从如上实例，可以看到RoundRobin策略也并不是时分完美，这样分配其实并不是最优解，因为完全可以将分区 t1p1 分配给消费者 C1。</p><p>所以，如果想要使用RoundRobin 轮询分区策略，必须满足如下两个条件：</p><p>① 每个消费者订阅的主题，必须是相同的</p><p>② 每个主题的消费者实例都是相同的。(即：上面的第一种情况，才优先使用 RoundRobin 轮询分区策略)</p></li></ul><p><strong>什么时候触发分区分配策略</strong></p><p>当出现以下几种情况时，Kafka 会进行一次分区分配操作，<font color="red">即 Kafka 消费者端的 Rebalance 操作</font></p><ul><li><p>同一个 consumer 消费者组 group.id 中，新增了消费者进来，会执行 Rebalance 操作</p></li><li><p>消费者离开当期所属的 consumer group组。比如 <font color="red">主动停机</font> 或者 <font color="red">宕机</font></p></li><li><p>分区数量发生变化时(即 topic 的分区数量发生变化时)</p></li><li><p>消费者主动取消订阅</p><p>Kafka 消费端的 Rebalance 机制，规定了一个 Consumer group 下的所有 consumer 如何达成一致来分配订阅 topic 的每一个分区。而具体如何执行分区策略，就是上面提到的 Range 范围分区 和 RoundRobin 轮询分区 两种内置的分区策略。</p></li></ul><h3 id="offset-的维护"><a href="#offset-的维护" class="headerlink" title="offset 的维护"></a>offset 的维护</h3><p>由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-12.jpg" alt=""></p><p><font color="red">Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始， consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为__consumer_offsets。</font></p><ul><li><p>修改配置文件</p><pre><code>consumer.properties exclude.internal.topics=false</code></pre></li><li><p>读取 offset</p><pre><code>$ bin/kafka-console-consumer.sh   --topic __consumer_offsets   -- zookeeper localhost:2181   --formatter "kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageForm atter"   --consumer.config config/consumer.properties   --from- beginning</code></pre></li></ul><h2 id="高效读写数据"><a href="#高效读写数据" class="headerlink" title="高效读写数据"></a>高效读写数据</h2><ul><li><p><strong>顺序写磁盘</strong></p><p>Kafka 的 producer 生产数据，要写入到 log 文件中，写的过程是一直追加到文件末端，为顺序写。</p><p>官网有数据表明，同样的磁盘，顺序写能到 600M/s，而随机写只有 100K/s。</p><p>这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。</p></li><li><p><strong>零复制技术</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-13.jpg" alt="零拷贝"></p><h2 id="Zookeeper-在-Kafka-中的作用"><a href="#Zookeeper-在-Kafka-中的作用" class="headerlink" title="Zookeeper 在 Kafka 中的作用"></a>Zookeeper 在 Kafka 中的作用</h2><p>Kafka 集群中有一个 broker 会被选举为 Controller，负责管理集群 broker 的上下线，所有 topic 的分区副本分配和 leader 选举等工作。</p><p>Controller 的管理工作都是依赖于 Zookeeper 的。 以下为 partition 的 leader 选举过程:</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-14.jpg" alt="Leader选举流程"></p><h2 id="Kafka-事务"><a href="#Kafka-事务" class="headerlink" title="Kafka 事务"></a>Kafka 事务</h2><p>Kafka 从 0.11 版本开始引入了事务支持。事务可以保证 Kafka 在 Exactly Once 语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</p><h3 id="Producer-事务"><a href="#Producer-事务" class="headerlink" title="Producer 事务"></a>Producer 事务</h3><p>为了实现跨分区跨会话的事务，需要引入一个全局唯一的 Transaction ID，并将 Producer 获得的 PID 和 Transaction ID 绑定。这样当 Producer 重启后就可以通过正在进行的 Transaction ID 获得原来的 PID。</p><p>为了管理 Transaction，Kafka 引入了一个新的组件 Transaction Coordinator。Producer 就是通过和 Transaction Coordinator 交互获得 Transaction ID 对应的任务状态。Transaction Coordinator 还负责将事务所有写入 Kafka 的一个内部 Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><h3 id="Consumer-事务"><a href="#Consumer-事务" class="headerlink" title="Consumer 事务"></a>Consumer 事务</h3><p>对于 Consumer 而言，事务的保证就会相对较弱，尤其时无法保证 Commit 的信息被精确消费。这是由于 Consumer 可以通过 offset 访问任意信息，而且不同的 Segment File 生命周期不同，同一事务的消息可能会出现重启后被删除的情况。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka 概述和入门</title>
      <link href="/articles/kafka/gai-shu-he-ru-men.html"/>
      <url>/articles/kafka/gai-shu-he-ru-men.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Kafka 是一个<font color="red">分布式</font>的基于<font color="red">发布/订阅模式</font>的<font color="red">消息队列(Message Queue)</font>，主要应用于大数据实时处理领域。</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="传统消息队列的应用场景"><a href="#传统消息队列的应用场景" class="headerlink" title="传统消息队列的应用场景"></a>传统消息队列的应用场景</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-01.jpg" alt=""></p><p><strong>使用消息队列的好处</strong></p><ul><li><p>解耦 </p><p>  允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p></li><li><p>可恢复性</p><p>  系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p></li><li><p>缓冲</p><p>  有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致 的情况。</p></li><li><p>灵活性 &amp; 峰值处理能力</p><p>  在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。</p><p>  如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。</p><p>  使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p></li><li><p>异步通信</p><p>  消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。</p><p>  想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p></li></ul><h3 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h3><ul><li><p><strong>点对点模式</strong> (一对一，消费者主动拉取数据，消息收到后消息清除)</p><p>  消息生产者生产消息发送到 Queue 中，然后消息消费者从 Queue 中取出并且消费消息。</p><p>  消息被消费以后，queue 中不再有存储，所以消息消费者不可能消费到已经被消费的消息。</p><p>  Queue 支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-02.jpg" alt=""></p></li><li><p><strong>发布/订阅模式</strong> (一对多，消费者消费数据之后不会清除消息)</p><p>  消息生产者(发布)将消息发布到 topic 中，同时有多个消息消费者(订阅)消费该消息。</p><p>  和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。</p><p>  <img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-03.jpg" alt=""></p></li></ul><h2 id="Kafka-基础架构"><a href="#Kafka-基础架构" class="headerlink" title="Kafka 基础架构"></a>Kafka 基础架构</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/kafka-04.jpg" alt=""></p><ul><li><p><strong>Producer</strong> 消息生产者，向 kafka broker 发消息的客户端。</p></li><li><p><strong>Consumer</strong> 消息消费者，向 kafka broker 取消息的客户端。</p></li><li><p><strong>Consumer Group (CG)</strong> 消费者组，由多个 consumer 组成。</p><p>  消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费。</p><p>  消费者组之间互不影响。</p><p>  所有的消费者都属于某个消费者组，即<font color="red">消费者组是逻辑上的一个订阅者。</font></p></li><li><p><strong>Broker</strong> 一台 kafka 服务器就是一个 broker。</p><p>  一个集群由多个 broker 组成，一个 broker 可以容纳多个 topic。</p></li><li><p><strong>Topic</strong> 可以理解为一个队列，<font color="red">生产者和消费者面向的都是一个 topic。</font></p></li><li><p><strong>Partition</strong> 为了实现扩展性，一个非常大的 topic 可以分布到多个 broker(即服务器)上，<font color="red">一个 topic 可以分为多个 partition</font>，每个 partition 是一个有序的队列。</p></li><li><p><strong>Replica</strong> 副本。</p><p>  为保证集群中的某个节点发生故障时，<font color="red">该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作</font>，kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本， 一个 leader 和若干个 follower。</p></li><li><p><strong>leader</strong> 每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 leader。</p></li><li><p><strong>follower</strong> 每个分区多个副本中的“从”，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 会成为新的 follower。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka 安装配置和常用命令</title>
      <link href="/articles/kafka/an-zhuang-pei-zhi-he-chang-yong-ming-ling.html"/>
      <url>/articles/kafka/an-zhuang-pei-zhi-he-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Kafka 版本：2.3.1</p></blockquote><h2 id="Homebrew安装Kafka"><a href="#Homebrew安装Kafka" class="headerlink" title="Homebrew安装Kafka"></a>Homebrew安装Kafka</h2><blockquote><p>安装 kafka 过程中会自动的安装好 zookeeper</p></blockquote><pre><code>$ brew info kafka$ brew install kafka$ cd /usr/local/Cellar/kafka/2.3.1/libexec</code></pre><h2 id="卸载-Kafka"><a href="#卸载-Kafka" class="headerlink" title="卸载 Kafka"></a>卸载 Kafka</h2><pre><code>$ brew uninstall kafka</code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><blockquote><p>配置文件路径：/usr/local/etc/kafka</p></blockquote><h3 id="server-properties"><a href="#server-properties" class="headerlink" title="server.properties"></a>server.properties</h3><pre><code># the address the socket server listens onlisteners=PLAINTEXT://localhost:9092# broker 的全局唯一编号，不能重复 broker.id=0# 删除 topic 功能delete.topic.enable=true# 处理网络请求的线程数量num.network.threads=3# 用来处理磁盘 IO 的现成数量num.io.threads=8 # 发送套接字的缓冲区大小 socket.send.buffer.bytes=102400# 接收套接字的缓冲区大小socket.receive.buffer.bytes=102400 # 请求套接字的缓冲区大小socket.request.max.bytes=104857600 # kafka 运行日志存放的路径 log.dirs=/usr/local/Cellar/kafka/2.3.1/libexec/logs# topic 在当前 broker 上的分区个数num.partitions=1# 用来恢复和清理 data 下数据的线程数量num.recovery.threads.per.data.dir=1 # segment 文件保留的最长时间，超时将被删除 log.retention.hours=168# zookeeper connection stringzookeeper.connect=localhost:2181# Timeout in ms for connecting to zookeeperzookeeper.connection.timeout.ms=6000</code></pre><h3 id="zookeeper-properties"><a href="#zookeeper-properties" class="headerlink" title="zookeeper.properties"></a>zookeeper.properties</h3><blockquote><p>启动 kafka 时，需要先启动 zookeeper 服务<br>可以启动 kafka 自带的 zookeeper，也可以启动外置的 zookeeper 服务</p></blockquote><pre><code># the directory where the snapshot is stored.dataDir=/usr/local/var/lib/zookeeper# the port at which the clients will connectclientPort=2181</code></pre><h2 id="启动和关闭服务"><a href="#启动和关闭服务" class="headerlink" title="启动和关闭服务"></a>启动和关闭服务</h2><ul><li><p>启动服务</p><p>如果想以服务的方式启动，那么可以:</p><pre><code># 先安装 zookeeper（brew install zookeeper）$ brew services start zookeeper$ brew services start kafka</code></pre><p>如果只是临时启动，那么可以:</p><pre><code>$ bin/zookeeper-server-start.sh config/zookeeper.properties$ bin/kafka-server-start.sh config/server.properties$ jps -ml</code></pre></li><li><p>关闭服务</p><pre><code>$ bin/kafka-server-stop.sh stop$ bin/zookeeper-server-stop.sh stop$ jps -ml</code></pre></li></ul><h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><ul><li><p>创建<code>topic</code></p><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称##   --replication-factor 定义副本数##   --partitions 定义分区数$ bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic test_topic --replication-factor 1 --partitions 3</code></pre></li><li><p>删除<code>topic</code></p><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称$ bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic test_topic</code></pre></li><li><p>发送消息</p><pre><code>## 选项说明:##   --broker-list kafka 服务连接的节点，支持多节点##   --topic 定义 topic 名称$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test_topic</code></pre></li><li><p>消费消息</p><pre><code>## 选项说明:##   --bootstrap-server kafka 服务连接的节点，支持多节点##   --from-beginning  标识从头消费（offset=1）##   --topic 定义 topic 名称$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic test_topic</code></pre></li><li><p>查看某个 <code>Topic</code> 的详情</p><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称$ bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic test_topic</code></pre></li><li><p>查看某个 <code>Topic</code> 的 <code>consumer_offsets</code> 详情 </p><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic __consumer_offsets</code></pre></li><li><p>验证消息生产成功</p><pre><code>## 选项说明:##   --broker-list kafka 服务连接的节点，支持多节点##   --topic 定义 topic 名称##   --time -1表示显示获取当前offset最大值，-2表示offset的最小值$ bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic test_topic --time -1</code></pre></li><li><p>创建一个console consumer group</p><pre><code>## 选项说明:##   --bootstrap-server kafka 服务连接的节点，支持多节点##   --from-beginning  标识从头消费（offset=1）##   --topic 定义 topic 名称##   --group 定义消费组名称$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --from-beginning --group new-consumer</code></pre></li><li><p>获取该consumer group的group id</p><pre><code>## 选项说明:##   --bootstrap-server kafka 服务连接的节点，支持多节点##   --list 显示消费组列表$ bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper API 应用实战</title>
      <link href="/articles/zookeeper/api-ying-yong-shi-zhan.html"/>
      <url>/articles/zookeeper/api-ying-yong-shi-zhan.html</url>
      
        <content type="html"><![CDATA[<h2 id="API-应用实战"><a href="#API-应用实战" class="headerlink" title="API 应用实战"></a>API 应用实战</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>创建一个Maven工程</p></li><li><p>添加pom文件</p><pre><code> &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;junit&lt;/groupId&gt;             &lt;artifactId&gt;junit&lt;/artifactId&gt;             &lt;version&gt;RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;             &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;             &lt;version&gt;2.8.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;             &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;             &lt;version&gt;3.4.14&lt;/version&gt;         &lt;/dependency&gt; &lt;/dependencies&gt;</code></pre></li><li><p>拷贝log4j.properties文件到项目根目录</p><p> 需要在项目的src/main/resources目录下，新建一个文件，命名为“log4j.properties”，在文件中填入。</p><pre><code> log4j.rootLogger=INFO, stdout   log4j.appender.stdout=org.apache.log4j.ConsoleAppender   log4j.appender.stdout.layout=org.apache.log4j.PatternLayout   log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n   log4j.appender.logfile=org.apache.log4j.FileAppender   log4j.appender.logfile.File=target/spring.log   log4j.appender.logfile.layout=org.apache.log4j.PatternLayout   log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</code></pre></li></ol><h3 id="创建ZooKeeper客户端"><a href="#创建ZooKeeper客户端" class="headerlink" title="创建ZooKeeper客户端"></a>创建ZooKeeper客户端</h3><pre><code>private static String connectString = "localhost:2181";private static int sessionTimeout = 2000;private ZooKeeper zkClient = null;@Beforepublic void init() throws Exception {    zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {        @Override        public void process(WatchedEvent event) {            // 收到事件通知后的回调函数（用户的业务逻辑）            System.out.println(event.getType() + "--" + event.getPath());            // 再次启动监听            try {                zkClient.getChildren("/", true);            } catch (Exception e) {                e.printStackTrace();            }        }    });}</code></pre><h3 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h3><pre><code>@Testpublic void create() throws Exception {    // 参数1：要创建的节点的路径； 参数2：节点数据 ； 参数3：节点权限 ；参数4：节点的类型    String nodeCreated = zkClient.create("/sanguo", "jinlian".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);}</code></pre><h3 id="获取子节点并监听节点变化"><a href="#获取子节点并监听节点变化" class="headerlink" title="获取子节点并监听节点变化"></a>获取子节点并监听节点变化</h3><pre><code>@Testpublic void getChildren() throws Exception {    List&lt;String&gt; children = zkClient.getChildren("/", true);    for (String child : children) {        System.out.println(child);    }    // 延时阻塞    Thread.sleep(Long.MAX_VALUE);}</code></pre><h3 id="判断Znode是否存在"><a href="#判断Znode是否存在" class="headerlink" title="判断Znode是否存在"></a>判断Znode是否存在</h3><pre><code>@Testpublic void exist() throws Exception {    Stat stat = zkClient.exists("/eclipse", false);    System.out.println(stat == null ? "not exist" : "exist");}</code></pre><h2 id="案例：集群服务器动态上下线"><a href="#案例：集群服务器动态上下线" class="headerlink" title="案例：集群服务器动态上下线"></a>案例：集群服务器动态上下线</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-07.jpg" alt=""></p><h3 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h3><ul><li><p>先在集群上创建/servers节点</p><pre><code>  [zk: localhost:2181(CONNECTED) 20] create /servers "servers"  Created /servers</code></pre></li><li><p>服务器端向Zookeeper注册代码</p><pre><code>  package com.philcode.zkcase;  import java.io.IOException;  import org.apache.zookeeper.CreateMode;  import org.apache.zookeeper.WatchedEvent;  import org.apache.zookeeper.Watcher;  import org.apache.zookeeper.ZooKeeper;  import org.apache.zookeeper.ZooDefs.Ids;  public class DistributeServer {      private static String connectString = "localhost:2181";      private static int sessionTimeout = 2000;      private ZooKeeper zk = null;      private String parentNode = "/servers";      // 创建到zk的客户端连接      public void getConnect() throws IOException{          zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {              @Override              public void process(WatchedEvent event) {              }          });      }      // 注册服务器      public void registServer(String hostname) throws Exception{          String create = zk.create(parentNode + "/server", hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);          System.out.println(hostname +" is online "+ create);      }      // 业务功能      public void business(String hostname) throws Exception{          System.out.println(hostname+" is working ...");          Thread.sleep(Long.MAX_VALUE);      }      public static void main(String[] args) throws Exception {          // 1获取zk连接          DistributeServer server = new DistributeServer();          server.getConnect();          // 2 利用zk连接注册服务器信息          server.registServer(args[0]);          // 3 启动业务功能          server.business(args[0]);      }  }</code></pre></li><li><p>客户端向Zookeeper请求代码</p><pre><code>  package com.philcode.zkcase;  import java.io.IOException;  import java.util.ArrayList;  import java.util.List;  import org.apache.zookeeper.WatchedEvent;  import org.apache.zookeeper.Watcher;  import org.apache.zookeeper.ZooKeeper;  public class DistributeClient {      private static String connectString = "localhost:2181";      private static int sessionTimeout = 2000;      private ZooKeeper zk = null;      private String parentNode = "/servers";      // 创建到zk的客户端连接      public void getConnect() throws IOException {          zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {              @Override              public void process(WatchedEvent event) {                  // 再次启动监听                  try {                      getServerList();                  } catch (Exception e) {                      e.printStackTrace();                  }              }          });      }      // 获取服务器列表信息      public void getServerList() throws Exception {          // 1获取服务器子节点信息，并且对父节点进行监听          List&lt;String&gt; children = zk.getChildren(parentNode, true);          // 2存储服务器信息列表          ArrayList&lt;String&gt; servers = new ArrayList&lt;&gt;();          // 3遍历所有节点，获取节点中的主机名称信息          for (String child : children) {              byte[] data = zk.getData(parentNode + "/" + child, false, null);              servers.add(new String(data));          }          // 4打印服务器列表信息          System.out.println(servers);      }  }</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 客户端命令操作</title>
      <link href="/articles/zookeeper/ke-hu-duan-ming-ling-cao-zuo.html"/>
      <url>/articles/zookeeper/ke-hu-duan-ming-ling-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><table><thead><tr><th align="left">命令基本语法</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left">help</td><td align="left">显示所有操作命令</td></tr><tr><td align="left">ls path [watch]</td><td align="left">使用 ls 命令来查看当前znode中所包含的内容</td></tr><tr><td align="left">ls2 path [watch]</td><td align="left">查看当前节点数据并能看到更新次数等数据</td></tr><tr><td align="left">create</td><td align="left">普通创建 -s  含有序列；-e  临时（重启或者超时消失）</td></tr><tr><td align="left">get path [watch]</td><td align="left">获得节点的值</td></tr><tr><td align="left">set</td><td align="left">设置节点的具体值</td></tr><tr><td align="left">stat</td><td align="left">查看节点状态</td></tr><tr><td align="left">delete</td><td align="left">删除节点</td></tr><tr><td align="left">rmr</td><td align="left">递归删除节点</td></tr></tbody></table><h2 id="操作实战"><a href="#操作实战" class="headerlink" title="操作实战"></a>操作实战</h2><h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><pre><code>$ zkCliConnecting to localhost:2181Welcome to ZooKeeper!JLine support is enabledWATCHER::WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0]</code></pre><h3 id="显示所有操作命令"><a href="#显示所有操作命令" class="headerlink" title="显示所有操作命令"></a>显示所有操作命令</h3><pre><code>[zk: localhost:2181(CONNECTED) 0] helpZooKeeper -server host:port cmd args    stat path [watch]    set path data [version]    ls path [watch]    delquota [-n|-b] path    ls2 path [watch]    setAcl path acl    setquota -n|-b val path    history    redo cmdno    printwatches on|off    delete path [version]    sync path    listquota path    rmr path    get path [watch]    create [-s] [-e] path data acl    addauth scheme auth    quit    getAcl path    close    connect host:port</code></pre><h3 id="查看当前znode中所包含的内容"><a href="#查看当前znode中所包含的内容" class="headerlink" title="查看当前znode中所包含的内容"></a>查看当前znode中所包含的内容</h3><pre><code>[zk: localhost:2181(CONNECTED) 1] ls /[zookeeper]</code></pre><h3 id="查看当前节点详细数据"><a href="#查看当前节点详细数据" class="headerlink" title="查看当前节点详细数据"></a>查看当前节点详细数据</h3><pre><code>[zk: localhost:2181(CONNECTED) 2] ls2 /[zookeeper]cZxid = 0x0ctime = Thu Jan 01 08:00:00 CST 1970mZxid = 0x0mtime = Thu Jan 01 08:00:00 CST 1970pZxid = 0x0cversion = -1dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 0numChildren = 1</code></pre><h3 id="分别创建2个普通节点"><a href="#分别创建2个普通节点" class="headerlink" title="分别创建2个普通节点"></a>分别创建2个普通节点</h3><pre><code>[zk: localhost:2181(CONNECTED) 3] create /sanguo "jinlian"Created /sanguo[zk: localhost:2181(CONNECTED) 4] create /sanguo/shuguo "liubei"Created /sanguo/shuguo</code></pre><h3 id="获得节点的值"><a href="#获得节点的值" class="headerlink" title="获得节点的值"></a>获得节点的值</h3><pre><code>[zk: localhost:2181(CONNECTED) 5] get /sanguojinliancZxid = 0x4ctime = Fri Jan 10 05:05:38 CST 2020mZxid = 0x4mtime = Fri Jan 10 05:05:38 CST 2020pZxid = 0x5cversion = 1dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 7numChildren = 1</code></pre><h3 id="创建短暂节点"><a href="#创建短暂节点" class="headerlink" title="创建短暂节点"></a>创建短暂节点</h3><blockquote><p>退出当前客户端，会自动删除短暂（临时）节点</p></blockquote><pre><code>[zk: localhost:2181(CONNECTED) 6] create -e /sanguo/wuguo "zhouyu"Created /sanguo/wuguo</code></pre><h3 id="创建带序号的节点"><a href="#创建带序号的节点" class="headerlink" title="创建带序号的节点"></a>创建带序号的节点</h3><blockquote><p>如果原来没有序号节点，序号从0开始依次递增。如果原节点下已有2个节点，则再排序时从2开始，以此类推。</p></blockquote><pre><code>[zk: localhost:2181(CONNECTED) 7] create /sanguo/weiguo "caocao"Created /sanguo/weiguo[zk: localhost:2181(CONNECTED) 8] create -s /sanguo/weiguo/xiaoqiao "jinlian"Created /sanguo/weiguo/xiaoqiao0000000000[zk: localhost:2181(CONNECTED) 9] create -s /sanguo/weiguo/xiaoqiao "jinlian"Created /sanguo/weiguo/xiaoqiao0000000001[zk: localhost:2181(CONNECTED) 10] create -s /sanguo/weiguo/xiaoqiao "jinlian"Created /sanguo/weiguo/xiaoqiao0000000002</code></pre><h3 id="修改节点数据值"><a href="#修改节点数据值" class="headerlink" title="修改节点数据值"></a>修改节点数据值</h3><pre><code>[zk: localhost:2181(CONNECTED) 11] set /sanguo/weiguo "simayi"cZxid = 0x7ctime = Fri Jan 10 05:11:54 CST 2020mZxid = 0xbmtime = Fri Jan 10 05:13:42 CST 2020pZxid = 0xacversion = 3dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 6numChildren = 3</code></pre><h3 id="节点的值变化监听"><a href="#节点的值变化监听" class="headerlink" title="节点的值变化监听"></a>节点的值变化监听</h3><blockquote><p>每次只能监听到一次值的变化</p></blockquote><pre><code>[zk: localhost:2181(CONNECTED) 12] get /sanguo watchjinliancZxid = 0x4ctime = Fri Jan 10 05:05:38 CST 2020mZxid = 0x4mtime = Fri Jan 10 05:05:38 CST 2020pZxid = 0x7cversion = 3dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 7numChildren = 3</code></pre><p>打开一个新客户端，然后修改所监听 node（/sanguo） 的值</p><pre><code>[zk: localhost:2181(CONNECTED) 0] set /sanguo "xisi"cZxid = 0x4ctime = Fri Jan 31 11:05:38 CST 2020mZxid = 0xdmtime = Fri Jan 31 11:46:20 CST 2020pZxid = 0x7cversion = 3dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 4numChildren = 3</code></pre><p>观察收到数据变化的监听信息</p><pre><code>[zk: localhost:2181(CONNECTED) 13]WATCHER::WatchedEvent state:SyncConnected type:NodeDataChanged path:/sanguo</code></pre><h3 id="节点的子节点变化监听（路径变化）"><a href="#节点的子节点变化监听（路径变化）" class="headerlink" title="节点的子节点变化监听（路径变化）"></a>节点的子节点变化监听（路径变化）</h3><blockquote><p>每次只能监听到一次子节点的变化</p></blockquote><pre><code>[zk: localhost:2181(CONNECTED) 13] ls /sanguo watch[wuguo, shuguo, weiguo]</code></pre><p>打开一个新客户端，然后在所监听 node（/sanguo），创建子节点</p><pre><code>[zk: localhost:2181(CONNECTED) 1] create /sanguo/jin "simayi"Created /sanguo/jin</code></pre><p>观察收到子节点变化的监听信息</p><pre><code>[zk: localhost:2181(CONNECTED) 14]WATCHER::WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/sanguo</code></pre><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><blockquote><p>只能删除没有子节点的节点</p></blockquote><pre><code>[zk: localhost:2181(CONNECTED) 14] delete /sanguo/jin# 删除非空节点时，会报错[zk: localhost:2181(CONNECTED) 15] delete /sanguoNode not empty: /sanguo</code></pre><h3 id="递归删除节点"><a href="#递归删除节点" class="headerlink" title="递归删除节点"></a>递归删除节点</h3><pre><code>[zk: localhost:2181(CONNECTED) 16] ls /sanguo[wuguo, shuguo, weiguo][zk: localhost:2181(CONNECTED) 17] rmr /sanguo/shuguo[zk: localhost:2181(CONNECTED) 18] ls /sanguo[wuguo, weiguo]</code></pre><h3 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h3><pre><code>[zk: localhost:2181(CONNECTED) 19] stat /sanguocZxid = 0x4ctime = Fri Jan 10 05:05:38 CST 2020mZxid = 0xdmtime = Fri Jan 10 05:46:20 CST 2020pZxid = 0x10cversion = 6dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 4numChildren = 2</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 入门和内部原理</title>
      <link href="/articles/zookeeper/ru-men-he-nei-bu-yuan-li.html"/>
      <url>/articles/zookeeper/ru-men-he-nei-bu-yuan-li.html</url>
      
        <content type="html"><![CDATA[<p>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-01.jpg" alt=""></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-02.jpg" alt=""></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-03.jpg" alt=""></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。</p><h3 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-04.jpg" alt=""></p><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-05.jpg" alt=""></p><h3 id="统一集群管理"><a href="#统一集群管理" class="headerlink" title="统一集群管理"></a>统一集群管理</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-06.jpg" alt=""></p><h3 id="服务器节点动态上下线"><a href="#服务器节点动态上下线" class="headerlink" title="服务器节点动态上下线"></a>服务器节点动态上下线</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-07.jpg" alt=""></p><h3 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-08.jpg" alt=""></p><h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><ul><li><font color="red"><strong>半数机制</strong></font> 集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</li><li>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</li></ul><p>以一个简单的例子来说明整个选举的过程：</p><p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么，如图所示。<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-09.jpg" alt=""></p><ol><li>服务器1启动，此时只有它一台服务器启动了，它发出去的报文没有任何响应，所以它的选举状态一直是LOOKING状态。</li><li>服务器2启动，它与最开始启动的服务器1进行通信，互相交换自己的选举结果，由于两者都没有历史数据，所以id值较大的服务器2胜出，但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3)，所以服务器1、2还是继续保持LOOKING状态。</li><li>服务器3启动，根据前面的理论分析，服务器3成为服务器1、2、3中的老大，而与上面不同的是，此时有三台服务器选举了它，所以它成为了这次选举的Leader。</li><li>服务器4启动，根据前面的分析，理论上服务器4应该是服务器1、2、3、4中最大的，但是由于前面已经有半数以上的服务器选举了服务器3，所以它只能接收当小弟的命了。</li><li>服务器5启动，同4一样当小弟。</li></ol><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-10.jpg" alt=""></p><h3 id="Stat结构体"><a href="#Stat结构体" class="headerlink" title="Stat结构体"></a>Stat结构体</h3><p>查看当前节点详细数据</p><pre><code>[zk: localhost:2181(CONNECTED) 1] ls2 /[zookeeper]cZxid = 0x0ctime = Thu Jan 01 08:00:00 CST 1970mZxid = 0x0mtime = Thu Jan 01 08:00:00 CST 1970pZxid = 0x0cversion = -1dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 0numChildren = 1</code></pre><ul><li><p><strong>cZxid</strong> 创建节点的事务zxid</p><p>  每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。</p><p>  事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。</p></li><li><p><strong>ctime</strong> znode被创建的毫秒数(从1970年开始)</p></li><li><p><strong>mZxid</strong> znode最后更新的事务zxid</p></li><li><p><strong>mtime</strong> znode最后修改的毫秒数(从1970年开始)</p></li><li><p><strong>pZxid</strong> znode最后更新的子节点zxid</p></li><li><p><strong>cversion</strong> znode子节点变化号，znode子节点修改次数</p></li><li><p><strong>dataVersion</strong> znode数据变化号</p></li><li><p><strong>aclVersion</strong> znode访问控制列表的变化号</p></li><li><p><strong>ephemeralOwner</strong> 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。</p></li><li><p><strong>dataLength</strong> znode的数据长度</p></li><li><p><strong>numChildren</strong> znode子节点数量</p></li></ul><h3 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-11.jpg" alt=""></p><h3 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h3><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/zookeeper-12.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 安装和配置</title>
      <link href="/articles/zookeeper/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/zookeeper/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Zookeeper 版本：3.4.14</p></blockquote><h2 id="Homebrew安装Zookeeper"><a href="#Homebrew安装Zookeeper" class="headerlink" title="Homebrew安装Zookeeper"></a>Homebrew安装Zookeeper</h2><pre><code>$ brew info zookeeper$ brew install zookeeper$ cd /usr/local/Cellar/zookeeper/3.4.14/libexec</code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><blockquote><p>配置文件路径：/usr/local/etc/zookeeper/zoo.cfg</p></blockquote><pre><code># 通信心跳数，Zookeeper服务器与客户端心跳时间，单位毫秒# 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳# 用于心跳机制，并且设置最小的session超时时间为两倍心跳时间（session的最小超时时间是2*tickTime）tickTime=2000# LF初始通信时限# 集群中的Follower跟随者服务器与Leader领导者服务器之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限initLimit=10# LF同步通信时限# 集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除FollwersyncLimit=5# 数据文件目录+数据持久化路径# 主要用于保存Zookeeper中的数据dataDir=/usr/local/var/zookeeper/data# 监听客户端连接的端口clientPort=2181</code></pre><p>创建数据文件目录</p><pre><code>$ mkdir -p /usr/local/var/zookeeper/data</code></pre><h2 id="启动和关闭服务"><a href="#启动和关闭服务" class="headerlink" title="启动和关闭服务"></a>启动和关闭服务</h2><ul><li><p>启动 Zookeeper</p><pre><code>  $ zkServer start  ZooKeeper JMX enabled by default  Using config: /usr/local/etc/zookeeper/zoo.cfg  Starting zookeeper ... STARTED  # 查看进程是否启动  $ jps -ml  12456 org.apache.zookeeper.server.quorum.QuorumPeerMain /usr/local/etc/zookeeper/zoo.cfg</code></pre></li><li><p>查看状态</p><pre><code>  $ zkServer status  ZooKeeper JMX enabled by default  Using config: /usr/local/etc/zookeeper/zoo.cfg  Mode: standalone</code></pre></li><li><p>启动客户端</p><pre><code>  $ zkCli  Connecting to localhost:2181  Welcome to ZooKeeper!  JLine support is enabled  WATCHER::  WatchedEvent state:SyncConnected type:None path:null  [zk: localhost:2181(CONNECTED) 0]</code></pre></li><li><p>退出客户端</p><pre><code>  [zk: localhost:2181(CONNECTED) 0] quit  Quitting...</code></pre></li><li><p>停止Zookeeper</p><pre><code>  $ zkServer stop  ZooKeeper JMX enabled by default  Using config: /usr/local/etc/zookeeper/zoo.cfg  Stopping zookeeper ... STOPPED  # 查看进程是否存在  $ jps -ml</code></pre></li></ul><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><ol><li><p>集群规划</p><p> 在hadoop102、hadoop103和hadoop104三个节点上部署Zookeeper</p></li><li><p>解压安装</p><p> 在所有节点上安装好 Zookeeper。</p></li><li><p>配置zoo.cfg文件</p><pre><code> $ vi zoo.cfg dataDir=/opt/module/zookeeper/data server.2=hadoop102:2888:3888 server.3=hadoop103:2888:3888 server.4=hadoop104:2888:3888</code></pre><p> 配置参数解读：<strong>server.A=B:C:D</strong></p><ul><li>A是一个数字，表示这个是第几号服务器；<br>  集群模式下配置一个文件myid，这个文件在dataDir目录下，这个文件里面有一个数据就是A的值，Zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。</li><li>B是这个服务器的ip地址；</li><li>C是这个服务器与集群中的Leader服务器交换信息的端口；</li><li>D是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口。</li></ul></li><li><p>配置服务器编号</p><ul><li><p>创建好数据文件目录</p><pre><code>   $ mkdir -p /opt/module/zookeeper/data</code></pre></li><li><p>在数据文件目录下，创建一个myid的文件</p><pre><code>   $ touch myid</code></pre></li><li><p>编辑myid文件</p><pre><code> $ vi myid # 在文件中添加与server对应的编号： 2</code></pre></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 内存分析方法</title>
      <link href="/articles/redis/nei-cun-fen-xi-fang-fa.html"/>
      <url>/articles/redis/nei-cun-fen-xi-fang-fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用户要怎么才能知道线上 Redis 实例中数据的内存分布情况？</p><p>为了不影响线上实例的使用，一般会采用 bgsave 生成 <strong>dump.rdb</strong> 文件，再结合 <strong>redis-rdb-tools</strong> 和 <strong>sqlite</strong> 来进行静态分析。</p><h2 id="创建备份"><a href="#创建备份" class="headerlink" title="创建备份"></a>创建备份</h2><p>自建 Redis 服务可在客户端执行 bgsave 生成 <strong>dump.rdb</strong> 文件。</p><p>阿里云数据库Redis版可以在控制台上可以进行数据备份和下载的操作，下载后的数据为rdb格式文件。</p><p>步骤详见下图：<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/redis-01.jpg" alt="阿里云数据库Redis版控制台"></p><h2 id="生成内存快照"><a href="#生成内存快照" class="headerlink" title="生成内存快照"></a>生成内存快照</h2><p>redis-rdb-tools 是一个 python 的解析 rdb 文件工具, 主要有以下三个功能：</p><ul><li>生成内存快照</li><li>转储成json格式</li><li>使用标准的diff工具比较两个dump文件</li></ul><p>我们主要用到它的生成内存快照功能。</p><h3 id="redis-rdb-tools安装"><a href="#redis-rdb-tools安装" class="headerlink" title="redis-rdb-tools安装"></a>redis-rdb-tools安装</h3><p>redis-rdb-tools有两种安装方式，任选其一即可。</p><ul><li><p>使用 PYPI 安装</p><pre><code>  pip install rdbtools</code></pre></li><li><p>从源码安装</p><pre><code>  $ git clone https://github.com/sripathikrishnan/redis-rdb-tools  $ cd redis-rdb-tools  $ sudo python setup.py install</code></pre></li></ul><h3 id="使用redis-rdb-tools生成内存快照"><a href="#使用redis-rdb-tools生成内存快照" class="headerlink" title="使用redis-rdb-tools生成内存快照"></a>使用redis-rdb-tools生成内存快照</h3><p>生成内存快照的命令为：</p><pre><code>rdb -c memory dump.rdb &gt; memory.csv</code></pre><p>生成CSV格式的内存报告。包含的列有：数据库ID，数据类型，key，内存使用量(byte)，编码。内存使用量包含key、value和其他值。</p><p>注意：内存使用量是理论上的近似值，在一般情况下，略低于实际值。</p><p>memory.csv例子：</p><pre><code>$ head memory.csvdatabase,type,key,size_in_bytes,encoding,num_elements,len_largest_element0,string,"orderAt:377671748",96,string,8,80,string,"orderAt:413052773",96,string,8,80,sortedset,"Artical:Comments:7386",81740,skiplist,479,410,sortedset,"pay:id:18029",2443,ziplist,84,160,string,"orderAt:452389458",96,string,8,8</code></pre><h2 id="分析内存快照"><a href="#分析内存快照" class="headerlink" title="分析内存快照"></a>分析内存快照</h2><p>SQLite，是一款轻型的数据库。我们可以将前面生成的csv导入到数据库中之后，就可以利用sql语句很方便的对Redis的内存数据进行各种分析了。</p><p><strong>导入方法：</strong></p><pre><code>sqlite3 memory.dbsqlite&gt;create table memory(database int,type varchar(128),key varchar(128),size_in_bytes int,encoding varchar(128),num_elements int,len_largest_element varchar(128));sqlite&gt;.mode csv memorysqlite&gt;.import memory.csv memory</code></pre><p>数据导入以后，接下来想怎么分析就怎么分析了，举几个简单的例子：</p><ul><li><p><strong>查询key个数</strong></p><pre><code>  sqlite&gt;select count(*) from memory;</code></pre></li><li><p><strong>查询总的内存占用</strong></p><pre><code>  sqlite&gt;select sum(size_in_bytes) from memory;</code></pre></li><li><p><strong>查询内存占用最高的10个key</strong></p><pre><code>  sqlite&gt; select * from memory order by size_in_bytes desc limit 10;</code></pre></li><li><p><strong>查询成员个数1000个以上的list</strong></p><pre><code>  sqlite&gt;select * from memory where type='list' and num_elements &gt; 1000;</code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用redis-rdb-tools + sqlite的方式，可以方便的对redis实例的内存情况进行静态的分析。整个过程也比较简单，获取到rdb之后进行如下操作即可。</p><pre><code>rdb -c memory dump.rdb &gt; memory.csv;sqlite3 memory.dbsqlite&gt;create table memory(database int,type varchar(128),key varchar(128),size_in_bytes int,encoding varchar(128),num_elements int,len_largest_element varchar(128));sqlite&gt;.mode csv memorysqlite&gt;.import memory.csv memory</code></pre><p>总的来说，整个分析的过程简单而实用，是每一个Redis的用户都非常值得掌握的一个方法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> Cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull 简介和使用</title>
      <link href="/articles/git/pull-jian-jie-he-shi-yong.html"/>
      <url>/articles/git/pull-jian-jie-he-shi-yong.html</url>
      
        <content type="html"><![CDATA[<p><strong>git pull</strong> 命令的作用是取回远程主机某个分支的更新，再与本地的指定分支合并。</p><h2 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h2><pre><code>git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…]]</code></pre><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>将远程存储库中的更改合并到当前分支中。在默认模式下，<strong>git pull</strong> 是 <strong>git fetch + git merge FETCH_HEAD</strong> 的缩写。</p><p>更准确地说，<strong>git pull</strong> 使用给定的参数运行 <strong>git fetch</strong>，并调用 <strong>git merge</strong> 将检索到的分支头合并到当前分支中。 如果使用 <strong>git pull –rebase</strong>，它运行 <strong>git rebase</strong> 而不是 <strong>git merge</strong>。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li><p>基本格式</p><pre><code># 合并采用 merge 模式$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;# 合并采用 rebase 模式$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></pre></li><li><p>取回远程 origin 主机的 next 分支，与本地的 master 分支合并</p><pre><code>$ git pull origin next:master</code></pre></li><li><p>取回远程 origin 主机的 next 分支，与当前分支合并</p><pre><code>$ git pull origin next</code></pre><p>上面命令实质上，等同于先做 git fetch，再执行 git merge。</p><pre><code>$ git fetch origin$ git merge origin/next</code></pre></li><li><p>手动建立追踪关系</p><blockquote><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。</p><p>比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p></blockquote><pre><code># 指定 master 分支追踪 origin/next 分支$ git branch --set-upstream master origin/next</code></pre><p>如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。</p><pre><code># 本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并$ git pull origin</code></pre><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><pre><code>$ git pull</code></pre></li></ul><h2 id="git-fetch-和-git-pull-的区别"><a href="#git-fetch-和-git-pull-的区别" class="headerlink" title="git fetch 和 git pull 的区别"></a>git fetch 和 git pull 的区别</h2><p><strong>git fetch</strong> 相当于是从远程获取最新版本到本地，不会自动合并。</p><pre><code>$ git fetch origin master</code></pre><p>以上命令的含义，从远程 origin 的 master 分支下载最新的版本到 origin/master 分支上</p><p><strong>git pull</strong> 相当于是从远程获取最新版本，并 merge 到本地 </p><pre><code>$ git fetch origin master$ git log -p master..origin/master$ git merge origin/master</code></pre><p>以上命令的含义：</p><ul><li>从远程 origin 的 master 分支下载最新的版本到 origin/master 分支上</li><li>比较本地的 master 分支和 origin/master 分支的差别</li><li>最后进行合并</li></ul><p>上述过程其实可以用以下更清晰的方式来进行：</p><pre><code>$ git fetch origin master:tmp$ git diff tmp $ git merge tmp</code></pre><p>相比 <strong>git pull</strong> 来说，<strong>git fetch</strong> 更安全一些，因为在 <strong>merge</strong> 前，可以查看更新情况，然后再决定是否合并。</p><h2 id="git-pull-和-git-pull-–rebase-的区别"><a href="#git-pull-和-git-pull-–rebase-的区别" class="headerlink" title="git pull 和 git pull –rebase 的区别"></a>git pull 和 git pull –rebase 的区别</h2><p><strong><font color="red">git pull = git fetch + git merge</font></strong></p><p><strong><font color="red">git pull –rebase = git fetch + git rebase</font></strong></p><p>现在来看看 <strong>git merge</strong> 和 <strong>git rebase</strong> 的区别。</p><p>假设你现在基于远程分支”origin”，创建一个叫”mywork”的分支。</p><pre><code>$ git checkout -b mywork origin</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/git-rebase-01.png" alt=""></p><p>现在我们在这个分支做一些修改，然后生成两个提交(commit).</p><pre><code>$ vim file.txt$ git add file.txt$ git commit$ vim otherfile.txt$ git add otherfile.txt$ git commit...</code></pre><p>但是与此同时，有些人也在”origin”分支上做了一些修改并且做了提交了. 这就意味着”origin”和”mywork”这两个分支各自”前进”了，它们之间”分叉”了。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/git-rebase-02.png" alt=""></p><p>在这里，你可以用”pull”命令把”origin”分支上的修改拉下来并且和你的修改合并； 结果看起来就像一个新的”合并的提交”(merge commit):</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/git-rebase-03.png" alt=""></p><p>但是，如果你想让”mywork”分支历史看起来像没有经过任何合并一样，可以用 git rebase:</p><pre><code>$ git checkout mywork$ git rebase origin</code></pre><p>这些命令会把你的”mywork”分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到”.git/rebase”目录中)，然后把”mywork”分支更新到最新的”origin”分支，最后把保存的这些补丁应用到”mywork”分支上。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/git-rebase-04.png" alt=""></p><p>当”mywork”分支更新之后，它会指向这些新创建的提交(commit)，而那些老的提交会被丢弃。如果运行垃圾收集命令(pruning garbage collection)，这些被丢弃的提交就会删除. （请查看 git gc)</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/git-rebase-05.png" alt=""></p><p>现在我们可以看一下用 merge 和用 rebase 所产生的历史的区别：</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/git-rebase-06.png" alt=""></p><p>在rebase的过程中，也许会出现冲突(conflict)，在这种情况，Git 会停止rebase并会让你去解决冲突；在解决完冲突后，用 <strong>git add</strong> 命令去更新这些内容的索引(index), 然后无需执行 <strong>git commit</strong>，只要执行:</p><pre><code>$ git rebase --continue</code></pre><p>这样 Git 会继续应用(apply)余下的补丁。</p><p>在任何时候，你可以用–abort参数来终止rebase的行动，并且”mywork”分支会回到rebase开始前的状态。</p><pre><code>$ git rebase --abort</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lrzsz 安装和配置</title>
      <link href="/articles/macos/lrzsz-an-zhuang-he-pei-zhi.html"/>
      <url>/articles/macos/lrzsz-an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>MacOS 自带的命令终端不支持使用 rz 和 sz 命令进行文件上传和下载。<br>可以安装另一种终端 iTerm2，然后对 iTerm2 进行扩展安装 lrzsz，这样 Mac 就可以使用 rz 和 sz 命令进行文件传输了。</p></blockquote><h2 id="远程服务器安装"><a href="#远程服务器安装" class="headerlink" title="远程服务器安装"></a>远程服务器安装</h2><p>在 centOs下，可以用自带的包管理工具进行下载，命令如下:</p><pre><code>$ yum -y install lrzsz</code></pre><h2 id="本地-MacOS-安装和配置"><a href="#本地-MacOS-安装和配置" class="headerlink" title="本地 MacOS 安装和配置"></a>本地 MacOS 安装和配置</h2><ol><li>Homebrew 安装 lrzsz</li></ol><pre><code>$ brew install lrzsz</code></pre><ol start="2"><li>下载安装 iterm2 send、recv <blockquote><p><a href="https://pan.baidu.com/s/1IVr1wCeSw1NPMPlZRg9Q5w" target="_blank" rel="noopener">下载链接</a> (提取码: h467)</p></blockquote></li></ol><pre><code>$ cp iterm2-send-zmodem.sh /usr/local/bin$ cp iterm2-recv-zmodem.sh /usr/local/bin# 添加可执行权限$ chmode +x /usr/local/bin/iterm2-send-zmodem.sh$ chmode +x /usr/local/bin/iterm2-recv-zmodem.sh</code></pre><ol start="3"><li>设置 iterm2，按 command+, 组合键，打开 iTerm2设置界面，切换到 Profiles-&gt; Default -&gt; Advanced，点击“Edit”</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/lrzsz-01.png" alt=""></p><ol start="4"><li>在弹出的界面点 “+” 新增两项参数，完成后，点击“Close”关闭弹窗</li></ol><table><thead><tr><th align="left">Regular Expression</th><th align="left">Action</th><th align="left">Action</th></tr></thead><tbody><tr><td align="left">**B010</td><td align="left">Run Silent Coprocess</td><td align="left">/usr/local/bin/iterm2-send-zmodem.sh</td></tr><tr><td align="left">**B00000000000000</td><td align="left">Run Silent Coprocess</td><td align="left">/usr/local/bin/iterm2-recv-zmodem.sh</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/lrzsz-02.png" alt=""></p><ol start="5"><li>重启iterm2</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code># 链接远程linux（注意上传文件路径不能包含中文）$ rz # 上传文件$ sz # 下载文件</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> lrzsz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 应该定期更新</title>
      <link href="/articles/macos/homebrew-ding-qi-geng-xin.html"/>
      <url>/articles/macos/homebrew-ding-qi-geng-xin.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要定期更新"><a href="#为什么要定期更新" class="headerlink" title="为什么要定期更新"></a>为什么要定期更新</h2><p>不少人都不会经常更新，或者只在必须用某个工具的新版本的时候才更新。他们的看法是，更新有可能产生一些意外的问题，反正当前环境足够稳定可以用，干嘛自找麻烦呢？</p><p>这个看法对也不对。对是因为，更新产生的潜在问题不可避免。不对是因为总有一天你需要升级的，也许是为了某个工具的新特性，也许是为了修复软件的漏洞，也许你安装的包非要依赖另一个包的新版本，等等。如果隔了很长一段时间才升级，那潜在的小问题可能就会变成大问题。</p><p>另一个有意思的现象是，当碰到比较破坏性的事情，比如 Mac OS 大版本更新后，很多人会选择重装 Homebrew 然后顺带安装最新版的包。很少人会去装一个指定的旧版本（除了特殊项目需要）。这说明他们不是不想用新版本，而是不想痛苦地更新。</p><p>既然总有一天需要更新，而更新带来问题不可避免，那为什么不更新得频繁点呢？这个道理跟 Git 的冲突解决有相似性。长时间不 pull/push 的代码更容易产生冲突，一个解决方法就是频繁地 commit &amp; merge 。</p><p>我现在试着一个月更新一次，两次下来发现这些好处：</p><ul><li>每次更新的包很少，更新风险也小。</li><li>更容易发现不需要的包，便于清理，不为不需要的东西买单。</li><li>定期清理旧版本，释放空间。</li><li>更新流程其实都差不多，下面列一下我常用的命令。</li></ul><h2 id="更新-Homebrew"><a href="#更新-Homebrew" class="headerlink" title="更新 Homebrew"></a>更新 Homebrew</h2><p>要获取最新的包的列表，先用命令 <strong><font color="red">brew update</font></strong> 更新一下 Homebrew。</p><pre><code>$ brew update</code></pre><p>更新完后会显示可以更新的包列表，其中 <strong><font color="red">打钩的</font></strong> 是已经安装的包。输出类似下面这样：</p><pre><code>Updated 4 taps (homebrew/core, homebrew/cask, homebrew/services and caskroom/cask).==&gt; New Formulaeansible@2.8     bandwhich     cppman                faissapollo-cli      celero        dhall-lsp-server      findomain==&gt; Updated Formulaeelasticsearch ✔                 docker-credential-helper-ecr    iozonegradle ✔                        docker-squash                   ipfskafka ✔                         doctl                           ipoptmemcached ✔                     docutils                        isc-dhcpmysql@5.7 ✔                     doitlive                        islnode ✔                          dovecot                         istioctlpython ✔                        doxygen                         jdupes==&gt; Deleted Formulaeapel             aws-sns-cli      hg-flow          leafnode         node@8</code></pre><h2 id="更新包-formula"><a href="#更新包-formula" class="headerlink" title="更新包 (formula)"></a>更新包 (formula)</h2><p>更新之前，可以用 <strong><font color="red">brew outdated</font></strong> 查看一下哪些包可以更新。</p><pre><code>brew outdated</code></pre><p>然后，就可以用 <strong><font color="red">brew upgrade</font></strong> 去更新了。Homebrew 会安装新版本的包，但旧版本仍然会保留。</p><pre><code># 更新所有的包brew upgrade# 更新指定的包brew upgrade $FORMULA</code></pre><h2 id="清理旧版本"><a href="#清理旧版本" class="headerlink" title="清理旧版本"></a>清理旧版本</h2><p>一般情况下，新版本安装了，旧版本就不需要了。可以用 <strong><font color="red">brew cleanup</font></strong> 清理旧版本和缓存文件。Homebrew 只会清除比当前安装的包更老的版本，所以不用担心有些包没更新但被删了。</p><pre><code># 清理所有包的旧版本brew cleanup # 清理指定包的旧版本brew cleanup $FORMULA# 查看可清理的旧版本包，不执行实际清理操作brew cleanup -n          </code></pre><h2 id="锁定不想更新的包"><a href="#锁定不想更新的包" class="headerlink" title="锁定不想更新的包"></a>锁定不想更新的包</h2><p>如果经常更新的话，<strong><font color="red">brew update</font></strong> 一次更新所有的包是非常方便的。但有时候会担心自动升级把一些不希望更新的包更新了。数据库就属于这一类，尤其是 PostgreSQL 跨 minor 版本升级都要迁移数据库的。更希望找个时间单独处理它。这时可用 <strong><font color="red">brew pin</font></strong> 去锁定这个包，然后 <strong><font color="red">brew update</font></strong> 就会略过它了。</p><pre><code># 锁定某个包brew pin $FORMULA# 取消锁定某个包brew unpin $FORMULA</code></pre><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><p><strong>brew info</strong> </p><p>  可以查看包的相关信息，最有用的应该是包依赖和相应的命令。比如 Nginx 会提醒你怎么加 launchctl，PostgreSQL 会告诉你如何迁移数据库。这些信息会在包安装完成后自动显示，如果忘了的话可以用这个命令很方便地查看。</p><pre><code>  # 显示某个包的信息  brew info $FORMULA  # 显示安装了包数量，文件数量，和总占用空间  brew info</code></pre></li><li><p><strong>brew deps</strong></p><p>  可以显示包的依赖关系，常用它来查看已安装的包的依赖，然后判断哪些包是可以安全删除的。</p><pre><code>  # 查看已安装的包的依赖，树形显示  brew deps --installed --tree  </code></pre><p>  输出类似如下信息：</p><pre><code>  apr-util  ├── apr  └── openssl@1.1  aria2  └── libssh2      └── openssl@1.1  elasticsearch  flume  └── hadoop</code></pre></li><li><p><strong>man brew</strong></p><p>  可以查看更多有用的命令和参数，没事 man brew 一下可以涨不少知识。</p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>不想更新 Homebrew 往往有两个原因，害怕潜在的风险和对工具的不熟悉，我之前也是这样。写这篇文章最开始是为了帮我记录常用的命令方便以后查阅的，希望它也能帮到你。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 镜像源</title>
      <link href="/articles/macos/homebrew-jing-xiang-yuan.html"/>
      <url>/articles/macos/homebrew-jing-xiang-yuan.html</url>
      
        <content type="html"><![CDATA[<h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2><ul><li>官方镜像源</li></ul><pre><code>https://github.com/Homebrew/brew.githttps://github.com/Homebrew/homebrew-core.git</code></pre><ul><li>中科大源</li></ul><pre><code>https://mirrors.ustc.edu.cn/brew.githttps://mirrors.ustc.edu.cn/homebrew-core.githttps://mirrors.ustc.edu.cn/homebrew-bottles</code></pre><ul><li>清华源</li></ul><pre><code>https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.githttps://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.githttps://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</code></pre><h2 id="镜像源设置"><a href="#镜像源设置" class="headerlink" title="镜像源设置"></a>镜像源设置</h2><ul><li>替换 brew.git</li></ul><pre><code>$ cd "$(brew --repo)”$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.gitor$ git -C "$(brew --repo)" remote set-url origin https://mirrors.ustc.edu.cn/brew.git</code></pre><ul><li>替换 homebrew-core.git</li></ul><pre><code>$ cd "$(brew --repo homebrew/core)”$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.gitor$ git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</code></pre><ul><li>执行更新</li></ul><pre><code>$ brew update</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Homebrew </tag>
            
            <tag> brew </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
