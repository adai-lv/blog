<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8 - 函数式编程之Stream</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-stream.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-stream.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h2><p>Stream API 借助于 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。</p><p>流主要有三部分构成：获取一个数据源（source）→ 数据转换 → 执行操作获取想要的结果。每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-01.jpg" alt=""></p><h2 id="Stream的特点"><a href="#Stream的特点" class="headerlink" title="Stream的特点"></a>Stream的特点</h2><ul><li><p><strong>无存储性</strong></p><p>流不是存储元素的数据结构；相反，它需要从数据结构，数组，生成器函数或IO管道中获取数据并通过流水线地(计算)操作对这些数据进行转换。</p></li><li><p><strong>函数式编程</strong></p><p>Stream上操作会产生一个新结果，而不会去修改原始数据。比如filter过滤操作它只会根据原始集合中将未被过滤掉的元素生成一个新的Stream，而不是真的去删除集合中的元素。</p></li><li><p><strong>惰性求值</strong></p><p>很多Stream操作(如filter,map,distinct等)都是惰性实现，这样做为了优化程序的计算。比如说，要从一串数字中找到第一个能被10整除的数，程序并不需要对这一串数字中的每个数字进行测试。流操作分为两种：中间操作(返回值仍为Stream，仍可执行操作)，终断操作(结束Stream操作)。中间操作都是惰性操作。</p></li><li><p><strong>无限数据处理</strong></p><p>集合的大小是有限的，但是流可以对无限的数据执行操作。比如可以使用limit或findFirst这样的操作让Stream操作在有限的时间内结束。</p></li><li><p><strong>一次性消费</strong></p><p>流只能使用(“消费”)一次，一旦调用终断操作，流就不能再次使用，必须重新创建一个流。就像迭代器一样，遍历一遍后，想要再次遍历需要重新创建一个迭代器。</p></li></ul><h2 id="Stream的源的构建"><a href="#Stream的源的构建" class="headerlink" title="Stream的源的构建"></a>Stream的源的构建</h2><p>有多种方式可以构建流：</p><ol><li><p>静态工厂</p><ul><li>Stream.of()</li><li>IntStream.of()</li><li>LongStream.of()</li><li>DoubleStream.of()</li></ul></li><li><p>Collection 和 Array</p><ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays.stream(T array)</li></ul></li><li><p>字符流</p><ul><li>BufferdReader.lines()</li></ul></li><li><p>文件路径</p><ul><li>Files.walk()</li><li>Files.lines()</li><li>Files.find()</li></ul></li><li><p>其它</p><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul></li></ol><p>生成流的时候，除了可以生成串行流，也可以生成并行流，即并行处理流的操作。</p><pre><code>final List&lt;String&gt; strings = Arrays.asList("ab", "a", "abc", "b", "bc");//串行流long count1 = strings.stream()    .filter(s -&gt; {        System.out.println("thread:" + Thread.currentThread().getId());        return s.startsWith("a");    })    .count();System.out.println(count1);//并行流long count2 = strings.parallelStream()    .filter(s -&gt; {        System.out.println("thread:" + Thread.currentThread().getId());        return s.startsWith("a");    })    .count();System.out.println(count2);</code></pre><h2 id="Stream操作的分类"><a href="#Stream操作的分类" class="headerlink" title="Stream操作的分类"></a>Stream操作的分类</h2><table><thead><tr><th align="left">Stream操作</th><th align="left">操作分类</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">中间操作(Intermediate operations)</td><td align="left">无状态(Stateless)</td><td align="left">unordered(), filter(), map(), mapToInt(), mapToLong(), mapToDouble(), flatMap(), flatMapToInt(), flatMapToLong(), flatMapToDouble(), peek();</td></tr><tr><td align="left">中间操作(Intermediate operations)</td><td align="left">有状态(Stateful)</td><td align="left">distinct();  sorted();  limit(), skip()</td></tr><tr><td align="left">终断操作(Terminal operations)</td><td align="left">非短路操作</td><td align="left">forEach(), forEachOrdered(); reduce(), collect(), max(), min(), count(); toArray()</td></tr><tr><td align="left">终断操作(Terminal operations)</td><td align="left">短路操作(short-circuiting)</td><td align="left">anyMatch(), allMatch(), noneMatch(); findFirst(), findAny()</td></tr></tbody></table><ul><li><p><strong>中间操作</strong></p><p>返回一个新的Stream。中间操作都是惰性的，它们不会对数据源执行任何操作，仅仅是创建一个新的Stream。在终断操作执行之前，数据源的遍历不会开始。</p></li><li><p><strong>终断操作</strong></p><p>遍历流并生成结果或者副作用。执行完终断操作后，Stream就会被“消费”掉，如果想再次遍历数据源，则必须重新创建新的Stream。大多数情况下，终断操作的遍历都是即时的——在返回之前完成数据源的遍历和处理，只有iterator()和spliterator()不是，这两个方法用于提供额外的遍历功能——让开发者自己控制数据源的遍历以实现现有Stream操作中无法满足的操作(实际上现有的Stream操作基本能满足需求，所以这两个方法目前用的不多)。</p></li></ul><h2 id="Stream的操作"><a href="#Stream的操作" class="headerlink" title="Stream的操作"></a>Stream的操作</h2><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="有状态操作"><a href="#有状态操作" class="headerlink" title="有状态操作"></a>有状态操作</h4><ul><li><strong>map</strong><blockquote><p>使用传入的Function对象对Stream中的所有元素进行处理，返回的Stream对象中的元素为原元素处理后的结果。</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-02.jpg" alt=""></p><pre><code>// map，平方数List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);Collection&lt;Integer&gt; squareNums = nums.stream()    .map(n -&gt; n * n)    .collect(Collectors.toList());squareNums.forEach(integer -&gt; System.out.println(integer));</code></pre><ul><li><strong>flatMap</strong><blockquote><p>map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。flatMap，则是一对多映射关系的。</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/md-images/article/java-stream-03.jpg" alt=""></p><pre><code>Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(        Arrays.asList(1),        Arrays.asList(2, 3),        Arrays.asList(4, 5, 6));List&lt;Integer&gt; integerStream = inputStream    .flatMap(list -&gt; list.stream())    .map(n -&gt; n * n)    .collect(Collectors.toList());integerStream.forEach(System.out::println);</code></pre><ul><li><strong>filter</strong><blockquote><p>filter 对原始 Stream 进行某项测试，通过测试的元素被留下来生成一个新 Stream</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-04.jpg" alt=""></p><pre><code>List&lt;String&gt; strings = Arrays.asList("ab", "a", "abc", "b", "bc");strings.stream()    .filter(s -&gt; s.startsWith("a"))    .forEach(System.out::println);</code></pre><ul><li><strong>peek</strong><blockquote><p>peek，遍历Stream中的元素，和forEach类似，区别是peek不会“消费”掉Stream，而forEach会消费掉Stream；peek是中间操作所以也是惰性的，只有在Stream“消费”的时候生效。</p></blockquote></li></ul><pre><code>// peekStream.of("one", "two", "three", "four")    .peek(e -&gt; System.out.println("原来的值: " + e))    .map(String::toUpperCase)    .peek(e -&gt; System.out.println("转换后的值: " + e))    .collect(Collectors.toList());</code></pre><ul><li><strong>limit 和 skip</strong><blockquote><p>limit取头部的数据(或者说截取前面的元素)<br>skip取尾部的数据(跳过前面的元素)</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-05.jpg" alt=""></p><pre><code>//limit, 返回 Stream 的前面 n 个元素List&lt;String&gt; strings = Arrays.asList("ab", "a", "abc", "b", "bc");strings.stream()    .limit(3)    .forEach(System.out::println);System.out.println("==============");//skip 则是扔掉前 n 个元素strings.stream()    .skip(3)    .forEach(System.out::println);</code></pre><h4 id="无状态操作"><a href="#无状态操作" class="headerlink" title="无状态操作"></a>无状态操作</h4><ul><li><strong>distinct</strong><blockquote><p>去除重复的元素</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-stream-06.jpg" alt=""></p><pre><code>Stream&lt;String&gt; distinctString = Stream.of("a","b","b","c")    .distinct();distinctString.forEach(System.out::println);</code></pre><ul><li><strong>sorted</strong><blockquote><p>对Stream中的元素进行排序。<br>有两个重载方法，其中 Stream&lt;T&gt; sorted() 需要元素实现了Comparable接口。</p></blockquote></li></ul><pre><code>Arrays.asList("ab", "a", "abc", "b", "bc").stream()    .sorted()    .forEach(System.out::println);Arrays.asList("ab", "a", "abc", "b", "bc").stream()    .sorted((o1, o2) -&gt; {        return o1.compareTo(o2);    })    .forEach(System.out::println);</code></pre><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><h4 id="短路操作"><a href="#短路操作" class="headerlink" title="短路操作"></a>短路操作</h4><p>短路操作其实就和我们日常编程用到的&amp;&amp;和||运算符处理过程类似，遇到一个满足条件的就立即停止判断。</p><ul><li><strong>anyMatch</strong><blockquote><p>只要其中有一个元素满足传入的Predicate时返回True，否则返回False。<br>前面的中间操作只要anyMatch中的条件成立后，就不再执行。与逻辑运算符 || 类似。</p></blockquote></li></ul><pre><code>boolean anyMatchReturn = Arrays.asList("ab", "a", "abc", "b", "bc").stream()    .peek(s -&gt; System.out.println(s))    .anyMatch(s -&gt; s.startsWith("b"));System.out.println(anyMatchReturn);</code></pre><p>运行结果:</p><pre><code>abaabcbtrue</code></pre><ul><li><strong>allMatch</strong><blockquote><p>所有元素均满足传入的Predicate时返回True，否则False。<br>只要allMatch条件有一个为false，中间操作将终止执行。与逻辑运算符&amp;&amp;类似</p></blockquote></li></ul><pre><code>boolean allMatchReturn = Arrays.asList("ab", "a", "abc", "b", "bc").stream()  .peek(s -&gt; System.out.println(s))  .allMatch(s -&gt; s.startsWith("b"));System.out.println(allMatchReturn);</code></pre><p>运行结果:</p><pre><code>abfalse</code></pre><ul><li><strong>noneMatch</strong><blockquote><p>所有元素均不满足传入的Predicate时返回True，否则False。<br>只要allMatch条件有一个为true，中间操作将终止执行。</p></blockquote></li></ul><pre><code>boolean noneMatchReturn = Arrays.asList("ab", "a", "abc", "b", "bc").stream()    .peek(s -&gt; System.out.println(s))    .noneMatch(s -&gt; s.startsWith("b"));System.out.println(noneMatchReturn);</code></pre><p>运行结果:</p><pre><code>abaabcbfalse</code></pre><h4 id="非短路操作"><a href="#非短路操作" class="headerlink" title="非短路操作"></a>非短路操作</h4><ul><li><strong>forEach</strong><blockquote><p>对所有元素进行迭代处理，无返回值</p></blockquote></li></ul><pre><code>Arrays.asList("ab", "a", "abc", "b", "bc")    .forEach(System.out::println);</code></pre><ul><li><strong>reduce</strong><blockquote><p>计算机术语规约，通过累加器accumulator，对前面的序列进行累计操作，并最终返回一个值。<br>累加器accumulator有两个参数，第一个是前一次累加的结果，第二个是前面集合的下一个元素。<br>通过reduce，可以实现 average, sum, min, max, count。</p></blockquote></li></ul><p>reduce 有三个重载方法：</p><ol><li><p><strong>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</strong></p><blockquote><p>这里的identity是初始值。</p></blockquote><p> 下面将会把几个字符组装成一个字符串</p><pre><code> String concat = Stream.of("A", "B", "C", "D")     .reduce("H", (x, y) -&gt; {         System.out.println("x=" + x + ", y=" + y);         return x.concat(y);     }); System.out.println(concat);</code></pre><p> 输出结果：</p><pre><code> x=H, y=A x=HA, y=B x=HAB, y=C x=HABC, y=D HABCD</code></pre></li><li><p><strong>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</strong></p><blockquote><p>由于没有初始值，这里输出Optional类型，避免空指针</p></blockquote><pre><code> Optional&lt;String&gt; concat2Optional = Stream.of("A", "B", "C", "D").reduce((x, y) -&gt; {     System.out.println("x=" + x + ", y=" + y);     return x.concat(y); }); System.out.println(concat2Optional.orElse("default"));</code></pre><p> 输出结果：</p><pre><code> x=A, y=B x=AB, y=C x=ABC, y=D ABCD</code></pre></li><li><p><strong>&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</strong></p><blockquote><p>这个方法非常复杂，下次再细讲</p></blockquote></li></ol><ul><li><strong>collect</strong><blockquote><p>collect方法可以通过收集器collector将流转化为其他形式，比如字符串、list、set、map。</p></blockquote></li></ul><p>collect有两个重载方法，其中一个是最常用的：</p><p><strong>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</strong></p><p>官方为了我们转换方便，已经在Collectors类中封装了各种各样的collector，下面看一些常用的收集器。</p><p><strong><em>拼接字符串</em></strong></p><pre><code>String collect1 = Stream.of("A", "B", "C", "D")    .collect(Collectors.joining());System.out.println(collect1);</code></pre><p><strong><em>转成List</em></strong></p><pre><code>List&lt;String&gt; collect2 = Stream.of("A", "B", "C", "D")    .collect(Collectors.toList());</code></pre><p><strong><em>转成set</em></strong></p><pre><code>Set&lt;String&gt; collect3 = Stream.of("A", "B", "C", "D")    .collect(Collectors.toSet());</code></pre><p><strong><em>转成map</em></strong></p><p>Collectors的toMap方法签名如下所示，前一个mapper转换成map中的key,后一个mapper转换成map中的value</p><pre><code>Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(  Function&lt;? super T, ? extends K&gt; keyMapper,   Function&lt;? super T, ? extends U&gt; valueMapper)Map&lt;String, String&gt; collect3 = Stream.of("A", "B", "C", "D")    .collect(Collectors.toMap(        s -&gt; s,        s -&gt; s    ));</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之Optional</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-optional.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-optional.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些情况下，首先要判断某个参数或者某个方法的返回值是否为null，才能继续操作该参数。</p><p>对于某些链式操作需要多次通过if语句判断是否为空，才能确保不抛出NullPointerException，这段非空判断的代码显得非常冗长和恶心。比如下面这段代码：</p><pre><code>String isoCode = "default";if (user != null) {    Address address = user.getAddress();    if (address != null) {        Country country = address.getCountry();        if (country != null) {            isocode = country.getIosCode();            if (isocode != null) {                isocode = isocode.toUpperCase();            }        }    }}</code></pre><p>在java 8里，JDK引入了一个Optional类，该类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。通过本文的学习，我们看下如何通过Optional类重写上面那段判空代码。</p><h2 id="Optional初始化"><a href="#Optional初始化" class="headerlink" title="Optional初始化"></a>Optional初始化</h2><p>Optional类的构造方法是私有方法，所以只能通过它的静态工厂方法进行初始化。它的初始化方法有如下几种：</p><ul><li><strong>&lt;T&gt; Optional&lt;T&gt; of(T value)</strong><blockquote><p>为非null的值创建一个Optional。如果传入参数为null，抛出NullPointerException。</p></blockquote></li></ul><pre><code>// 调用工厂方法创建Optional实例Optional&lt;String&gt; name = Optional.of("hello");// 传入参数为null，抛出NullPointerException.Optional&lt;String&gt; someNull = Optional.of(null);</code></pre><ul><li><strong>&lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</strong><blockquote><p>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。<br>它和 of 的区别是可以传null值。</p></blockquote></li></ul><pre><code>// 调用工厂方法创建Optional实例Optional&lt;String&gt; name = Optional.ofNullable("hello");// 传入参数为null，不抛出NullPointerException，返回一个空的Optional.Optional&lt;String&gt; someNull = Optional.ofNullable(null);</code></pre><ul><li><strong>&lt;T&gt; Optional&lt;T&gt; empty()</strong><blockquote><p>是 ofNullable静态工厂方法，传null值时的实现，返回一个空的Optional。</p></blockquote></li></ul><pre><code>Optional empty = Optional.empty();</code></pre><h2 id="Optional类的其它方法"><a href="#Optional类的其它方法" class="headerlink" title="Optional类的其它方法"></a>Optional类的其它方法</h2><ul><li><strong>boolean isPresent()</strong><blockquote><p>如果值存在返回true，否则返回false。</p></blockquote></li></ul><pre><code>// falseOptional&lt;String&gt; empty = Optional.ofNullable(null);System.out.println(empty.isPresent());// trueOptional&lt;String&gt; optionalS2 = Optional.of(s2);System.out.println(optionalS2.isPresent());</code></pre><ul><li><strong>T get()</strong><blockquote><p>如果Optional有值则将其返回，否则抛出NoSuchElementException</p></blockquote></li></ul><pre><code>// 获取helloOptional.of("hello").get();// 抛出NoSuchElementExceptionOptional.empty().get();</code></pre><ul><li><strong>void ifPresent (Consumer&lt;? super T&gt; consumer)</strong><blockquote><p>如果Optional实例有值则调用consumer，否则不做处理。</p></blockquote></li></ul><pre><code>//调用ifPresent方法里面的consumerOptional.of("hello")        .ifPresent(System.out::println);</code></pre><ul><li><strong>T orElse(T other)</strong><blockquote><p>如果有值则将其返回，否则返回指定的其它值</p></blockquote></li></ul><pre><code>// 输出nullSystem.out.println(Optional.empty().orElse("null"));// 输出helloSystem.out.println(Optional.of("hello").orElse("null"));</code></pre><ul><li><strong>T orElseGet (Supplier&lt;? extends T&gt; other)</strong><blockquote><p>orElseGet与orElse方法类似，区别在于得到的默认值。<br>orElse方法将传入的字符串作为默认值，<br>orElseGet方法可以接受 Supplier 接口的实现用来生成默认值。</p></blockquote></li></ul><pre><code>// 输出nullSystem.out.println(Optional.empty().orElseGet(() -&gt; "null"));// 输出helloSystem.out.println(Optional.of("hello").orElseGet(() -&gt; "null"));</code></pre><ul><li><strong>&lt;X extends Throwable&gt; T orElseThrow (Supplier&lt;? extends X&gt; exceptionSupplier) throws X</strong><blockquote><p>如果有值则将其返回，否则抛出 supplier 接口创建的异常。</p></blockquote></li></ul><pre><code>// 抛出exceptiontry {    Optional.empty()            .orElseThrow(()-&gt;new Exception("为空"));} catch (Exception e) {    e.printStackTrace();}</code></pre><ul><li><strong>&lt;U&gt; Optional&lt;U&gt; map (Function&lt;? super T, ? extends U&gt; mapper)</strong><blockquote><p>如果参数 mapper 有值，则调用map方法执行mapper参数的Function方法得到返回值。<br>如果mapper的返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。<br>如果传入的mapper参数是null，抛出NullPointerException。</p></blockquote></li></ul><pre><code>// 输出 JACKOptional&lt;String&gt; stringOptional = Optional.of("jack")    .map((value) -&gt; value.toUpperCase());System.out.println(stringOptional.orElse("default"));// 输出 defaultOptional&lt;String&gt; stringOptional1 = Optional.of("jack")    .map((value) -&gt; null);System.out.println(stringOptional1.orElse("default"));// 输出 default，并且不会调用mapperString s2 = null;Optional&lt;String&gt; stringOptional2 = Optional.ofNullable(s2)    .map((value) -&gt; value.toUpperCase());System.out.println(stringOptional2.orElse("default"));// 如果参数mapper为null，抛NullPointerException异常try {    String s3 = null;    Optional&lt;String&gt; stringOptional3 = Optional.ofNullable(s3)        .map(null);    System.out.println(stringOptional3.orElse("default"));} catch (Exception e) {}</code></pre><ul><li><strong>&lt;U&gt; Optional&lt;U&gt; flatMap (Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</strong><blockquote><p>flatMap与map方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</p></blockquote></li></ul><pre><code>// flatMap，输出 JACKOptional&lt;String&gt; stringOptional4 = Optional.of("jack")    .flatMap(value -&gt; Optional.ofNullable(value.toUpperCase()));System.out.println(stringOptional4.orElse("default"));// flatMap，输出 defaultOptional&lt;String&gt; stringOptional5 = Optional.of("jack")    .flatMap(value -&gt; Optional.ofNullable(null));System.out.println(stringOptional5.orElse("default"));// flatMap，输出 default，并且不会调用mapperString s6 = null;Optional&lt;String&gt; stringOptional6 = Optional.ofNullable(s6)    .flatMap(value -&gt; Optional.ofNullable(value.toUpperCase()));System.out.println(stringOptional6.orElse("default"));// flatMap 如果map的参数mapper为null，抛NullPointerException异常try {    String s7 = null;    Optional&lt;String&gt; stringOptional7 = Optional.ofNullable(s7)        .flatMap(null);    System.out.println(stringOptional7.orElse("default"));} catch (Exception e) {    System.out.println("出错了");}</code></pre><ul><li><strong>Optional&lt;T&gt; filter (Predicate&lt;? super T&gt; predicate)</strong><blockquote><p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</p></blockquote></li></ul><pre><code>// 输出defaultString filterString = Optional.of("hugo")        .filter(s -&gt; "jack".equals(s))        .orElse("default");System.out.println(filterString);// 输出hugoString filterString2 = Optional.of("hugo")        .filter(s -&gt; "hugo".equals(s))        .orElse("default");System.out.println(filterString2);// 输出default，断言接口里面的语句不会执行String nullableString = null;String filterString3 = Optional.ofNullable(nullableString)        .filter(s -&gt; {            System.out.println("测试是否调用");            return "jack".equals(s);        })        .orElse("default");System.out.println(filterString3);</code></pre><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>经过上面学习Optional的相关API，已经对它有了一定的了解。下面，我们运用上面的知识解决在前言中遗留的问题。</p><pre><code>ioscode = Optional.ofNullable(user)        .map(u -&gt; u.getAddress())        .map(addr -&gt; addr.getCountry())        .map(country -&gt; country.getIosCode())        .map(String::toUpperCase)        .orElse("default");</code></pre><p>从上面的学习可以知道，只有Optional是empty的，map方法不会被调用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之Lambda</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-lambda.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-lambda.html</url>
      
        <content type="html"><![CDATA[<p>Lambda表达式是Java8的新语法糖。它其实是一个匿名函数，可以把Lambda表达式理解为一段约定好怎么传递参数和返回参数的一段代码，由编译器负责参数类型的猜测并执行结果。我们通过lambda表达式可以写出更简洁、更灵活的代码。</p><h2 id="Lambda-表达式语法"><a href="#Lambda-表达式语法" class="headerlink" title="Lambda 表达式语法"></a>Lambda 表达式语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><blockquote><p>“-&gt;” 操作符将 Lambda 表达式分为两个部分：左侧为参数列表，右侧为 Lambda 体。</p></blockquote><pre><code># Lambda 体，单行表达式，直接写在 “-&gt;” 右侧(parameters) -&gt; expression# Lambda 体，有多行表达式，用 “{}” 包含起来(parameters) -&gt; { statements; }</code></pre><h3 id="具体的语法"><a href="#具体的语法" class="headerlink" title="具体的语法"></a>具体的语法</h3><table><thead><tr><th align="left">场景</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">无参数，无返回值</td><td align="left">() -&gt; System.out.println(“Helo”);</td></tr><tr><td align="left">无参数，有返回值</td><td align="left">() -&gt; 10;</td></tr><tr><td align="left">有一个参数，无返回值</td><td align="left">x -&gt; System.out.print(x);</td></tr><tr><td align="left">有一个参数，有返回值</td><td align="left">x -&gt; x + 10;</td></tr><tr><td align="left">有多个参数，没有返回值</td><td align="left">(x, y) -&gt; System.out.println(x + y);</td></tr><tr><td align="left">有多个参数，有返回值</td><td align="left">(x, y) -&gt; x + y;</td></tr></tbody></table><p>其实，每个lambda表达式的返回值都是一个函数式编程的接口。</p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><ul><li>无参数，无返回值</li></ul><pre><code>Runnable runnable = () -&gt; System.out.println("hello");new Thread(runnable).start();</code></pre><ul><li>无参数，有返回值</li></ul><pre><code>Supplier&lt;Integer&gt; supplier = () -&gt; 10;Integer number = supplier.get();System.out.println(number);</code></pre><ul><li>有一个参数，无返回值</li></ul><pre><code>Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);or Consumer&lt;String&gt; consumer = (x) -&gt; System.out.println(x);or Consumer&lt;String&gt; consumer = (x) -&gt; {    System.out.println(x);};consumer.accept("hello");</code></pre><ul><li>有一个参数，有返回值</li></ul><pre><code>Function&lt;Integer,Integer&gt; function = x -&gt; x + 10;orFunction&lt;Integer,Integer&gt; function = (x) -&gt; x + 10;orFunction&lt;Integer, Integer&gt; function = (x) -&gt; {    return x + 10;};int result = function.apply(20);System.out.println(result);</code></pre><ul><li>多个参数，没有返回值</li></ul><pre><code>BiConsumer&lt;Integer, String&gt; consumer = (x, y) -&gt; {    System.out.println(x);    System.out.println(y);};orBiConsumer&lt;Integer, String&gt; consumer = (Integer x, String y) -&gt; {    System.out.println(x);    System.out.println(y);};consumer.accept(100, "hello");</code></pre><ul><li>多个参数，有返回值</li></ul><pre><code>BiFunction&lt;Integer, Integer, Integer&gt; function = (x, y) -&gt; x + y;orBiFunction&lt;Integer, Integer, Integer&gt; function = (Integer x, Integer y) -&gt; x + y;orBiFunction&lt;Integer, Integer, Integer&gt; function = (Integer x, Integer y) -&gt; {    return x + y;};int result = function.apply(10, 10);System.out.println(result);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之基本接口</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-ji-ben-jie-kou.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-ji-ben-jie-kou.html</url>
      
        <content type="html"><![CDATA[<p>不管lambda表达式还是Stream流式编程，Function、Consumer、Supplier、Predicate 四个接口是一切函数式编程的基础。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/java-function-01.jpg" alt=""></p><ul><li>Supplier<t>：T get()；无输入，“生产”一个T类型的返回值。</t></li><li>Consumer<t>：void accept(T t)；输入类型T，“消费”掉，无返回。</t></li><li>Function&lt;T, R&gt;：R apply(T t)；输入类型T返回类型R。</li><li>Predicate<t>：boolean test(T t)；输入类型T，并进行条件“判断”，返回true|false。</t></li></ul><h2 id="interface-Supplier-lt-T-gt"><a href="#interface-Supplier-lt-T-gt" class="headerlink" title="interface Supplier<T>"></a>interface Supplier&lt;T&gt;</h2><blockquote><p>该接口的中文直译是“提供者”，可以理解为定义一个lambda表达式，没有输入参数，返回一个T类型的值。</p></blockquote><pre><code>Supplier&lt;Integer&gt; supplier = () -&gt; 10;// 输出10System.out.println(supplier.get());</code></pre><h2 id="interface-Consumer-lt-T-gt"><a href="#interface-Consumer-lt-T-gt" class="headerlink" title="interface Consumer<T>"></a>interface Consumer&lt;T&gt;</h2><blockquote><p>该接口的中文直译是“消费”，可以理解为定义一个lambda表达式，接收一个T类型的参数，并且没有返回值。</p></blockquote><ul><li><strong>accept</strong> ：接收参数，并调用Consumer接口里的方法</li></ul><pre><code>Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x);// 输出10consumer.accept(10);</code></pre><ul><li><strong>andThen</strong>：调用完consumer自己后，还调用andThen方法参数中指定的Consumer</li></ul><pre><code>Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x);Consumer&lt;Integer&gt; plusSelf = x -&gt; System.out.println(x + x);// 输出10以及20consumer.andThen(plusSelf).accept(10);</code></pre><h2 id="interface-Function-lt-T-R-gt"><a href="#interface-Function-lt-T-R-gt" class="headerlink" title="interface Function<T, R>"></a>interface Function&lt;T, R&gt;</h2><blockquote><p>该接口的中文直译是“函数”，可以理解为：定义一个lambda表达式，接收一个T类型的参数，返回一个R类型的值。</p></blockquote><ul><li><strong>apply</strong>：传入一个T类型的参数，返回一个R类型的值</li></ul><pre><code>Function&lt;Integer, Integer&gt; function = x -&gt; x + x;// 输出20System.out.println(function.apply(10));</code></pre><ul><li><strong>compose</strong>：accept获取到的参数，先执行compose里面的Function，再执行原Function</li></ul><pre><code>Function&lt;Integer, Integer&gt; plusSelf = x -&gt; {    System.out.println("plusSelf");    return x + x;};Function&lt;Integer, String&gt; toString = x -&gt; {    System.out.println("toString");    return String.valueOf(x);};// 输出20，整数10先自加变成20，然后由toString转换成字符串String string1 = toString.compose(plusSelf).apply(10);System.out.println(string1);</code></pre><ul><li><strong>andThen</strong>：与compose相反。先执行原Function，在执行andThen里面的Function。</li></ul><pre><code>Function&lt;Integer, Integer&gt; plusSelf = x -&gt; {    System.out.println("plusSelf");    return x + x;};Function&lt;Integer, String&gt; toString = x -&gt; {    System.out.println("toString");    return String.valueOf(x);};// 输出20, 先自加，再转换成字符串String string2 = plusSelf.andThen(toString).apply(10);System.out.println(string2);</code></pre><h2 id="interface-Predicate-lt-T-gt"><a href="#interface-Predicate-lt-T-gt" class="headerlink" title="interface Predicate<T>"></a>interface Predicate&lt;T&gt;</h2><blockquote><p>该接口的中文直译是“断言”，用于返回false/true。T是lambda表达式的输入参数类型。</p></blockquote><ul><li><strong>test</strong>：测试test方法中输入参数是否满足接口中定义的lambda表达式</li></ul><pre><code>Predicate&lt;String&gt; test = x -&gt; "test".equals(x);Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);// 输出 trueSystem.out.println(test.test("test"));// 输出 falseSystem.out.println(test.test("test_false"));</code></pre><ul><li><strong>and</strong>：原 Predicate 接口和 and 方法中指定的 Predicate 接口要同时为true，test方法才为true。与逻辑运算符 &amp;&amp; 一致。</li></ul><pre><code>Predicate&lt;String&gt; test = x -&gt; "test".equals(x);Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);// 输出 falseSystem.out.println(test.and(test2).test("test"));</code></pre><ul><li><strong>negate</strong>：对结果取反后再输出</li></ul><pre><code>Predicate&lt;String&gt; test = x -&gt; "test".equals(x);Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);// 输出 falseSystem.out.println(test.negate().test("test"));</code></pre><ul><li><strong>or</strong>：原 Predicate 接口和 or 方法中指定的 Predicate 接口只要一个为true，test方法为true。与逻辑运算符 || 一致。</li></ul><pre><code>Predicate&lt;String&gt; test = x -&gt; "test".equals(x);Predicate&lt;String&gt; test2 = x -&gt; "test2".equals(x);// 输出 falseSystem.out.println(test.or(test2).test("test"));</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 - 函数式编程之简介</title>
      <link href="/articles/java/han-shu-shi-bian-cheng-zhi-jian-jie.html"/>
      <url>/articles/java/han-shu-shi-bian-cheng-zhi-jian-jie.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。</p><p>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：</p><pre><code>(1 + 2) * 3 - 4</code></pre><p>传统的过程式编程，可能这样写：</p><pre><code>var a = 1 + 2;var b = a * 3;var c = b - 4;</code></pre><p>函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：</p><pre><code>var result = subtract(multiply(add(1,2), 3), 4);</code></pre><p>这就是函数式编程。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>函数是”第一等公民”</p><p> 所谓”第一等公民”（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p><p> 举例来说，下面代码中的print变量就是一个函数，可以作为另一个函数的参数。</p><pre><code> var print = function(i) {    console.log(i); }; [1,2,3].forEach(print);</code></pre></li><li><p>只用”表达式”，不用”语句”</p><p> “表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p><p> 原因是函数式编程的开发动机，一开始就是为了处理运算（computation），不考虑系统的读写（I/O）。”语句”属于对系统的读写操作，所以就被排斥在外。</p><p> 当然，实际应用中，不做I/O是不可能的。因此，编程过程中，函数式编程只要求把I/O限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。</p></li><li><p>没有”副作用”</p><p> 所谓”副作用”（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p><p> 函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值.</p></li><li><p>不修改状态<br> 函数式编程只是返回新的值，不修改系统变量。</p><p> 在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。</p></li><li><p>引用透明</p><p> 引用透明（Referential transparency），指的是函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p><p> 其他类型的语言，函数的返回值往往与系统状态有关，不同的状态之下，返回值是不一样的。这就叫”引用不透明”，很不利于观察和理解程序的行为。</p></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p>代码简洁，开发快速</p></li><li><p>接近自然语言，易于理解<br> (1+2)*3-4用函数式语言表达</p><pre><code> add(1,2).multiply(3).subtract(4)</code></pre></li><li><p>更方便的代码管理</p><p> 不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p></li><li><p>易于”并发编程”<br> 函数式编程不需要考虑”死锁”（deadlock），因为它不修改变量，所以根本不存在”锁”线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署”并发编程”（concurrency）。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka 安装配置和常用命令</title>
      <link href="/articles/kafka/an-zhuang-pei-zhi-he-chang-yong-ming-ling.html"/>
      <url>/articles/kafka/an-zhuang-pei-zhi-he-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Kafka 版本：2.3.1</p></blockquote><h2 id="Homebrew安装Kafka"><a href="#Homebrew安装Kafka" class="headerlink" title="Homebrew安装Kafka"></a>Homebrew安装Kafka</h2><blockquote><p>安装 kafka 过程中会自动的安装好 zookeeper</p></blockquote><pre><code>$ brew info kafka$ brew install kafka$ cd /usr/local/Cellar/kafka/2.3.1/libexec</code></pre><h2 id="卸载-Kafka"><a href="#卸载-Kafka" class="headerlink" title="卸载 Kafka"></a>卸载 Kafka</h2><pre><code>$ brew uninstall kafka</code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><blockquote><p>配置文件路径：/usr/local/etc/kafka</p></blockquote><h3 id="server-properties"><a href="#server-properties" class="headerlink" title="server.properties"></a>server.properties</h3><pre><code># the address the socket server listens onlisteners=PLAINTEXT://localhost:9092# zookeeper connection stringzookeeper.connect=localhost:2181# Timeout in ms for connecting to zookeeperzookeeper.connection.timeout.ms=6000</code></pre><h3 id="zookeeper-properties"><a href="#zookeeper-properties" class="headerlink" title="zookeeper.properties"></a>zookeeper.properties</h3><blockquote><p>启动 kafka 时，需要先启动 zookeeper 服务<br>可以启动 kafka 自带的 zookeeper，也可以启动外置的 zookeeper 服务</p></blockquote><pre><code># the directory where the snapshot is stored.dataDir=/usr/local/var/lib/zookeeper# the port at which the clients will connectclientPort=2181</code></pre><h2 id="启动和关闭服务"><a href="#启动和关闭服务" class="headerlink" title="启动和关闭服务"></a>启动和关闭服务</h2><ul><li>启动服务</li></ul><p>如果想以服务的方式启动，那么可以:</p><pre><code># 先安装 zookeeper（brew install zookeeper）$ brew services start zookeeper$ brew services start kafka</code></pre><p>如果只是临时启动，那么可以:</p><pre><code>$ bin/zookeeper-server-start.sh config/zookeeper.properties$ bin/kafka-server-start.sh config/server.properties$ jps -ml</code></pre><ul><li>关闭服务</li></ul><pre><code>$ bin/kafka-server-stop.sh stop$ bin/zookeeper-server-stop.sh stop$ jps -ml</code></pre><h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><ul><li>创建<code>topic</code></li></ul><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称##   --replication-factor 定义副本数##   --partitions 定义分区数$ bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic test_topic --replication-factor 1 --partitions 3</code></pre><ul><li>删除<code>topic</code></li></ul><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称$ bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic test_topic</code></pre><ul><li>发送消息</li></ul><pre><code>## 选项说明:##   --broker-list kafka 服务连接的节点，支持多节点##   --topic 定义 topic 名称$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test_topic</code></pre><ul><li>消费消息</li></ul><pre><code>## 选项说明:##   --bootstrap-server kafka 服务连接的节点，支持多节点##   --from-beginning  标识从头消费（offset=1）##   --topic 定义 topic 名称$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic test_topic</code></pre><ul><li>查看某个 <code>Topic</code> 的详情</li></ul><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称$ bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic test_topic</code></pre><ul><li>查看某个 <code>Topic</code> 的 <code>consumer_offsets</code> 详情 </li></ul><pre><code>## 选项说明:##   --zookeeper zookeeper 服务 Host##   --topic 定义 topic 名称bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic __consumer_offsets</code></pre><ul><li>验证消息生产成功</li></ul><pre><code>## 选项说明:##   --broker-list kafka 服务连接的节点，支持多节点##   --topic 定义 topic 名称##   --time -1表示显示获取当前offset最大值，-2表示offset的最小值$ bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic test_topic --time -1</code></pre><ul><li>创建一个console consumer group</li></ul><pre><code>## 选项说明:##   --bootstrap-server kafka 服务连接的节点，支持多节点##   --from-beginning  标识从头消费（offset=1）##   --topic 定义 topic 名称##   --group 定义消费组名称$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --from-beginning --group new-consumer</code></pre><ul><li>获取该consumer group的group id</li></ul><pre><code>## 选项说明:##   --bootstrap-server kafka 服务连接的节点，支持多节点##   --list 显示消费组列表$ bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySpark之RDD入门</title>
      <link href="/articles/spark/pyspark-zhi-rdd-ru-men.html"/>
      <url>/articles/spark/pyspark-zhi-rdd-ru-men.html</url>
      
        <content type="html"><![CDATA[<h2 id="RDD的基本运算"><a href="#RDD的基本运算" class="headerlink" title="RDD的基本运算"></a>RDD的基本运算</h2><table><thead><tr><th align="left">RDD运算类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">转换（Transformation）</td><td align="left">转换运算将一个RDD转换为另一个RDD，但是由于RDD的lazy特性，转换运算不会立刻实际执行，它会等到执行到“动作”运算，才会实际执行。</td></tr><tr><td align="left">动作（Action）</td><td align="left">RDD执行动作运算之后，不会产生另一个RDD，它会产生数值、数组或写入文件系统；RDD执行动作运算后会立刻实际执行，并且连同之前的转换运算一起执行。</td></tr><tr><td align="left">持久化（Persistence）</td><td align="left">对于那些会重复使用的RDD， 可以将RDD持久化在内存中作为后续使用，以提高执行性能。</td></tr></tbody></table><h2 id="初始化-Spark-的上下环境"><a href="#初始化-Spark-的上下环境" class="headerlink" title="初始化 Spark 的上下环境"></a>初始化 Spark 的上下环境</h2><pre><code>from pyspark import SparkConf, SparkContextconf = SparkConf().setMaster("local").setAppName("My App")sc = SparkContext(conf = conf)</code></pre><h2 id="单个-RDD-“转换”运算"><a href="#单个-RDD-“转换”运算" class="headerlink" title="单个 RDD “转换”运算"></a>单个 RDD “转换”运算</h2><ol><li>创建RDD<blockquote><p>使用parallelize方法创建一个RDD</p></blockquote></li></ol><pre><code>intRDD = sc.parallelize([3,1,2,5,5])stringRDD = sc.parallelize(['Apple','Orange','Grape','Banana','Apple'])</code></pre><ol start="2"><li>collect()<blockquote><p>collect 可以把 RDD 类型的数据转换为 python 的数据类型</p></blockquote></li></ol><pre><code>print (intRDD.collect())[3, 1, 2, 5, 5]print (stringRDD.collect())['APPLE', 'Orange', 'Grape', 'Banana','Apple']</code></pre><ol start="3"><li>map()<blockquote><p>map 运算可以通过传入的函数，对RDD内每一个元素经过函数运算，并产生一个新的RDD；<br>下面的例子中，将intRDD中的每个元素加1之后返回，并转换为python数组；</p></blockquote></li></ol><pre><code>print (intRDD.map(lambda x:x+1).collect())[4, 2, 3, 6, 6]</code></pre><ol start="4"><li>filter()<blockquote><p>filter 运算可以用于对RDD内每一个元素进行筛选，并产生一个新的RDD；<br>下面的例子中，筛选intRDD中数字小于3的元素，筛选stringRDD中包含ra的字符串；</p></blockquote></li></ol><pre><code>print (intRDD.filter(lambda x: x&lt;3).collect())[1, 2]print (stringRDD.filter(lambda x:'ra' in x).collect())['Orange', 'Grape']</code></pre><ol start="5"><li>distinct()<blockquote><p>distinct 运算可以用于对RDD内重复的元素进行删除，并产生一个新的RDD；<br>下面的例子中，去除 intRDD 中的重复元素1；</p></blockquote></li></ol><pre><code>print (intRDD.distinct().collect())[1, 2, 3, 5]</code></pre><ol start="6"><li>randomSplit(weighs, *seed)<blockquote><p>randomSplit 运算将整个集合以随机数的方式按照比例分为多个RDD；<br>weights: 是一个数组,数组的长度即为划分成RDD的数量；<br>根据weight（权重值）将一个RDD划分成多个RDD,权重越高划分得到的元素较多的几率就越大；<br>seed: 是可选参数 ，作为random的种子；<br>下面的例子中，intRDD 按照0.4和0.6的比例将intRDD分为两个RDD；</p></blockquote></li></ol><pre><code>sRDD = intRDD.randomSplit([0.4,0.6])print (len(sRDD))2print (sRDD[0].collect())[3, 1]print (sRDD[1].collect())[2, 5, 5]</code></pre><ol start="7"><li>groupBy()<blockquote><p>groupBy 运算可以按照传入匿名函数的规则，将数据分为多个Array；<br>下面的例子中，将intRDD分为偶数和奇数：</p></blockquote></li></ol><pre><code>result = intRDD.groupBy(lambda x : x % 2).collect()print (sorted([(x, sorted(y)) for (x, y) in result]))[(0, [2]), (1, [1, 3, 5, 5])]</code></pre><h2 id="多个-RDD-“转换”运算"><a href="#多个-RDD-“转换”运算" class="headerlink" title="多个 RDD “转换”运算"></a>多个 RDD “转换”运算</h2><ol><li>创建RDD<blockquote><p>使用parallelize方法创建一个RDD</p></blockquote></li></ol><pre><code>intRDD1 = sc.parallelize([3,1,2,5,5])intRDD2 = sc.parallelize([5,6])intRDD3 = sc.parallelize([2,7])</code></pre><ol start="2"><li>union()<blockquote><p>使用union进行并集运算</p></blockquote></li></ol><pre><code>print (intRDD1.union(intRDD2).union(intRDD3).collect())[3, 1, 2, 5, 5, 5, 6, 2, 7] </code></pre><ol start="3"><li>intersection()<blockquote><p>使用intersection进行交集运算，取 RDD 的相同部分</p></blockquote></li></ol><pre><code>print (intRDD1.intersection(intRDD2).collect())[5] </code></pre><ol start="4"><li>subtract()<blockquote><p>使用subtract进行差集运算，取 RDD 的重复部分</p></blockquote></li></ol><pre><code>print (intRDD1.subtract(intRDD2).collect())[2, 1, 3]</code></pre><ol start="5"><li>cartesian()<blockquote><p>使用cartesian进行笛卡尔乘积运算</p></blockquote></li></ol><pre><code>print (intRDD1.cartesian(intRDD2).collect())[(3, 5), (3, 6), (1, 5), (1, 6), (2, 5), (2, 6), (5, 5), (5, 6), (5, 5), (5, 6)]</code></pre><h2 id="单个-RDD-“动作”运算"><a href="#单个-RDD-“动作”运算" class="headerlink" title="单个 RDD “动作”运算"></a>单个 RDD “动作”运算</h2><ol><li>创建RDD<blockquote><p>使用parallelize方法创建一个RDD</p></blockquote></li></ol><pre><code>intRDD = sc.parallelize([3,1,2,5,5])</code></pre><ol start="2"><li>读取元素<blockquote><p>可以使用下列命令读取RDD内的元素，这是Actions运算，所以会马上执行</p></blockquote></li></ol><pre><code># 取第一条数据print (intRDD.first())3# 取前两条数据print (intRDD.take(2))[3, 1]# 升序排列，并取前3条数据print (intRDD.takeOrdered(3))[1, 2, 3]# 降序排列，并取前3条数据print (intRDD.takeOrdered(3,lambda x:-x))[5, 5, 3]</code></pre><ol start="3"><li>统计功能<blockquote><p>可以将RDD内的元素进行统计运算</p></blockquote></li></ol><pre><code># 统计print (intRDD.stats())(count: 5, mean: 3.2, stdev: 1.6, max: 5, min: 1)# 最小值print (intRDD.min())1# 最大值print (intRDD.max())5# 标准差print (intRDD.stdev())1.6# 计数print (intRDD.count())5# 求和print (intRDD.sum())16# 平均print (intRDD.mean())3.2</code></pre><h2 id="单个-RDD-键值的“转换”运算"><a href="#单个-RDD-键值的“转换”运算" class="headerlink" title="单个 RDD 键值的“转换”运算"></a>单个 RDD 键值的“转换”运算</h2><blockquote><p>Spark RDD支持键值对运算，Key-Value运算是 mapreduce 运算的基础</p></blockquote><ol><li>创建RDD<blockquote><p>使用parallelize方法创建一个 RDD；<br>用元素类型为tuple元组的数组初始化 RDD；<br>每个tuple的第一个值将作为键，第二个元素将作为值；</p></blockquote></li></ol><pre><code>kvRDD1 = sc.parallelize([(3,4),(3,6),(5,6),(1,2)])</code></pre><ol start="2"><li>得到key和value值<blockquote><p>可以使用keys和values函数分别得到RDD的键数组和值数组</p></blockquote></li></ol><pre><code>print (kvRDD1.keys().collect())[3, 3, 5, 1]print (kvRDD1.values().collect())[4, 6, 6, 2]</code></pre><ol start="3"><li>筛选元素<blockquote><p>使用filter函数，可以按照键进行元素筛选，也可以通过值进行元素筛选；<br>注意：虽然RDD中是以键值对形式存在，但是本质上还是一个二元组，二元组的第一个值代表键，第二个值代表值；</p></blockquote></li></ol><pre><code># 筛选键的值小于5的数据print (kvRDD1.filter(lambda x:x[0] &lt; 5).collect())[(3, 4), (3, 6), (1, 2)]# 筛选值的值小于5的数据print (kvRDD1.filter(lambda x:x[1] &lt; 5).collect())[(3, 4), (1, 2)]</code></pre><ol start="4"><li>值运算<blockquote><p>可以使用mapValues方法处理value值；<br>下面的代码将value值进行了平方处理；</p></blockquote></li></ol><pre><code>print (kvRDD1.mapValues(lambda x:x**2).collect())[(3, 16), (3, 36), (5, 36), (1, 4)]</code></pre><ol start="5"><li>按照key排序<blockquote><p>可以使用sortByKey按照key进行排序，传入参数的默认值为true；<br>true 表示升序，false 表示倒序;</p></blockquote></li></ol><pre><code>print (kvRDD1.sortByKey().collect())[(1, 2), (3, 4), (3, 6), (5, 6)]print (kvRDD1.sortByKey(True).collect())[(1, 2), (3, 4), (3, 6), (5, 6)]print (kvRDD1.sortByKey(False).collect())[(5, 6), (3, 4), (3, 6), (1, 2)]</code></pre><ol start="6"><li>合并相同key值的数据<blockquote><p>可以使用reduceByKey函数对具有相同key值的数据进行合并；</p></blockquote></li></ol><pre><code>print (kvRDD1.reduceByKey(lambda x,y:x+y).collect())[(1, 2), (3, 10), (5, 6)]</code></pre><h2 id="多个-RDD-键值“转换”运算"><a href="#多个-RDD-键值“转换”运算" class="headerlink" title="多个 RDD 键值“转换”运算"></a>多个 RDD 键值“转换”运算</h2><ol><li>创建RDD<blockquote><p>使用parallelize方法创建一个 RDD；<br>用元素类型为tuple元组的数组初始化 RDD；<br>每个tuple的第一个值将作为键，第二个元素将作为值；</p></blockquote></li></ol><pre><code>kvRDD1 = sc.parallelize([(3,4),(3,6),(5,6),(1,2)])kvRDD2 = sc.parallelize([(3,8)])</code></pre><ol start="2"><li>内连接<blockquote><p>join运算可以将两个 RDD 按照相同的key值join起来；</p></blockquote></li></ol><pre><code>print (kvRDD1.join(kvRDD2).collect())[(3, (4, 8)), (3, (6, 8))] </code></pre><ol start="3"><li>左外连接<blockquote><p>leftOuterJoin运算可以将两个 RDD 左外连接起来；<br>如果kvRDD1的key值对应不到kvRDD2，就会显示None</p></blockquote></li></ol><pre><code>print (kvRDD1.leftOuterJoin(kvRDD2).collect())[(1, (2, None)), (3, (4, 8)), (3, (6, 8)), (5, (6, None))]</code></pre><ol start="4"><li>右外连接<blockquote><p>rightOuterJoin运算可以将两个 RDD 右外连接起来；<br>如果kvRDD2的key值对应不到kvRDD1，就会显示None</p></blockquote></li></ol><pre><code>print (kvRDD1.rightOuterJoin(kvRDD2).collect())[(3, (4, 8)), (3, (6, 8))]</code></pre><ol start="5"><li>删除相同key值数据<blockquote><p>使用subtractByKey运算会删除相同key值得数据：</p></blockquote></li></ol><pre><code>print (kvRDD1.subtractByKey(kvRDD2).collect())[(1, 2), (5, 6)] </code></pre><h2 id="单个-RDD-键值“动作”运算"><a href="#单个-RDD-键值“动作”运算" class="headerlink" title="单个 RDD 键值“动作”运算"></a>单个 RDD 键值“动作”运算</h2><ol><li>创建RDD<blockquote><p>使用parallelize方法创建一个 RDD；<br>用元素类型为tuple元组的数组初始化 RDD；<br>每个tuple的第一个值将作为键，第二个元素将作为值；</p></blockquote></li></ol><pre><code>kvRDD1 = sc.parallelize([(3,4),(3,6),(5,6),(1,2)])</code></pre><ol start="2"><li>读取数据<blockquote><p>可以使用下面的几种方式读取RDD的数据：</p></blockquote></li></ol><pre><code># 读取第一条数据print (kvRDD1.first())(3, 4)# 读取前两条数据print (kvRDD1.take(2))[(3, 4), (3, 6)]# 读取第一条数据的key值print (kvRDD1.first()[0])3# 读取第一条数据的value值print (kvRDD1.first()[1])4</code></pre><ol start="3"><li>按key值统计：<blockquote><p>使用countByKey函数可以统计各个key值对应的数据的条数；</p></blockquote></li></ol><pre><code>print (kvRDD1.countByKey().collect())defaultdict(&lt;type 'int'&gt;, {1: 1, 3: 2, 5: 1})</code></pre><ol start="4"><li>查找运算<blockquote><p>使用lookup函数可以根据输入的key值来查找对应的Value值：</p></blockquote></li></ol><pre><code>print (kvRDD1.lookup(3))[4, 6]</code></pre><h2 id="持久化操作"><a href="#持久化操作" class="headerlink" title="持久化操作"></a>持久化操作</h2><blockquote><p>spark RDD的持久化机制，可以将需要重复运算的RDD存储在内存中，以便大幅提升运算效率</p></blockquote><ol><li>persist()<blockquote><p>使用persist函数对RDD进行持久化</p></blockquote></li></ol><pre><code>from pyspark.storagelevel import StorageLevelkvRDD1.persist(StorageLevel.MEMORY_ONLY)</code></pre><p>在持久化的同时可以指定持久化存储等级：</p><table><thead><tr><th align="left">等级</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">MEMORY_ONLY</td><td align="left">以反序列化的JAVA对象的方式存储在JVM中. 如果内存不够， RDD的一些分区将不会被缓存， 这样当再次需要这些分区的时候，将会重新计算。这是默认的级别。</td></tr><tr><td align="left">MEMORY_AND_DISK</td><td align="left">以反序列化的JAVA对象的方式存储在JVM中. 如果内存不够， RDD的一些分区将将会缓存在磁盘上，再次需要的时候从磁盘读取。</td></tr><tr><td align="left">MEMORY_ONLY_SER</td><td align="left">以序列化JAVA对象的方式存储 (每个分区一个字节数组). 相比于反序列化的方式,这样更高效的利用空间， 尤其是使用快速序列化时。但是读取是CPU操作很密集。</td></tr><tr><td align="left">MEMORY_AND_DISK_SER</td><td align="left">与MEMORY_ONLY_SER相似, 区别是但内存不足时，存储在磁盘上而不是每次重新计算。</td></tr><tr><td align="left">DISK_ONLY</td><td align="left">只存储RDD在磁盘</td></tr><tr><td align="left">MEMORY_ONLY_2, MEMORY_AND_DISK_2, etc.</td><td align="left">与上面的级别相同，只不过每个分区的副本只存储在两个集群节点上。</td></tr><tr><td align="left">OFF_HEAP (experimental)</td><td align="left">将RDD以序列化的方式存储在 Tachyon. 与 MEMORY_ONLY_SER相比, OFF_HEAP减少了垃圾回收。允许执行体更小通过共享一个内存池。因此对于拥有较大堆内存和高并发的环境有较大的吸引力。更重要的是，因为RDD存储在Tachyon上，执行体的崩溃不会造成缓存的丢失。在这种模式下.Tachyon中的内存是可丢弃的，这样 Tachyon 对于从内存中挤出的块不会试图重建它。如果你打算使用Tachyon作为堆缓存，Spark提供了与Tachyon相兼容的版本。</td></tr></tbody></table><ol start="2"><li>unpersist()<blockquote><p>使用unpersist函数对RDD进行取消持久化；</p></blockquote></li></ol><pre><code>kvRDD1.unpersist()</code></pre><h2 id="整理回顾"><a href="#整理回顾" class="headerlink" title="整理回顾"></a>整理回顾</h2><p>想要了解更多，可以参照官网给出的官方文档：<a href="http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD</a></p><p>今天主要介绍了两种RDD，基本的RDD和Key-Value形式的RDD，介绍了他们的几种“转换”运算和“动作”运算，整理如下：</p><table><thead><tr><th align="left">RDD运算</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">基本RDD“转换”运算</td><td align="left">map（对各数据进行转换），filter（过滤符合条件的数据），distinct（去重运算），randomSplit（根据指定的比例随机分为N各RDD），groupBy（根据条件对数据进行分组），union（两个RDD取并集），intersection（两个RDD取交集），subtract（两个RDD取差集），cartesian（两个RDD进行笛卡尔积运算）</td></tr><tr><td align="left">基本RDD“动作”运算</td><td align="left">first（取第一条数据），take（取前几条数据），takeOrdered（排序后取前N条数据），统计函数</td></tr><tr><td align="left">Key-Value形式 RDD“转换”运算</td><td align="left">filter（过滤符合条件的数据），mapValues（对value值进行转换），sortByKey（根据key值进行排序），reduceByKey（合并相同key值的数据），join（内连接两个KDD），leftOuterJoin（左外连接两个KDD），rightOuterJoin（右外连接两个RDD），subtractByKey（相当于key值得差集运算）</td></tr><tr><td align="left">Key-Value形式 RDD“动作”运算</td><td align="left">first（取第一条数据），take（取前几条数据），countByKey（根据key值分组统计），lookup（根据key值查找value值）</td></tr><tr><td align="left">RDD持久化</td><td align="left">persist用于对RDD进行持久化，unpersist取消RDD的持久化，注意持久化的存储等级</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> PySpark </tag>
            
            <tag> RDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark 安装和配置</title>
      <link href="/articles/spark/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/spark/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Hadoop 版本：2.4.4</p></blockquote><h2 id="Homebrew安装Spark"><a href="#Homebrew安装Spark" class="headerlink" title="Homebrew安装Spark"></a>Homebrew安装Spark</h2><pre><code>$ brew install apache-spark$ cd /usr/local/Cellar/apache-spark/2.4.4/libexec</code></pre><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><pre><code>$ vim ~/.zshrcexport SPARK_HOME="/usr/local/Cellar/apache-spark/2.4.4/libexec"  export PATH="$SPARK_HOME/bin:$PATH"$ source ~/.zshrc</code></pre><h2 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h2><blockquote><p>在spark-shell中完成单词统计</p></blockquote><pre><code>$ spark-shell......scala&gt; val file = sc.textFile("/usr/local/Cellar/apache-spark/2.4.4/README.md")file: org.apache.spark.rdd.RDD[String] = /usr/local/Cellar/apache-spark/2.4.4/README.md MapPartitionsRDD[1] at textFile at &lt;console&gt;:24# 以空格为拆分标志，将文件中的每一行分割为多个单词scala&gt; val words = file.flatMap(line =&gt; line.split(" "))words: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[2] at flatMap at &lt;console&gt;:25# 对每一个单词进行计数scala&gt; val wordNumber = words.map(w =&gt; (w, 1))wordNumber: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[3] at map at &lt;console&gt;:25# 将单词进行分类合并，计算每个单词总的出现次数scala&gt; val wordCounts = wordNumber.reduceByKey(_+_)wordCounts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at &lt;console&gt;:25# 将所有单词及其出现次数打印出来scala&gt; wordsCounts.foreach(println)......</code></pre><h2 id="pyspark-启动Spark"><a href="#pyspark-启动Spark" class="headerlink" title="pyspark 启动Spark"></a>pyspark 启动Spark</h2><ul><li>环境变量设置</li></ul><pre><code>$ vim ~/.zshrc# 设置 python 版本，默认是2.7.xexport PYSPARK_PYTHON="python3"$ source ~/.zshrc</code></pre><ul><li>脚本的执行权限设置</li></ul><pre><code>$ cd /usr/local/Cellar/apache-spark/2.4.4/libexec/bin$ chmod a+x *$ cd /usr/local/Cellar/apache-spark/2.4.4/libexec/sbin$ chmod a+x *</code></pre><ul><li>启动 spark</li></ul><pre><code>$ pyspark......Using Python version 3.7.4 (default, Jul  9 2019 18:13:23)SparkSession available as 'spark'.# 初始化&gt;&gt;&gt; from pyspark import SparkConf, SparkContext&gt;&gt;&gt; conf = SparkConf().setMaster("local").setAppName("My App")&gt;&gt;&gt; sc = SparkContext(conf = conf)# 创建RDD&gt;&gt;&gt; intRDD = sc.parallelize([3,1,2,5,5])# collect（RDD -&gt; python 数据类型）&gt;&gt;&gt; print (intRDD.collect())[3, 1, 2, 5, 5]</code></pre><h2 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h2><ul><li>启动服务</li></ul><pre><code>$ /usr/local/opt/apache-spark/libexec/sbin/start-master.shstarting org.apache.spark.deploy.master.Master, logging to /usr/local/Cellar/apache-spark/2.4.4/libexec/logs/spark-bigo-org.apache.spark.deploy.master.Master-1-bigodeMBP.lan.out$ jps -lm</code></pre><ul><li>关闭服务</li></ul><pre><code>$ /usr/local/opt/apache-spark/libexec/sbin/stop-master.shstopping org.apache.spark.deploy.master.Master$ jps -lm</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 性能调优</title>
      <link href="/articles/hive/xing-neng-diao-you.html"/>
      <url>/articles/hive/xing-neng-diao-you.html</url>
      
        <content type="html"><![CDATA[<h2 id="Fetch抓取"><a href="#Fetch抓取" class="headerlink" title="Fetch抓取"></a>Fetch抓取</h2><p><strong>Fetch</strong> 抓取是指 <font color="red"><strong>Hive</strong> 中对某些情况的查询可以不必使用 <strong>MapReduce</strong> 计算</font>。</p><p>例如：SELECT * FROM employees;在这种情况下，Hive可以简单地读取employee对应的存储目录下的文件，然后输出查询结果到控制台。</p><p>在 <strong>hive-site.xml</strong> 文件中 <strong><em>hive.fetch.task.conversion</em></strong> 默认是 more，老版本hive默认是 minimal，<font color="red">该属性修改为more以后，在全局查找、字段查找、limit查找等都不走 mapreduce</font>。</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.fetch.task.conversion&lt;/name&gt;    &lt;value&gt;more&lt;/value&gt;    &lt;description&gt;      Expects one of [none, minimal, more].      Some select queries can be converted to single FETCH task minimizing latency.      Currently the query should be single sourced not having any subquery and should not have      any aggregations or distincts (which incurs RS), lateral views and joins.      0. none : disable hive.fetch.task.conversion      1. minimal : SELECT STAR, FILTER on partition columns, LIMIT only      2. more  : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)    &lt;/description&gt;  &lt;/property&gt;</code></pre><h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>大多数的Hadoop Job是需要Hadoop提供的完整的可扩展性来处理大数据集的。</p><p>不过，有时Hive的输入数据量是非常小的，在这种情况下，为查询触发执行任务消耗的时间可能会比实际job的执行时间要多的多。</p><p>对于大多数这种情况，Hive可以通过本地模式在单台机器上处理所有的任务，对于小数据集，执行时间可以明显被缩短。</p><p>用户可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化。</p><pre><code>// 开启本地mrset hive.exec.mode.local.auto=true;// 设置local mr的最大输入数据量，当输入数据量小于这个值时采用local mr的方式，默认为134217728，即128Mset hive.exec.mode.local.auto.inputbytes.max=50000000;// 设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4set hive.exec.mode.local.auto.input.files.max=10;</code></pre><h2 id="表的优化"><a href="#表的优化" class="headerlink" title="表的优化"></a>表的优化</h2><h3 id="小表-Join-大表"><a href="#小表-Join-大表" class="headerlink" title="小表 Join 大表"></a>小表 Join 大表</h3><p>将key相对分散，并且数据量小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；</p><p>再进一步，可以使用map join让小的维度表（1000条以下的记录条数）先进内存， 在map端完成reduce。</p><pre><code>// 打开 map join 功能（默认是打开的）set hive.auto.convert.join = true;</code></pre><p><font color="red">实际测试发现：新版的hive已经对小表JOIN大表和大表JOIN小表进行了优化。小表放在左边和右边已经没有明显区别。</font></p><h3 id="大表-Join-大表"><a href="#大表-Join-大表" class="headerlink" title="大表 Join 大表"></a>大表 Join 大表</h3><ul><li>配置历史服务器</li></ul><pre><code>// 配置 mapred-site.xml&lt;property&gt;    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;    &lt;value&gt;hadoop102:10020&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;    &lt;value&gt;hadoop102:19888&lt;/value&gt;&lt;/property&gt;</code></pre><ul><li>启动历史服务器</li></ul><pre><code>sbin/mr-jobhistory-daemon.sh start historyserver</code></pre><ul><li>查看jobhistory</li></ul><pre><code>http://192.168.1.102:19888/jobhistory</code></pre><ol><li><p>空KEY过滤</p><p> 有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。</p><p> 此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤，例如key对应的字段为空。</p><pre><code> hive (default)&gt; select n.* from (select * from nullidtable where id is not null) n left join ori o on n.id = o.id;</code></pre></li><li><p>空key转换</p><p> 有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的reducer上。</p><p> <strong>案例实操：</strong></p><ul><li><p>不随机分布空null值</p><pre><code>// 设置5个reduce个数set mapreduce.job.reduces = 5;// JOIN两张表insert overwrite table jointable select n.* from nullidtable n left join ori b on n.id = b.id;</code></pre><p>如图所示，可以看出来，出现了数据倾斜，某些reducer的资源消耗远大于其他reducer。<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-04.jpg" alt=""></p></li><li><p>随机分布空null值</p><pre><code>// 设置5个reduce个数set mapreduce.job.reduces = 5;// JOIN两张表insert overwrite table jointableselect n.* from nullidtable n full join ori o on case when n.id is null then concat('hive', rand()) else n.id end = o.id;</code></pre><p>如图所示，可以看出来，消除了数据倾斜，负载均衡reducer的资源消耗<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-05.jpg" alt=""></p></li></ul></li></ol><h3 id="MapJoin"><a href="#MapJoin" class="headerlink" title="MapJoin"></a>MapJoin</h3><p>如果不指定 MapJoin 或者不符合 MapJoin 的条件，那么Hive解析器会将Join操作转换成Common Join，即：在Reduce阶段完成join。容易发生数据倾斜。</p><p>可以用 MapJoin 把小表全部加载到内存在map端进行join，避免reducer处理。</p><ol><li><p>开启MapJoin参数设置</p><pre><code>// 设置自动选择 Mapjoin(默认为true)set hive.auto.convert.join = true;// 大表小表的阈值设置（默认25M一下认为是小表）：set hive.mapjoin.smalltable.filesize=25000000;</code></pre></li><li><p>MapJoin工作机制，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-06.jpg" alt=""></p></li></ol><h3 id="Group-By"><a href="#Group-By" class="headerlink" title="Group By"></a>Group By</h3><p>默认情况下，Map阶段同一Key数据分发给一个reduce，当一个key数据过大时就倾斜了。</p><p>并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作都可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p><p>开启Map端聚合参数设置</p><pre><code>// 是否在Map端进行聚合，默认为Truehive.map.aggr = true// 在Map端进行聚合操作的条目数目hive.groupby.mapaggr.checkinterval = 100000// 有数据倾斜的时候进行负载均衡（默认是false）hive.groupby.skewindata = true</code></pre><p><font color="red">当选项设定为 true，生成的查询计划会有两个MR Job。</font></p><p>第一个MR Job中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作，并输出结果，这样处理的结果是<font color="red">相同的Group By Key有可能被分发到不同的Reduce</font>中，从而达到负载均衡的目的；</p><p>第二个MR Job再根据预处理的数据结果按照Group By Key分布到Reduce中（这个过程可以保证相同的Group By Key被分布到同一个Reduce中），最后完成最终的聚合操作。</p><h3 id="Count-Distinct-去重统计"><a href="#Count-Distinct-去重统计" class="headerlink" title="Count(Distinct) 去重统计"></a>Count(Distinct) 去重统计</h3><p>数据量大的情况下，由于COUNT DISTINCT操作需要用一个Reduce Task来完成，这一个Reduce需要处理的数据量太大，就会导致整个Job很难完成，一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换。</p><ul><li>执行去重id查询</li></ul><pre><code>hive (default)&gt; select count(distinct id) from bigtable;Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 7.12 sec   HDFS Read: 120741990 HDFS Write: 7 SUCCESSTotal MapReduce CPU Time Spent: 7 seconds 120 msecOKc0100001Time taken: 23.607 seconds, Fetched: 1 row(s)</code></pre><ul><li>采用GROUP by去重id</li></ul><pre><code>hive (default)&gt; select count(id) from (select id from bigtable group by id) a;Stage-Stage-1: Map: 1  Reduce: 5   Cumulative CPU: 17.53 sec   HDFS Read: 120752703 HDFS Write: 580 SUCCESSStage-Stage-2: Map: 1  Reduce: 1   Cumulative CPU: 4.29 sec   HDFS Read: 9409 HDFS Write: 7 SUCCESSTotal MapReduce CPU Time Spent: 21 seconds 820 msecOK_c0100001Time taken: 50.795 seconds, Fetched: 1 row(s)</code></pre><p><font color="red">虽然会多用一个Job来完成，但在数据量大的情况下，这个绝对是值得的。</font></p><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>尽量避免笛卡尔积，join的时候不加on条件，或者无效的on条件，Hive只能使用1个reducer来完成笛卡尔积。</p><h3 id="行列过滤"><a href="#行列过滤" class="headerlink" title="行列过滤"></a>行列过滤</h3><p>列处理：在SELECT中，只拿需要的列，如果有，尽量使用分区过滤，少用 <font color="red">SELECT *</font>。<br>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在Where后面，那么就会先全表关联，之后再过滤。</p><p><strong>案例实操：</strong></p><ol><li>测试先关联两张表，再用where条件过滤</li></ol><pre><code>hive (default)&gt; select o.id from bigtable bjoin ori o on o.id = b.idwhere o.id &lt;= 10;</code></pre><p>Time taken: 34.406 seconds, Fetched: 100 row(s)</p><ol start="2"><li>通过子查询后，再关联表</li></ol><pre><code>hive (default)&gt; select b.id from bigtable bjoin (select id from ori where id &lt;= 10 ) o on b.id = o.id;</code></pre><p>Time taken: 30.058 seconds, Fetched: 100 row(s)</p><h3 id="动态分区调整"><a href="#动态分区调整" class="headerlink" title="动态分区调整"></a>动态分区调整</h3><p>关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置。</p><p>开启动态分区参数设置</p><pre><code>// 开启动态分区功能（默认true，开启）hive.exec.dynamic.partition=true// 设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区）hive.exec.dynamic.partition.mode=nonstrict// 在所有执行MR的节点上，最大一共可以创建多少个动态分区hive.exec.max.dynamic.partitions=1000// 在每个执行MR的节点上，最大可以创建多少个动态分区（该参数需要根据实际的数据来设定）// 比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错hive.exec.max.dynamic.partitions.pernode=100// 整个MR Job中，最大可以创建多少个HDFS文件hive.exec.max.created.files=100000// 当有空分区生成时，是否抛出异常（一般不需要设置）hive.error.on.empty.partition=false</code></pre><h3 id="数据按分区处理"><a href="#数据按分区处理" class="headerlink" title="数据按分区处理"></a>数据按分区处理</h3><p>详情参考：Hive DDL 部分内部讲解</p><h2 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h2><h3 id="合理设置Map数"><a href="#合理设置Map数" class="headerlink" title="合理设置Map数"></a>合理设置Map数</h3><ol><li>通常情况下，作业会通过input的目录产生一个或者多个map任务。</li></ol><p>主要的决定因素有：input的文件总个数，input的文件大小，集群设置的文件块大小。</p><ol start="2"><li>是不是map数越多越好？</li></ol><p>答案是否定的。如果一个任务有很多小文件（远远小于块大小128m），则每个小文件也会被当做一个块，用一个map任务来完成，而一个map任务启动和初始化的时间远远大于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的map数是受限的。</p><ol start="3"><li>是不是保证每个map处理接近128m的文件块，就高枕无忧了？</li></ol><p>答案也是不一定。比如有一个127m的文件，正常会用一个map去完成，但这个文件只有一个或者两个小字段，却有几千万的记录，如果map处理的逻辑比较复杂，用一个map任务去做，肯定也比较耗时。</p><p>针对上面的问题2和3，我们需要采取两种方式来解决：即减少map数和增加map数；</p><h3 id="小文件进行合并"><a href="#小文件进行合并" class="headerlink" title="小文件进行合并"></a>小文件进行合并</h3><p>在map执行前合并小文件，减少map数：CombineHiveInputFormat具有对小文件进行合并的功能（系统默认的格式）。</p><p>HiveInputFormat没有对小文件合并功能。</p><pre><code>set hive.input.format= org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</code></pre><h3 id="复杂文件增加Map数"><a href="#复杂文件增加Map数" class="headerlink" title="复杂文件增加Map数"></a>复杂文件增加Map数</h3><p>当input的文件都很大，任务逻辑复杂，map执行非常慢的时候，可以考虑增加Map数，来使得每个map处理的数据量减少，从而提高任务的执行效率。</p><p>增加map的方法为：根据computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M公式，调整maxSize最大值。让maxSize最大值低于blocksize就可以增加map的个数。</p><h3 id="合理设置Reduce数"><a href="#合理设置Reduce数" class="headerlink" title="合理设置Reduce数"></a>合理设置Reduce数</h3><ol><li>调整reduce个数方法一</li></ol><pre><code>// 每个Reduce处理的数据量默认是256MBhive.exec.reducers.bytes.per.reducer=256000000// 每个任务最大的reduce数，默认为1009hive.exec.reducers.max=1009// 计算reducer数的公式N=min(参数2，总输入数据量/参数1)</code></pre><ol start="2"><li>调整reduce个数方法二</li></ol><p>在hadoop的mapred-default.xml文件中修改</p><pre><code>设置每个job的Reduce个数set mapreduce.job.reduces = 15;</code></pre><ol start="3"><li><p>reduce个数并不是越多越好</p><ul><li>过多的启动和初始化reduce也会消耗时间和资源；</li><li>另外，有多少个reduce，就会有多少个输出文件，如果生成了很多个小文件，那么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；</li></ul><p>在设置reduce个数的时候也需要考虑这两个原则：<font color="red">处理大数据量利用合适的reduce数；使单个reduce任务处理数据量大小要合适；</font></p></li></ol><h2 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h2><p>Hive会将一个查询转化成一个或者多个阶段。这样的阶段可以是MapReduce阶段、抽样阶段、合并阶段、limit阶段。或者Hive执行过程中可能需要的其他阶段。默认情况下，Hive一次只会执行一个阶段。不过，某个特定的job可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个job的执行时间缩短。不过，如果有更多的阶段可以并行执行，那么job可能就越快完成。</p><p>通过设置参数hive.exec.parallel值为true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果job中并行阶段增多，那么集群利用率就会增加。</p><pre><code>// 打开任务并行执行set hive.exec.parallel=true;// 同一个sql允许最大并行度，默认为8。set hive.exec.parallel.thread.number=16;</code></pre><p>当然，得是在系统资源比较空闲的时候才有优势，否则没资源，并行也起不来。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>Hive提供了一个严格模式，可以防止用户执行那些可能意向不到的不好的影响的查询。</p><p>通过设置属性hive.mapred.mode值为 <strong>strict</strong>，默认是非严格模式 <strong>nonstrict</strong>。</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.mapred.mode&lt;/name&gt;    &lt;value&gt;strict&lt;/value&gt;    &lt;description&gt;      The mode in which the Hive operations are being performed.       In strict mode, some risky queries are not allowed to run. They include:        Cartesian Product.        No partition being picked up for a query.        Comparing bigints and strings.        Comparing bigints and doubles.        Orderby without limit.    &lt;/description&gt;&lt;/property&gt;</code></pre><p>开启严格模式可以禁止3种类型的查询：</p><ul><li><p>对于分区表，<font color="red">除非where语句中含有分区字段过滤条件来限制范围，否则不允许执行。</font><br>换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</p></li><li><p>对于<font color="red">使用了order by语句的查询，要求必须使用limit语句。</font><br>因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间。</p></li><li><p><font color="red">限制笛卡尔积的查询。</font><br>对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</p></li></ul><h2 id="JVM重用"><a href="#JVM重用" class="headerlink" title="JVM重用"></a>JVM重用</h2><p>JVM重用是Hadoop调优参数的内容，其对Hive的性能具有非常大的影响，特别是对于很难避免<font color="red">小文件的场景或task特别多的场景，这类场景大多数执行时间都很短。</font></p><p>Hadoop的默认配置通常是使用派生JVM来执行map和Reduce任务的。这时JVM的启动过程可能会造成相当大的开销，尤其是执行的job包含有成百上千task任务的情况。<font color="red">JVM重用可以使得JVM实例在同一个job中重新使用N次。</font>N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间，具体多少需要根据具体业务场景测试得出。</p><pre><code>&lt;property&gt;  &lt;name&gt;mapreduce.job.jvm.numtasks&lt;/name&gt;  &lt;value&gt;10&lt;/value&gt;  &lt;description&gt;How many tasks to run per jvm. If set to -1, there is  no limit.   &lt;/description&gt;&lt;/property&gt;</code></pre><p>这个功能的缺点是，开启JVM重用将一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个“不平衡的”job中有某几个reduce task执行的时间要比其他Reduce task消耗的时间多的多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放。</p><h2 id="推测执行"><a href="#推测执行" class="headerlink" title="推测执行"></a>推测执行</h2><p>在分布式集群环境下，因为程序Bug（包括Hadoop本身的bug），负载不均衡或者资源分布不均等原因，会造成同一个作业的多个任务之间运行速度不一致，有些任务的运行速度可能明显慢于其他任务（比如一个作业的某个任务进度只有50%，而其他所有任务已经运行完毕），则这些任务会拖慢作业的整体执行进度。为了避免这种情况发生，Hadoop采用了推测执行（Speculative Execution）机制，它根据一定的法则推测出“拖后腿”的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理同一份数据，并最终选用最先成功运行完成任务的计算结果作为最终结果。</p><p>设置开启推测执行参数：Hadoop的mapred-site.xml文件中进行配置</p><pre><code>&lt;property&gt;  &lt;name&gt;mapreduce.map.speculative&lt;/name&gt;  &lt;value&gt;true&lt;/value&gt;  &lt;description&gt;    If true, then multiple instances of some map tasks may be executed in parallel.  &lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;mapreduce.reduce.speculative&lt;/name&gt;  &lt;value&gt;true&lt;/value&gt;  &lt;description&gt;    If true, then multiple instances of some reduce tasks may be executed in parallel.  &lt;/description&gt;&lt;/property&gt;</code></pre><p>不过hive本身也提供了配置项来控制reduce-side的推测执行：</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.mapred.reduce.tasks.speculative.execution&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;    &lt;description&gt;      Whether speculative execution for reducers should be turned on.     &lt;/description&gt;  &lt;/property&gt;</code></pre><p>关于调优这些推测执行变量，还很难给一个具体的建议。如果用户对于运行时的偏差非常敏感的话，那么可以将这些功能关闭掉。如果用户因为输入数据量很大而需要执行长时间的map或者Reduce task的话，那么启动推测执行造成的浪费是非常巨大大。</p><h2 id="执行计划（Explain）"><a href="#执行计划（Explain）" class="headerlink" title="执行计划（Explain）"></a>执行计划（Explain）</h2><ol><li>基本语法</li></ol><pre><code>EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query</code></pre><ol start="2"><li>案例实操</li></ol><pre><code>// 查看下面这条语句的执行计划hive (default)&gt; explain select deptno, avg(sal) avg_sal from emp group by deptno;// 查看详细执行计划hive (default)&gt; explain extended select deptno, avg(sal) avg_sal from emp group by deptno;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 压缩和存储</title>
      <link href="/articles/hive/ya-suo-he-cun-chu.html"/>
      <url>/articles/hive/ya-suo-he-cun-chu.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hadoop压缩配置"><a href="#Hadoop压缩配置" class="headerlink" title="Hadoop压缩配置"></a>Hadoop压缩配置</h2><h3 id="MR支持的压缩编码"><a href="#MR支持的压缩编码" class="headerlink" title="MR支持的压缩编码"></a>MR支持的压缩编码</h3><table><thead><tr><th align="left">压缩格式</th><th align="left">工具</th><th align="left">算法</th><th align="left">文件扩展名</th><th align="left">是否可切分</th></tr></thead><tbody><tr><td align="left">DEFAULT</td><td align="left">无</td><td align="left">DEFAULT</td><td align="left">.deflate</td><td align="left">否</td></tr><tr><td align="left">Gzip</td><td align="left">gzip</td><td align="left">DEFAULT</td><td align="left">.gz</td><td align="left">否</td></tr><tr><td align="left">bzip2</td><td align="left">bzip2</td><td align="left">bzip2</td><td align="left">.bz2</td><td align="left">是</td></tr><tr><td align="left">LZO</td><td align="left">lzop</td><td align="left">LZO</td><td align="left">.lzo</td><td align="left">是</td></tr><tr><td align="left">Snappy</td><td align="left">无</td><td align="left">Snappy</td><td align="left">.snappy</td><td align="left">否</td></tr></tbody></table><p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示：</p><table><thead><tr><th align="left">压缩格式</th><th align="left">对应的编码/解码器</th></tr></thead><tbody><tr><td align="left">DEFAULT</td><td align="left">org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td align="left">Gzip</td><td align="left">org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td align="left">bzip2</td><td align="left">org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td align="left">LZO</td><td align="left">com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td align="left">Snappy</td><td align="left">org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较：</p><table><thead><tr><th align="left">压缩算法</th><th align="left">原始文件大小</th><th align="left">压缩文件大小</th><th align="left">压缩速度</th><th align="left">解压速度</th></tr></thead><tbody><tr><td align="left">Gzip</td><td align="left">8.3GB</td><td align="left">1.8GB</td><td align="left">17.5MB/s</td><td align="left">58MB/s</td></tr><tr><td align="left">bzip2</td><td align="left">8.3GB</td><td align="left">1.1GB</td><td align="left">2.4MB/s</td><td align="left">9.5MB/s</td></tr><tr><td align="left">LZO</td><td align="left">8.3GB</td><td align="left">2.9GB</td><td align="left">49.3MB/s</td><td align="left">74.6MB/s</td></tr></tbody></table><h3 id="压缩参数配置"><a href="#压缩参数配置" class="headerlink" title="压缩参数配置"></a>压缩参数配置</h3><p>要在Hadoop中启用压缩，可以配置如下参数（mapred-site.xml文件中）：</p><table><thead><tr><th align="left">参数</th><th align="left">默认值</th><th align="left">阶段</th><th align="left">建议</th></tr></thead><tbody><tr><td align="left">io.compression.codecs <br>（在core-site.xml中配置）</td><td align="left">org.apache.hadoop.io<br>.compress.DefaultCodec,<br><br>org.apache.hadoop.io<br>.compress.GzipCodec,<br><br>org.apache.hadoop.io<br>.compress.BZip2Codec,<br><br>org.apache.hadoop.io<br>.compress.Lz4Codec</td><td align="left">输入压缩</td><td align="left">Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td align="left">mapreduce.map.output.compress</td><td align="left">false</td><td align="left">mapper输出</td><td align="left">这个参数设为true启用压缩</td></tr><tr><td align="left">mapreduce.map.output<br>.compress.codec</td><td align="left">org.apache.hadoop.io<br>.compress.DefaultCodec</td><td align="left">mapper输出</td><td align="left">使用LZO、LZ4或snappy编解码器在此阶段压缩数据</td></tr><tr><td align="left">mapreduce.output.<br>fileoutputformat.compress</td><td align="left">false</td><td align="left">reducer输出</td><td align="left">这个参数设为true启用压缩</td></tr><tr><td align="left">mapreduce.output.<br>fileoutputformat.compress.codec</td><td align="left">org.apache.hadoop.io<br>.compress.DefaultCodec</td><td align="left">reducer输出</td><td align="left">使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td align="left">mapreduce.output.<br>fileoutputformat.compress.type</td><td align="left">RECORD</td><td align="left">reducer输出</td><td align="left">SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><h2 id="开启Map输出阶段压缩"><a href="#开启Map输出阶段压缩" class="headerlink" title="开启Map输出阶段压缩"></a>开启Map输出阶段压缩</h2><p>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量。具体配置如下：</p><pre><code>// 开启hive中间传输数据压缩功能hive (default)&gt;set hive.exec.compress.intermediate=true;// 开启mapreduce中map输出压缩功能hive (default)&gt;set mapreduce.map.output.compress=true;// 设置mapreduce中map输出数据的压缩方式hive (default)&gt;set mapreduce.map.output.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;// 执行查询语句hive (default)&gt; select count(ename) name from emp;</code></pre><h2 id="开启Reduce输出阶段压缩"><a href="#开启Reduce输出阶段压缩" class="headerlink" title="开启Reduce输出阶段压缩"></a>开启Reduce输出阶段压缩</h2><p>当Hive将输出写入到表中时，输出内容同样可以进行压缩。</p><p>属性hive.exec.compress.output控制着这个功能。</p><p>用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。</p><p>用户可以通过在查询语句或执行脚本中设置这个值为true，来开启输出结果压缩功能。</p><pre><code>// 开启hive最终输出数据压缩功能hive (default)&gt;set hive.exec.compress.output=true;// 开启mapreduce最终输出数据压缩hive (default)&gt;set mapreduce.output.fileoutputformat.compress=true;// 设置mapreduce最终数据输出压缩方式hive (default)&gt; set mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;// 设置mapreduce最终数据输出压缩为块压缩hive (default)&gt; set mapreduce.output.fileoutputformat.compress.type=BLOCK;// 测试一下输出结果是否是压缩文件hive (default)&gt; insert overwrite local directory '/opt/module/datas/distribute-result' select * from emp distribute by deptno sort by empno desc;</code></pre><h2 id="Hive-文件存储格式"><a href="#Hive-文件存储格式" class="headerlink" title="Hive 文件存储格式"></a>Hive 文件存储格式</h2><p>Hive支持的存储数的格式主要有：TEXTFILE、SEQUENCEFILE、ORC、PARQUET。</p><h3 id="列式存储和行式存储"><a href="#列式存储和行式存储" class="headerlink" title="列式存储和行式存储"></a>列式存储和行式存储</h3><p>如图所示左边为逻辑表，右边第一个为行式存储，第二个为列式存储。</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-07.jpg" alt=""></p><ul><li><p>行存储的特点</p><p>查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。</p></li><li><p>列存储的特点</p><p>因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法。</p></li></ul><p><font color="red">TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的；</font></p><font color="red"></font><p><font color="red">ORC和PARQUET是基于列式存储的。</font></p><h3 id="TextFile格式"><a href="#TextFile格式" class="headerlink" title="TextFile格式"></a>TextFile格式</h3><p>默认格式，数据不做压缩，磁盘开销大，数据解析开销大。</p><p>可结合Gzip、Bzip2使用，但使用Gzip这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。</p><h3 id="Orc格式"><a href="#Orc格式" class="headerlink" title="Orc格式"></a>Orc格式</h3><p>Orc (Optimized Row Columnar)是Hive 0.11版里引入的新的存储格式。</p><p>如图所示可以看到每个Orc文件由1个或多个stripe组成，每个stripe250MB大小，这个Stripe实际相当于RowGroup概念，不过大小由4MB-&gt;250MB，这样应该能提升顺序读的吞吐率。每个Stripe里有三部分组成，分别是Index Data，Row Data，Stripe Footer：</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-08.jpg" alt=""></p><ul><li>Index Data：一个轻量级的index，默认是<font color="red">每隔1W行做一个索引。</font>这里做的索引应该只是记录某行的各字段在Row Data中的offset。</li><li>Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个Stream来存储。</li><li>Stripe Footer：存的是各个Stream的类型，长度等信息。<br>每个文件有一个File Footer，这里面存的是每个Stripe的行数，每个Column的数据类型信息等；每个文件的尾部是一个PostScript，这里面记录了整个文件的压缩类型以及FileFooter的长度信息等。在读取文件时，会seek到文件尾部读PostScript，从里面解析到File Footer长度，再读FileFooter，从里面解析到各个Stripe信息，再读各个Stripe，即从后往前读。</li></ul><h3 id="Parquet格式"><a href="#Parquet格式" class="headerlink" title="Parquet格式"></a>Parquet格式</h3><p>Parquet是面向分析型业务的列式存储格式，由Twitter和Cloudera合作开发，2015年5月从Apache的孵化器里毕业成为Apache顶级项目。</p><p>Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，<font color="red">因此Parquet格式文件是自解析的。</font></p><p>通常情况下，在存储Parquet数据的时候会按照Block大小设置行组的大小，由于一般情况下每一个Mapper任务处理数据的最小单位是一个Block，这样可以把<font color="red">每一个行组由一个Mapper任务处理，增大任务执行并行度。</font></p><p>Parquet文件的格式如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-09.jpg" alt=""></p><p>上图展示了一个Parquet文件的内容，一个文件中可以存储多个行组，文件的首位都是该文件的Magic Code，用于校验它是否是一个Parquet文件，Footer length记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的Schema信息。</p><p>除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在Parquet中，有三种类型的页：<font color="red">数据页、字典页和索引页。</font></p><p>数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前Parquet中还不支持索引页。</p><h2 id="存储方式和压缩总结"><a href="#存储方式和压缩总结" class="headerlink" title="存储方式和压缩总结"></a>存储方式和压缩总结</h2><p>在实际的项目开发当中，hive表的数据存储格式一般选择：orc或parquet。压缩方式一般选择snappy，lzo。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive HQL函数</title>
      <link href="/articles/hive/hql-han-shu.html"/>
      <url>/articles/hive/hql-han-shu.html</url>
      
        <content type="html"><![CDATA[<h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><h3 id="空字段赋值函数（NVL）"><a href="#空字段赋值函数（NVL）" class="headerlink" title="空字段赋值函数（NVL）"></a>空字段赋值函数（NVL）</h3><p><strong>NVL</strong> 给值为NULL的数据赋值，它的格式是NVL( string1, replace_with)。</p><p>它的功能是如果string1为NULL，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都为NULL，则返回NULL。</p><pre><code># 如果员工的comm为NULL，则用-1代替hive (default)&gt; select nvl(comm, -1) from emp;# 如果员工的comm为NULL，则用领导id代替hive (default)&gt; select nvl(comm,mgr) from emp;</code></pre><h3 id="条件判断函数（CASE-WHEN）"><a href="#条件判断函数（CASE-WHEN）" class="headerlink" title="条件判断函数（CASE WHEN）"></a>条件判断函数（CASE WHEN）</h3><pre><code>select   dept_id,  sum(case sex when '男' then 1 else 0 end) male_count,  sum(case sex when '女' then 1 else 0 end) female_countfrom   emp_sexgroup by  dept_id;</code></pre><h3 id="行转列函数（CONCAT）"><a href="#行转列函数（CONCAT）" class="headerlink" title="行转列函数（CONCAT）"></a>行转列函数（CONCAT）</h3><ol><li><p>函数说明</p><ul><li><strong>CONCAT(string A/col, string B/col…)</strong> 返回输入字符串连接后的结果，支持任意个输入字符串;</li><li><strong>CONCAT_WS(separator, str1, str2,…)</strong> 它是一个特殊形式的 CONCAT()。第一个参数剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间;</li><li><strong>COLLECT_SET(col)</strong> 函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段。</li></ul></li><li><p>数据准备</p></li></ol><table><thead><tr><th align="left">name</th><th align="left">constellation</th><th align="left">blood_type</th></tr></thead><tbody><tr><td align="left">孙悟空</td><td align="left">白羊座</td><td align="left">A</td></tr><tr><td align="left">大海</td><td align="left">射手座</td><td align="left">A</td></tr><tr><td align="left">宋宋</td><td align="left">白羊座</td><td align="left">B</td></tr><tr><td align="left">猪八戒</td><td align="left">白羊座</td><td align="left">A</td></tr><tr><td align="left">凤姐</td><td align="left">射手座</td><td align="left">A</td></tr></tbody></table><ol start="3"><li>需求：把星座和血型一样的人归类到一起。结果如下</li></ol><pre><code>射手座,A            大海|凤姐白羊座,A            孙悟空|猪八戒白羊座,B            宋宋</code></pre><ol start="4"><li>创建本地constellation.txt，导入数据</li></ol><pre><code>$ vi constellation.txt孙悟空    白羊座    A大海      射手座    A宋宋      白羊座    B猪八戒  白羊座    A凤姐      射手座    A</code></pre><ol start="5"><li>创建hive表并导入数据</li></ol><pre><code>create table person_info(  name string,   constellation string,   blood_type string) row format delimited fields terminated by "\t";load data local inpath “/opt/module/datas/person_info.txt” into table person_info;</code></pre><ol start="6"><li>按需求查询数据</li></ol><pre><code>select    t1.base,    concat_ws('|', collect_set(t1.name)) namefrom    (select        name,        concat(constellation, ",", blood_type) base    from        person_info) t1group by    t1.base;</code></pre><h3 id="列转行函数（EXPLODE）"><a href="#列转行函数（EXPLODE）" class="headerlink" title="列转行函数（EXPLODE）"></a>列转行函数（EXPLODE）</h3><ol><li>函数说明</li></ol><p>EXPLODE(col)：将hive一列中复杂的array或者map结构拆分成多行。</p><p>LATERAL VIEW<br>用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias<br>解释：用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p><ol start="2"><li>数据准备</li></ol><table><thead><tr><th align="left">movie</th><th align="left">category</th></tr></thead><tbody><tr><td align="left">《疑犯追踪》</td><td align="left">悬疑,动作,科幻,剧情</td></tr><tr><td align="left">《Lie to me》</td><td align="left">悬疑,警匪,动作,心理,剧情</td></tr><tr><td align="left">《战狼2》</td><td align="left">战争,动作,灾难</td></tr></tbody></table><ol start="3"><li>需求：将电影分类中的数组数据展开，结果如下</li></ol><pre><code>《疑犯追踪》      悬疑《疑犯追踪》      动作《疑犯追踪》      科幻《疑犯追踪》      剧情《Lie to me》   悬疑《Lie to me》   警匪《Lie to me》   动作《Lie to me》   心理《Lie to me》   剧情《战狼2》        战争《战狼2》        动作《战狼2》        灾难</code></pre><ol start="4"><li>创建本地movie.txt，导入数据</li></ol><pre><code>$ vi movie.txt《疑犯追踪》    悬疑,动作,科幻,剧情《Lie to me》    悬疑,警匪,动作,心理,剧情《战狼2》    战争,动作,灾难</code></pre><ol start="5"><li>创建hive表并导入数据</li></ol><pre><code>create table movie_info(    movie string,     category array&lt;string&gt;) row format delimited fields terminated by "\t"collection items terminated by ",";load data local inpath "/opt/module/datas/movie.txt" into table movie_info;</code></pre><ol start="6"><li>按需求查询数据</li></ol><pre><code>select movie, category_namefrom movie_info lateral view explode(category) table_tmp as category_name;</code></pre><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><ol><li><p>函数说明</p><ul><li><strong>OVER()</strong> 指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化</li><li><strong>CURRENT ROW</strong> 当前行</li><li><strong>n PRECEDING</strong> 往前n行数据</li><li><strong>n FOLLOWING</strong> 往后n行数据</li><li><strong>UNBOUNDED</strong> 起点，UNBOUNDED PRECEDING 表示从前面的起点， UNBOUNDED FOLLOWING表示到后面的终点</li><li><strong>LAG(col,n)</strong> 往前第n行数据</li><li><strong>LEAD(col,n)</strong> 往后第n行数据</li><li><strong>NTILE(n)</strong> 把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。</li></ul><blockquote><p>注意：n必须为int类型。</p></blockquote></li><li><p>数据准备</p></li></ol><pre><code>| name  | orderdate  | cost  || :---- | :--------- | :---- || jack  | 2017-01-01 | 10    || tony  | 2017-01-02 | 15    || jack  | 2017-02-03 | 23    || tony  | 2017-01-04 | 29    || jack  | 2017-01-05 | 46    || jack  | 2017-04-06 | 42    || tony  | 2017-01-07 | 50    || jack  | 2017-01-08 | 55    || mart  | 2017-04-08 | 62    || mart  | 2017-04-09 | 68    || neil  | 2017-05-10 | 12    || mart  | 2017-04-11 | 75    || neil  | 2017-06-12 | 80    || mart  | 2017-04-13 | 94    |</code></pre><ol start="3"><li><p>需求</p><ul><li>查询在2017年4月份购买过的顾客及总人数</li><li>查询顾客的购买明细及月购买总额</li><li>上述的场景,要将cost按照日期进行累加</li><li>查询顾客上次的购买时间</li><li>查询前20%时间的订单信息</li></ul></li><li><p>创建本地business.txt，导入数据</p></li></ol><pre><code>$ vi business.txtjack,2017-01-01,10tony,2017-01-02,15jack,2017-02-03,23tony,2017-01-04,29jack,2017-01-05,46jack,2017-04-06,42tony,2017-01-07,50jack,2017-01-08,55mart,2017-04-08,62mart,2017-04-09,68neil,2017-05-10,12mart,2017-04-11,75neil,2017-06-12,80mart,2017-04-13,94</code></pre><ol start="5"><li>创建hive表并导入数据</li></ol><pre><code>create table business(  name string,   orderdate string,  cost int)row format delimited fields terminated by ',';load data local inpath "/opt/module/datas/business.txt" into table business;</code></pre><ol start="6"><li><p>按需求查询数据</p><ul><li><p>查询在2017年4月份购买过的顾客及总人数</p><pre><code> select name, count(*) over ()  from business  where substring(orderdate, 1, 7) = '2015-04'  group by name;</code></pre></li><li><p>查询顾客的购买明细及月购买总额</p><pre><code> select name, orderdate, cost, sum(cost) over(partition by month(orderdate))  from business;</code></pre></li><li><p>上述的场景,要将cost按照日期进行累加</p><pre><code> select name,orderdate,cost,  sum(cost) over() as sample1,--所有行相加  sum(cost) over(partition by name) as sample2,--按name分组，组内数据相加  sum(cost) over(partition by name order by orderdate) as sample3,--按name分组，组内数据累加  sum(cost) over(partition by name order by orderdate rows between UNBOUNDED PRECEDING and current row ) as sample4 ,--和sample3一样,由起点到当前行的聚合  sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING and current row) as sample5, --当前行和前面一行做聚合  sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING AND 1 FOLLOWING ) as sample6,--当前行和前边一行及后面一行  sum(cost) over(partition by name order by orderdate rows between current row and UNBOUNDED FOLLOWING ) as sample7 --当前行及后面所有行  from business;</code></pre></li><li><p>查看顾客上次的购买时间</p><pre><code> select name,orderdate,cost,  lag(orderdate,1,'1900-01-01') over(partition by name order by orderdate ) as time1, lag(orderdate,2) over (partition by name order by orderdate) as time2  from business;</code></pre></li><li><p>查询前20%时间的订单信息</p><pre><code> select * from (     select name,orderdate,cost, ntile(5) over(order by orderdate) sorted     from business ) t where sorted = 1;</code></pre></li></ul></li></ol><h3 id="排名函数（Rank）"><a href="#排名函数（Rank）" class="headerlink" title="排名函数（Rank）"></a>排名函数（Rank）</h3><ol><li><p>函数说明</p><ul><li><strong>RANK()</strong> 排序相同时会重复，总数不会变</li><li><strong>DENSE_RANK()</strong> 排序相同时会重复，总数会减少</li><li><strong>ROW_NUMBER()</strong> 会根据顺序计算</li></ul></li><li><p>数据准备</p></li></ol><pre><code>| name  | subject  | score || :---- | :------- | :---- || 孙悟空 | 语文      | 87    || 孙悟空 | 数学      | 95    || 孙悟空 | 英语      | 68    || 大海   | 语文      | 94    || 大海   | 数学      | 56    || 大海   | 英语      | 84    || 宋宋   | 语文      | 64    || 宋宋   | 数学      | 86    || 宋宋   | 英语      | 84    || 婷婷   | 语文      | 65    || 婷婷   | 数学      | 85    || 婷婷   | 英语      | 78    |</code></pre><ol start="3"><li>需求：计算没门学科成绩排名，结果如下</li></ol><pre><code>name    subject score   rp      drp     rmp孙悟空  数学    95      1       1       1宋宋    数学    86      2       2       2婷婷    数学    85      3       3       3大海    数学    56      4       4       4宋宋    英语    84      1       1       1大海    英语    84      1       1       2婷婷    英语    78      3       2       3孙悟空  英语    68      4       3       4大海    语文    94      1       1       1孙悟空  语文    87      2       2       2婷婷    语文    65      3       3       3宋宋    语文    64      4       4       4</code></pre><ol start="4"><li>创建本地movie.txt，导入数据</li></ol><pre><code>$ vi score.txt孙悟空,语文,87孙悟空,数学,95孙悟空,英语,68大海,语文,94大海,数学,56大海,英语,84宋宋,语文,64宋宋,数学,86宋宋,英语,84婷婷,语文,65婷婷,数学,85婷婷,英语,78</code></pre><ol start="5"><li>创建hive表并导入数据</li></ol><pre><code>create table score(  name string,  subject string,   score int) row format delimited fields terminated by "\t";load data local inpath '/opt/module/datas/score.txt' into table score;</code></pre><ol start="6"><li>按需求查询数据</li></ol><pre><code>select name,subject,score,rank() over(partition by subject order by score desc) rp,dense_rank() over(partition by subject order by score desc) drp,row_number() over(partition by subject order by score desc) rmpfrom score;</code></pre><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><ul><li>查看系统自带的函数</li></ul><pre><code>hive (default)&gt; show functions;</code></pre><ul><li>显示自带的函数的用法</li></ul><pre><code>hive (default)&gt; desc function upper;</code></pre><ul><li>详细显示自带的函数的用法</li></ul><pre><code>hive (default)&gt; desc function extended upper;</code></pre><h2 id="自定义函数-UDF"><a href="#自定义函数-UDF" class="headerlink" title="自定义函数(UDF)"></a>自定义函数(UDF)</h2><p>Hive 自带了一些函数，比如：max/min等，但是数量有限，可以通过自定义UDF来方便的扩展。</p><p>当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（UDF：user-defined function）。</p><ol><li><p>根据用户自定义函数类别分为以下三种</p><ul><li>UDF（User-Defined-Function）一进一出</li><li>UDAF（User-Defined Aggregation Function）聚集函数，多进一出，类似于：count/max/min</li><li>UDTF（User-Defined Table-Generating Functions）一进多出，如lateral view explore()</li></ul></li><li><p>官方文档地址：<a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank" rel="noopener">前去查看</a></p></li><li><p>编程步骤</p><ul><li><p>继承org.apache.hadoop.hive.ql.UDF</p></li><li><p>需要实现evaluate函数，evaluate函数支持重载；</p></li><li><p>在hive的命令行窗口创建函数</p><pre><code> # 添加jar add jar linux_jar_path # 创建function， create [temporary] function [dbname.]function_name AS class_name;</code></pre></li></ul></li><li><p>注意事项</p><ul><li>UDF必须要有返回类型，可以返回null，但是返回类型不能为void；</li></ul></li><li><p>实战：自定义UDF函数</p><ul><li><p>创建一个Maven工程Hive</p></li><li><p>导入依赖</p><pre><code> &lt;dependencies&gt;     &lt;!-- https://mvnrepository.com/artifact/org.apache.hive/hive-exec --&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;       &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;       &lt;version&gt;1.2.1&lt;/version&gt;     &lt;/dependency&gt; &lt;/dependencies&gt;</code></pre><ul><li><p>创建一个类</p><pre><code>package com.philcode.hive;import org.apache.hadoop.hive.ql.exec.UDF;public class Lower extends UDF { public String evaluate (final String s) {   if (s == null) {     return null;   }   return s.toLowerCase(); }}</code></pre></li><li><p>打成jar包上传到服务器 /opt/module/jars/udf.jar</p></li><li><p>将jar包添加到hive的classpath</p><pre><code>hive (default)&gt; add jar /opt/module/datas/udf.jar;</code></pre></li><li><p>创建临时函数与开发好的java class关联</p><pre><code>hive (default)&gt; create temporary function mylower as "com.philcode.hive.Lower";</code></pre></li><li><p>即可在hql中使用自定义的函数strip</p><pre><code>hive (default)&gt; select ename, udf_lower(ename) lowername from emp;</code></pre></li></ul></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive HQL查询</title>
      <link href="/articles/hive/hql-cha-xun.html"/>
      <url>/articles/hive/hql-cha-xun.html</url>
      
        <content type="html"><![CDATA[<p>查询语句语法</p><pre><code>[WITH CommonTableExpression (, CommonTableExpression)*] (Note: Only available starting with Hive 0.13.0)SELECT [ALL | DISTINCT] select_expr, select_expr, ...FROM table_reference[WHERE where_condition][GROUP BY col_list][ORDER BY col_list][CLUSTER BY col_list | [DISTRIBUTE BY col_list] [SORT BY col_list]][LIMIT number]</code></pre><h2 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h2><ul><li>使用别名可以简化查询。</li><li>使用表名前缀可以提高执行效率。</li></ul><pre><code># 合并员工表和部门表hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d on e.deptno = d.deptno;</code></pre><h2 id="基本查询（Select…From）"><a href="#基本查询（Select…From）" class="headerlink" title="基本查询（Select…From）"></a>基本查询（Select…From）</h2><h3 id="全表和特定列查询"><a href="#全表和特定列查询" class="headerlink" title="全表和特定列查询"></a>全表和特定列查询</h3><ul><li><p>全表查询</p><pre><code>  hive (default)&gt; select * from emp;</code></pre></li><li><p>选择特定列查询</p><pre><code>  hive (default)&gt; select empno, ename from emp;</code></pre></li></ul><blockquote><p>注意：<br>（1）SQL 语言<font color="red">大小写不敏感</font><br>（2）SQL 可以写在一行或者多行<br>（3）<font color="red">关键字不能被缩写也不能分行</font><br>（4）各子句一般要分行写。<br>（5）使用缩进提高语句的可读性。</p></blockquote><h3 id="列别名"><a href="#列别名" class="headerlink" title="列别名"></a>列别名</h3><ul><li>重命名一个列</li><li>便于计算</li><li>紧跟列名，也可以<font color="red">在列名和别名之间加入关键字‘AS’</font></li></ul><p>查询名称和部门</p><pre><code>hive (default)&gt; select ename AS name, deptno dn from emp;</code></pre><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">A+B</td><td align="left">A和B 相加</td></tr><tr><td align="left">A-B</td><td align="left">A和B 相减</td></tr><tr><td align="left">A*B</td><td align="left">A和B 相乘</td></tr><tr><td align="left">A/B</td><td align="left">A和B 相除</td></tr><tr><td align="left">A%B</td><td align="left">A对B取余</td></tr><tr><td align="left">A&amp;B</td><td align="left">A和B按位取与</td></tr><tr><td align="left">A</td><td align="left">B</td></tr><tr><td align="left">A^B</td><td align="left">A和B按位取异或</td></tr><tr><td align="left">-A</td><td align="left">A按位取反</td></tr></tbody></table><p>查询出所有员工的薪水后加1显示</p><pre><code>hive (default)&gt; select sal +1 from emp;</code></pre><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li>求总行数（count）</li></ul><pre><code>hive (default)&gt; select count(*) cnt from emp;</code></pre><ul><li>求工资的最大值（max）</li></ul><pre><code>hive (default)&gt; select max(sal) max_sal from emp;</code></pre><ul><li>求工资的最小值（min）</li></ul><pre><code>hive (default)&gt; select min(sal) min_sal from emp;</code></pre><ul><li>求工资的总和（sum）</li></ul><pre><code>hive (default)&gt; select sum(sal) sum_sal from emp; </code></pre><ul><li>求工资的平均值（avg）</li></ul><pre><code>hive (default)&gt; select avg(sal) avg_sal from emp;</code></pre><h3 id="Limit-语句"><a href="#Limit-语句" class="headerlink" title="Limit 语句"></a>Limit 语句</h3><p>LIMIT 子句用于限制返回的行数。</p><p>典型的查询会返回多行数据。</p><pre><code>hive (default)&gt; select * from emp limit 5;</code></pre><h2 id="Where语句"><a href="#Where语句" class="headerlink" title="Where语句"></a>Where语句</h2><ul><li>使用WHERE子句，将不满足条件的行过滤掉</li><li>WHERE子句紧随FROM子句</li></ul><p>查询出薪水大于1000的所有员工</p><pre><code>hive (default)&gt; select * from emp where sal &gt; 1000;</code></pre><h3 id="比较运算符（Between-In-Is-Null）"><a href="#比较运算符（Between-In-Is-Null）" class="headerlink" title="比较运算符（Between / In / Is Null）"></a>比较运算符（Between / In / Is Null）</h3><p>下面表中描述了谓词操作符，这些操作符同样可以用于JOIN…ON和HAVING语句中。</p><table><thead><tr><th align="left">操作符</th><th align="left">支持的数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">A = B</td><td align="left">基本数据类型</td><td align="left">如果A等于B则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &lt;=&gt; B</td><td align="left">基本数据类型</td><td align="left">如果A和B都为NULL，则返回TRUE，其他的和等号（=）操作符的结果一致，如果任一为NULL则结果为NULL</td></tr><tr><td align="left">A&lt;&gt;B, A!=B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL则返回NULL；如果A不等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &lt; B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A小于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &lt;= B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A小于等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &gt; B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A大于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A &gt;= B</td><td align="left">基本数据类型</td><td align="left">A或者B为NULL，则返回NULL；如果A大于等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A [NOT] BETWEEN B AND C</td><td align="left">基本数据类型</td><td align="left">如果A，B或者C任一为NULL，则结果为NULL。如果A的值大于等于B而且小于或等于C，则结果为TRUE，反之为FALSE。如果使用NOT关键字则可达到相反的效果。</td></tr><tr><td align="left">A IS NULL</td><td align="left">所有数据类型</td><td align="left">如果A等于NULL，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">A IS NOT NULL</td><td align="left">所有数据类型</td><td align="left">如果A不等于NULL，则返回TRUE，反之返回FALSE</td></tr><tr><td align="left">IN(数值1, 数值2)</td><td align="left">所有数据类型</td><td align="left">使用 IN 运算显示列表中的值</td></tr><tr><td align="left">A [NOT] LIKE B</td><td align="left">STRING 类型</td><td align="left">B是一个SQL下的简单正则表达式，如果A与其匹配的话，则返回TRUE；反之返回FALSE。B的表达式说明如下：‘x%’表示A必须以字母‘x’开头，‘%x’表示A必须以字母’x’结尾，而‘%x%’表示A包含有字母’x’,可以位于开头，结尾或者字符串中间。如果使用NOT关键字则可达到相反的效果。</td></tr><tr><td align="left">A RLIKE B, A REGEXP B</td><td align="left">STRING 类型</td><td align="left">B是一个正则表达式，如果A与其匹配，则返回TRUE；反之返回FALSE。匹配使用的是JDK中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串A相匹配，而不是只需与其字符串匹配。</td></tr></tbody></table><pre><code># 查询出薪水等于5000的所有员工hive (default)&gt; select * from emp where sal = 5000;# 查询工资在500到1000的员工信息hive (default)&gt; select * from emp where sal between 500 and 1000;# 查询comm为空的所有员工信息hive (default)&gt; select * from emp where comm is null;# 查询工资是1500和5000的员工信息hive (default)&gt; select * from emp where sal IN (1500, 5000);</code></pre><h3 id="Like-和-RLike"><a href="#Like-和-RLike" class="headerlink" title="Like 和 RLike"></a>Like 和 RLike</h3><ul><li>使用LIKE运算选择类似的值</li><li>选择条件可以包含字符或数字:<ul><li><font color="red">% 代表零个或多个字符(任意个字符)</font>。</li><li><font color="red">_ 代表一个字符</font>。</li></ul></li><li>RLIKE子句是Hive中这个功能的一个扩展，其可以通过<font color="red">Java的正则表达式</font>这个更强大的语言来指定匹配条件。</li></ul><pre><code># 查找以2开头薪水的员工信息hive (default)&gt; select * from emp where sal LIKE '2%';# 查找第二个数值为2的薪水的员工信息hive (default)&gt; select * from emp where sal LIKE '_2%';# 查找薪水中含有2的员工信息hive (default)&gt; select * from emp where sal RLIKE '[2]';</code></pre><h3 id="逻辑运算符（And-Or-Not）"><a href="#逻辑运算符（And-Or-Not）" class="headerlink" title="逻辑运算符（And/Or/Not）"></a>逻辑运算符（And/Or/Not）</h3><table><thead><tr><th align="left">操作符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">AND</td><td align="left">逻辑并</td></tr><tr><td align="left">OR</td><td align="left">逻辑或</td></tr><tr><td align="left">NOT</td><td align="left">逻辑否</td></tr></tbody></table><pre><code># 查询薪水大于1000，部门是30hive (default)&gt; select * from emp where sal&gt;1000 and deptno=30;# 查询薪水大于1000，或者部门是30hive (default)&gt; select * from emp where sal&gt;1000 or deptno=30;# 查询除了20部门和30部门以外的员工信息hive (default)&gt; select * from emp where deptno not IN(30, 20);</code></pre><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><h3 id="Group-By-语句"><a href="#Group-By-语句" class="headerlink" title="Group By 语句"></a>Group By 语句</h3><p>GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。</p><pre><code># 计算emp表每个部门的平均工资hive (default)&gt; select t.deptno, avg(t.sal) avg_sal from emp t group by t.deptno;# 计算emp每个部门中每个岗位的最高薪水hive (default)&gt; select t.deptno, t.job, max(t.sal) max_sal from emp t group by t.deptno, t.job;</code></pre><h3 id="Having-语句"><a href="#Having-语句" class="headerlink" title="Having 语句"></a>Having 语句</h3><p>having 与 where 不同点</p><ul><li><strong>where</strong> 针对表中的列发挥作用，查询数据；<strong>having</strong> 针对查询结果中的列发挥作用，筛选数据。</li><li><strong>where</strong> 后面不能写分组函数，而 <strong>having</strong> 后面可以使用分组函数。</li><li><strong>having</strong> 只用于 <strong>group by</strong> 分组统计语句。</li></ul><pre><code># 求每个部门的平均工资hive (default)&gt; select deptno, avg(sal) from emp group by deptno;# 求每个部门的平均薪水大于2000的部门hive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno having avg_sal &gt; 2000;</code></pre><h2 id="Join-语句"><a href="#Join-语句" class="headerlink" title="Join 语句"></a>Join 语句</h2><p>Hive支持通常的SQL JOIN语句，但是<font color="red">只支持等值连接，不支持非等值连接</font>。</p><pre><code># 根据员工表和部门表中的部门编号相等，查询员工编号、员工名称和部门编号；hive (default)&gt; select e.empno, e.ename, d.deptno, d.dname from emp e join dept d on e.deptno = d.deptno;</code></pre><p>连接谓词(ON)中不支持or，以下 HQL 是错误的</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d on e.deptno = d.deptno or e.ename = d.ename;</code></pre><h3 id="内连接-JOIN"><a href="#内连接-JOIN" class="headerlink" title="内连接(JOIN)"></a>内连接(JOIN)</h3><p><strong>JOIN</strong> 只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d on e.deptno = d.deptno;</code></pre><h3 id="左外连接-LEFT-JOIN"><a href="#左外连接-LEFT-JOIN" class="headerlink" title="左外连接(LEFT JOIN)"></a>左外连接(LEFT JOIN)</h3><p><strong>LEFT JOIN</strong> 操作符<font color="red"><strong>左边表</strong></font>中符合 WHERE 子句的所有记录将会被返回，如果右边表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e left join dept d on e.deptno = d.deptno;</code></pre><h3 id="右外连接-RIGHT-JOIN"><a href="#右外连接-RIGHT-JOIN" class="headerlink" title="右外连接(RIGHT JOIN)"></a>右外连接(RIGHT JOIN)</h3><p><strong>RIGHT JOIN</strong> 操作符<font color="red"><strong>右边表</strong></font>中符合 WHERE 子句的所有记录将会被返回，如果左边表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e right join dept d on e.deptno = d.deptno;</code></pre><h3 id="满外连接-FULL-JOIN"><a href="#满外连接-FULL-JOIN" class="headerlink" title="满外连接(FULL JOIN)"></a>满外连接(FULL JOIN)</h3><p><strong>FULL JOIN</strong> 将会返回所有表中符合WHERE语句条件的所有记录，如果任一表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p><pre><code>hive (default)&gt; select e.empno, e.ename, d.deptno from emp e full join dept d on e.deptno = d.deptno;</code></pre><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><blockquote><p>注意：连接 n个表，至少需要n-1个连接条件。例如：连接三个表，至少需要两个连接条件。</p></blockquote><pre><code>hive (default)&gt; SELECT e.ename, d.deptno, l.loc_nameFROM   emp e JOIN   dept dON     d.deptno = e.deptno JOIN   location lON     d.loc = l.loc;</code></pre><p>大多数情况下，Hive会对每对JOIN连接对象启动一个MapReduce任务。</p><p>本例中会首先启动一个MapReduce job对表e和表d进行连接操作，然后会再启动一个MapReduce job将第一个MapReduce job的输出和表l进行连接操作。</p><blockquote><p>注意：为什么不是表d和表l先进行连接操作呢？这是因为Hive总是按照从左到右的顺序执行的。</p></blockquote><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>笛卡尔集会在下面条件下产生:</p><ul><li>省略连接条件</li><li>连接条件无效</li><li>所有表中的所有行互相连接</li></ul><pre><code>hive (default)&gt; select empno, dname from emp, dept;</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="全局排序（Order-By）"><a href="#全局排序（Order-By）" class="headerlink" title="全局排序（Order By）"></a>全局排序（Order By）</h3><p><strong>Order By</strong> 全局排序，一个 MapReduce Job</p><ul><li>使用 ORDER BY 子句排序，ASC（ascend）: 升序（默认），DESC（descend）: 降序</li><li>ORDER BY 子句在SELECT语句的结尾</li><li>可以对列的别名进行排序</li><li>支持多个列排序</li></ul><pre><code># 查询员工信息按工资升序排列hive (default)&gt; select * from emp order by sal;# 查询员工信息按工资降序排列hive (default)&gt; select * from emp order by sal desc;# 按照员工薪水的2倍排序（按照别名排序）hive (default)&gt; select ename, sal*2 twosal from emp order by twosal;# 按照部门升序排序和工资倒序排序（多个列排序）hive (default)&gt; select ename, deptno, sal from emp order by deptno, sal desc;</code></pre><h3 id="每个MapReduce内部排序（Sort-By）"><a href="#每个MapReduce内部排序（Sort-By）" class="headerlink" title="每个MapReduce内部排序（Sort By）"></a>每个MapReduce内部排序（Sort By）</h3><p><strong>Sort By</strong> 每个MapReduce内部进行排序，对全局结果集来说不是排序。</p><ol><li>设置reduce个数</li></ol><pre><code>hive (default)&gt; set mapreduce.job.reduces=3;</code></pre><p>2．查看设置reduce个数</p><pre><code>hive (default)&gt; set mapreduce.job.reduces;</code></pre><ol start="3"><li>根据部门编号降序查看员工信息</li></ol><pre><code>hive (default)&gt; select * from emp sort by empno desc;</code></pre><ol start="4"><li>将查询结果导入到文件中（按照部门编号降序排序）</li></ol><pre><code>hive (default)&gt; insert overwrite local directory '/opt/module/datas/sortby-result' select * from emp sort by deptno desc;</code></pre><h3 id="分区排序（Distribute-By）"><a href="#分区排序（Distribute-By）" class="headerlink" title="分区排序（Distribute By）"></a>分区排序（Distribute By）</h3><p><strong>Distribute By</strong> 类似MR中partition，进行分区，结合sort by使用。</p><blockquote><p>注意，Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前。</p></blockquote><p>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p><pre><code># 先按照部门编号分区，再按照员工编号降序排序。hive (default)&gt; set mapreduce.job.reduces=3;hive (default)&gt; insert overwrite local directory '/opt/module/datas/distribute-result' select * from emp distribute by deptno sort by empno desc;</code></pre><h3 id="Cluster-By"><a href="#Cluster-By" class="headerlink" title="Cluster By"></a>Cluster By</h3><p>当distribute by和sorts by字段相同时，可以使用cluster by方式。</p><p>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序<font color="red">只能是倒序排序</font>，不能指定排序规则为ASC或者DESC。</p><p>以下两种写法等价:</p><pre><code>hive (default)&gt; select * from emp cluster by deptno;hive (default)&gt; select * from emp distribute by deptno sort by deptno;</code></pre><blockquote><p>注意：按照部门编号分区，不一定就是固定死的数值，可以是20号和30号部门分到一个分区里面去。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive DML数据操作</title>
      <link href="/articles/hive/dml-shu-ju-cao-zuo.html"/>
      <url>/articles/hive/dml-shu-ju-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="向表中装载数据（Load）"><a href="#向表中装载数据（Load）" class="headerlink" title="向表中装载数据（Load）"></a>向表中装载数据（Load）</h3><ol><li><p>基本语法</p><pre><code> hive&gt; load data [local] inpath filepath [overwrite] into table table_name [partition (partcol1=val1,…)];</code></pre><p> 字段解释说明</p><ul><li><strong>load data</strong> 表示加载数据</li><li><strong>local</strong> 表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li><li><strong>inpath</strong> 表示加载数据的路径</li><li><strong>overwrite</strong> 表示覆盖表中已有数据，否则表示追加</li><li><strong>into table</strong> 表示加载到哪张表</li><li><strong>student</strong> 表示具体的表</li><li><strong>partition</strong> 表示上传到指定分区</li></ul></li><li><p>实操案例</p><p> 创建一张表</p><pre><code> hive (default)&gt; create table student(id string, name string) row format delimited fields terminated by '\t';</code></pre><ul><li><p>加载本地文件到hive</p><pre><code>hive (default)&gt; load data local inpath '/opt/module/datas/student.txt' into table default.student;</code></pre></li><li><p>加载HDFS文件到hive中</p><pre><code>   # 上传文件到HDFS   hive (default)&gt; dfs -put /opt/module/datas/student.txt /user/lvmaohai/hive;   # 加载HDFS上数据   hive (default)&gt; load data inpath '/user/lvmaohai/hive/student.txt' into table default.student;</code></pre></li><li><p>加载数据覆盖表中已有的数据</p><pre><code>   # 上传文件到HDFS   hive (default)&gt; dfs -put /opt/module/datas/student.txt /user/lvmaohai/hive;   # 加载数据覆盖表中已有的数据   hive (default)&gt; load data inpath '/user/lvmaohai/hive/student.txt' overwrite into table default.student;</code></pre></li></ul></li></ol><h3 id="向表中插入数据（Insert）"><a href="#向表中插入数据（Insert）" class="headerlink" title="向表中插入数据（Insert）"></a>向表中插入数据（Insert）</h3><p>创建一张分区表</p><pre><code>hive (default)&gt; create table student(id int, name string) partitioned by (month string) row format delimited fields terminated by '\t';</code></pre><ul><li>基本插入数据</li></ul><pre><code>insert into table student partition(month='201912') values(1,'xiaowei');</code></pre><ul><li>基本模式插入（根据单张表查询结果）</li></ul><pre><code>insert overwrite table student partition(month='201911') select id, name from student where month='201912';</code></pre><ul><li>多插入模式（根据多张表查询结果）</li></ul><pre><code>from student insert overwrite table student partition(month='201912') select id, name where month='201910' insert overwrite table student partition(month='201911') select id, name where month='201910';</code></pre><h3 id="创建表并加载数据（As-Select）"><a href="#创建表并加载数据（As-Select）" class="headerlink" title="创建表并加载数据（As Select）"></a>创建表并加载数据（As Select）</h3><p>根据查询结果创建表（查询的结果会添加到新创建的表中）</p><pre><code>create table if not exists student3 as select id, name from student;</code></pre><h3 id="创建表时指定加载数据路径"><a href="#创建表时指定加载数据路径" class="headerlink" title="创建表时指定加载数据路径"></a>创建表时指定加载数据路径</h3><ol><li>创建表，并指定在hdfs上的位置</li></ol><pre><code>create table if not exists student5(    id int,     name string)row format delimited fields terminated by '\t'location '/user/hive/warehouse/student5';</code></pre><ol start="2"><li>上传数据到hdfs上</li></ol><pre><code>hive (default)&gt; dfs -put /opt/module/datas/student.txt/user/hive/warehouse/student5;</code></pre><ol start="3"><li>查询数据</li></ol><pre><code>hive (default)&gt; select * from student5;</code></pre><h3 id="Import数据到指定Hive表中"><a href="#Import数据到指定Hive表中" class="headerlink" title="Import数据到指定Hive表中"></a>Import数据到指定Hive表中</h3><blockquote><p>注意：先用export导出后，再将数据导入。</p></blockquote><pre><code>hive (default)&gt; import table student2 partition(month='201709') from '/user/hive/warehouse/export/student';</code></pre><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><h3 id="Insert导出"><a href="#Insert导出" class="headerlink" title="Insert导出"></a>Insert导出</h3><ol><li>将查询的结果导出到本地</li></ol><pre><code>insert overwrite local directory '/opt/module/datas/export/student' select * from student;</code></pre><ol start="2"><li>将查询的结果格式化导出到本地</li></ol><pre><code>insert overwrite local directory '/opt/module/datas/export/student1' ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'select * from student;</code></pre><ol start="3"><li>将查询的结果导出到HDFS上(没有local)</li></ol><pre><code>insert overwrite directory '/user/atguigu/student2'ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' select * from student;</code></pre><h3 id="Hadoop命令导出到本地"><a href="#Hadoop命令导出到本地" class="headerlink" title="Hadoop命令导出到本地"></a>Hadoop命令导出到本地</h3><pre><code>hive (default)&gt; dfs -get /user/hive/warehouse/student/month=201909/000000_0 /opt/module/datas/export/student3.txt;</code></pre><h3 id="Hive-Shell-命令导出"><a href="#Hive-Shell-命令导出" class="headerlink" title="Hive Shell 命令导出"></a>Hive Shell 命令导出</h3><p>基本语法：（hive -f/-e 执行语句或者脚本 &gt; file）</p><pre><code>$ bin/hive -e 'select * from default.student;' &gt;/opt/module/datas/export/student4.txt;</code></pre><h3 id="Export导出到HDFS上"><a href="#Export导出到HDFS上" class="headerlink" title="Export导出到HDFS上"></a>Export导出到HDFS上</h3><pre><code>hive (default)&gt; export table default.student to '/user/hive/warehouse/export/student';</code></pre><h2 id="清除表中数据（Truncate）"><a href="#清除表中数据（Truncate）" class="headerlink" title="清除表中数据（Truncate）"></a>清除表中数据（Truncate）</h2><blockquote><p>注意：Truncate只能删除管理表，不能删除外部表中数据</p></blockquote><pre><code>hive (default)&gt; truncate table student;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive DDL数据定义</title>
      <link href="/articles/hive/ddl-shu-ju-ding-yi.html"/>
      <url>/articles/hive/ddl-shu-ju-ding-yi.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ul><li><p>创建一个数据库，数据库在HDFS上的默认存储路径是: <strong>/user/hive/warehouse/*.db</strong>。</p><pre><code>  hive (default)&gt; create database db_hive;</code></pre></li><li><p>避免要创建的数据库已经存在错误，增加if not exists判断。（标准写法）</p><pre><code>  hive (default)&gt; create database db_hive;  FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. Database db_hive already exists  hive (default)&gt; create database if not exists db_hive;</code></pre></li><li><p>创建一个数据库，指定数据库在HDFS上存放的位置</p><pre><code>  hive (default)&gt; create database db_hive2 location '/db_hive2.db';</code></pre></li></ul><h2 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h2><h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><ul><li><p>显示全部数据库</p><pre><code>  hive (default)&gt; show databases;</code></pre></li><li><p>过滤显示数据库</p><pre><code>  hive (default)&gt; show databases like 'db_hive*';</code></pre></li></ul><h3 id="查看数据库详情"><a href="#查看数据库详情" class="headerlink" title="查看数据库详情"></a>查看数据库详情</h3><ul><li><p>显示数据库信息</p><pre><code>  hive (default)&gt; desc database db_hive;  OK  db_hive        hdfs://hadoop102:9000/user/hive/warehouse/</code></pre></li><li><p>显示数据库详细信息（extended）</p><pre><code>  hive (default)&gt; desc database db_hive;  OK  db_hive        hdfs://hadoop102:9000/user/hive/warehouse/</code></pre></li></ul><h3 id="切换当前数据库"><a href="#切换当前数据库" class="headerlink" title="切换当前数据库"></a>切换当前数据库</h3><pre><code>hive (default)&gt; use db_hive;</code></pre><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>用户可以使用 <strong>ALTER DATABASE</strong> 命令为某个数据库的 <strong>DBPROPERTIES</strong> 设置键-值对属性值，来描述这个数据库的属性信息。</p><p>数据库的其他元数据信息都是不可更改的，包括数据库名和数据库所在的目录位置。</p><pre><code>hive (default)&gt; alter database db_hive set dbproperties('createtime'='20200104');</code></pre><p>在hive中查看修改结果</p><pre><code>hive (default)&gt; desc database extended db_hive;db_name comment location        owner_name      owner_type      parametersdb_hive         hdfs://hadoop102:8020/user/hive/warehouse/db_hive.db    lvmaohai USER    {createtime=20200104}</code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><ul><li><p>删除空数据库</p><pre><code>  hive (default)&gt;drop database db_hive2;</code></pre></li><li><p>如果删除的数据库不存在，最好采用 if exists判断数据库是否存在</p><pre><code>  hive (default)&gt; drop database db_hive;  FAILED: SemanticException [Error 10072]: Database does not exist: db_hive  hive (default)&gt; drop database if exists db_hive2;</code></pre></li><li><p>如果数据库不为空，可以采用cascade命令，强制删除</p><pre><code>  hive&gt; drop database db_hive;  FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. InvalidOperationException(message:Database db_hive is not empty. One or more tables exist.)  hive&gt; drop database db_hive cascade;</code></pre></li></ul><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="建表语法"><a href="#建表语法" class="headerlink" title="建表语法"></a>建表语法</h3><pre><code>CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name [(col_name data_type [COMMENT col_comment], ...)] [COMMENT table_comment] [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)] [CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS] [ROW FORMAT row_format] [STORED AS file_format] [LOCATION hdfs_path]</code></pre><p>字段解释说明</p><ul><li><p><strong>CREATE TABLE</strong> 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</p></li><li><p><strong>EXTERNAL</strong> 表示创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION）。</p><blockquote><p>创建内部表时，会将数据移动到数据仓库指向的路径；<br>创建外部表时，仅记录数据所在的路径，不对数据的位置做任何改变。<br>在删除表的时，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</p></blockquote></li><li><p><strong>COMMENT</strong> 为表和列添加注释。</p></li><li><p><strong>PARTITIONED BY</strong> 创建分区表</p></li><li><p><strong>CLUSTERED BY</strong> 创建分桶表</p></li><li><p><strong>SORTED BY</strong> 按指定字段排序（不常用）</p></li><li><p><strong>ROW FORMAT DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char] [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]</strong> 用户在建表的时候可以自定义SerDe或者使用自带的SerDe。如果没有指定 <strong>ROW FORMAT</strong> 或者 <strong>ROW FORMAT DELIMITED</strong>，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive通过SerDe确定表的具体的列的数据。</p><blockquote><p>SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化。</p></blockquote></li><li><p><strong>STORED AS</strong> 指定存储文件类型</p><blockquote><p>常用的存储文件类型：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）<br>如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</p></blockquote></li><li><p><strong>LOCATION</strong> 指定表在HDFS上的存储位置。</p></li><li><p><strong>LIKE</strong> 允许用户复制现有的表结构，但是不复制数据。</p></li></ul><h3 id="管理表-内部表"><a href="#管理表-内部表" class="headerlink" title="管理表(内部表)"></a>管理表(内部表)</h3><p>默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表，Hive会（或多或少地）控制着数据的生命周期。Hive默认情况下会将这些表的数据存储在由配置项 <strong>hive.metastore.warehouse.dir</strong> (例如，/user/hive/warehouse)所定义的目录的子目录下。    当删除一个管理表时，Hive也会删除这个表中数据。管理表不适合和其他工具共享数据。</p><ul><li><p>普通创建表</p><pre><code>  create table if not exists student2(      id int,       name string  )  row format delimited fields terminated by '\t'  stored as textfile  location '/user/hive/warehouse/student2';</code></pre></li><li><p>根据查询结果创建表（查询的结果会添加到新创建的表中）</p><pre><code>  create table if not exists student3 as select id, name from student;</code></pre></li><li><p>根据已经存在的表结构创建表</p><pre><code>  create table if not exists student4 like student;</code></pre></li><li><p>查询表的类型</p><pre><code>  hive (default)&gt; desc formatted student2;  Table Type:             MANAGED_TABLE</code></pre></li></ul><h3 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h3><p>因为表是外部表，所以Hive并非认为其完全拥有这份数据。删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉。</p><ul><li><p>创建表</p><pre><code>  create external table if not exists student5(      id int,       name string  )  row format delimited fields terminated by '\t'  stored as textfile  location '/student5';</code></pre></li><li><p>查询表的类型</p><pre><code>  hive (default)&gt; desc formatted student5;  Table Type:             EXTERNAL_TABLE</code></pre></li></ul><h4 id="管理表与外部表的互相转换"><a href="#管理表与外部表的互相转换" class="headerlink" title="管理表与外部表的互相转换"></a>管理表与外部表的互相转换</h4><ol><li><p>查询表的类型</p><pre><code> hive (default)&gt; desc formatted student2; Table Type:             MANAGED_TABLE</code></pre></li><li><p>修改内部表student2为外部表</p><pre><code> alter table student2 set tblproperties('EXTERNAL'='TRUE');</code></pre></li><li><p>查询表的类型</p><pre><code> hive (default)&gt; desc formatted student2; Table Type:             EXTERNAL_TABLE</code></pre></li><li><p>修改外部表student2为内部表</p><pre><code> alter table student2 set tblproperties('EXTERNAL'='FALSE');</code></pre></li><li><p>查询表的类型</p><pre><code> hive (default)&gt; desc formatted student2; Table Type:             MANAGED_TABLE</code></pre><blockquote><p>注意：(‘EXTERNAL’=’TRUE’)和(‘EXTERNAL’=’FALSE’)为固定写法，区分大小写！</p></blockquote></li></ol><h4 id="管理表和外部表的使用场景"><a href="#管理表和外部表的使用场景" class="headerlink" title="管理表和外部表的使用场景"></a>管理表和外部表的使用场景</h4><p>每天将收集到的网站日志定期流入HDFS文本文件。在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过SELECT+INSERT进入内部表。</p><h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p>分区表实际上就是对应一个HDFS文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过WHERE子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>引入分区表（需要根据日期对日志进行管理）</li></ol><pre><code>/user/hive/warehouse/log_partition/20200102/20200102.log/user/hive/warehouse/log_partition/20200103/20200103.log/user/hive/warehouse/log_partition/20200104/20200104.log</code></pre><ol start="2"><li>创建分区表语法</li></ol><pre><code>create table dept_partition(    deptno int,     dname string,     loc string)partitioned by (month string)row format delimited fields terminated by '\t';</code></pre><ol start="3"><li>加载数据到分区表中</li></ol><pre><code>hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201910');hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201911');hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201912’);</code></pre><ol start="4"><li><p>查询分区表中数据</p><ul><li><p>单分区查询</p><pre><code>   select * from dept_partition where month='201910';</code></pre></li><li><p>多分区联合查询</p><pre><code>   select * from dept_partition where month='201912'   union   select * from dept_partition where month='201911'   union   select * from dept_partition where month='201910';</code></pre></li></ul></li><li><p>增加分区</p><ul><li><p>创建单个分区</p><pre><code>   alter table dept_partition add partition(month='201912');</code></pre></li><li><p>同时创建多个分区</p><pre><code>   alter table dept_partition add partition(month='201912') partition(month='201911');</code></pre></li></ul></li><li><p>删除分区</p><ul><li><p>删除单个分区</p><pre><code>   alter table dept_partition drop partition (month='201912');</code></pre></li><li><p>同时删除多个分区</p><pre><code>   alter table dept_partition drop partition (month='201911'), partition (month='201912');</code></pre></li></ul></li><li><p>查看分区表有多少分区</p><pre><code> show partitions dept_partition;</code></pre></li><li><p>查看分区表结构</p><pre><code> desc formatted dept_partition; # Partition Information           # col_name              data_type               comment</code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4></li><li><p>创建二级分区表</p><pre><code> create table dept_partition2(     deptno int,      dname string,      loc string ) partitioned by (month string, day string) row format delimited fields terminated by '\t';</code></pre></li><li><p>正常的加载数据</p><ul><li><p>加载数据到二级分区表中</p><pre><code>   load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition2 partition(month='201912', day='13');</code></pre></li><li><p>查询分区数据</p><pre><code>   select * from dept_partition2 where month='201912' and day='13';</code></pre></li></ul></li><li><p>把数据直接上传到分区目录上，让分区表和数据产生关联的三种方式</p></li></ol><p>方式一：上传数据后修复</p><ul><li><p>上传数据</p><pre><code>   hive (default)&gt; dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201912/day=12;   hive (default)&gt; dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201912/day=12;</code></pre></li><li><p>查询数据（查询不到刚上传的数据）</p><pre><code>   hive (default)&gt; select * from dept_partition2 where month='201912' and day='12';</code></pre></li><li><p>执行修复命令</p><pre><code>   hive&gt; msck repair table dept_partition2;</code></pre></li><li><p>再次查询数据</p><pre><code>   hive (default)&gt; select * from dept_partition2 where month='201912' and day='12';</code></pre></li></ul><p>方式二：上传数据后添加分区</p><ul><li><p>上传数据</p><pre><code>   hive (default)&gt; dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201912/day=11;   hive (default)&gt; dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201912/day=11;</code></pre></li><li><p>执行添加分区</p><pre><code>   hive (default)&gt; alter table dept_partition2 add partition(month='201912', day='11');</code></pre></li><li><p>查询数据</p><pre><code>   hive (default)&gt; select * from dept_partition2 where month='201912' and day='11';</code></pre></li></ul><p>方式三：上传数据后load数据到分区</p><ul><li><p>创建目录</p><pre><code>   hive (default)&gt; dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201912/day=10;</code></pre></li><li><p>上传数据</p><pre><code>   hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table dept_partition2 partition(month='201912',day='10');</code></pre></li><li><p>查询数据</p><pre><code>   hive (default)&gt; select * from dept_partition2 where month='201912' and day='10';</code></pre></li></ul><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><ol><li><p>语法</p><pre><code> ALTER TABLE table_name RENAME TO new_table_name</code></pre></li><li><p>实操案例</p><pre><code> hive (default)&gt; alter table dept_partition2 rename to dept_partition3;</code></pre></li></ol><h3 id="增加-修改-替换列信息"><a href="#增加-修改-替换列信息" class="headerlink" title="增加/修改/替换列信息"></a>增加/修改/替换列信息</h3><ol><li><p>语法</p><ul><li><p>更新列</p><pre><code>   ALTER TABLE table_name CHANGE [COLUMN] col_old_name col_new_name column_type [COMMENT col_comment] [FIRST|AFTER column_name]</code></pre></li><li><p>增加和替换列</p><pre><code>   ALTER TABLE table_name ADD|REPLACE COLUMNS (col_name data_type [COMMENT col_comment], ...) </code></pre><blockquote><p>注：ADD是代表新增一字段，字段位置在所有列后面(partition列前)，REPLACE则是表示替换表中所有字段。</p></blockquote></li></ul></li><li><p>实操案例</p><ul><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li><li><p>添加列</p><pre><code>   hive (default)&gt; alter table dept_partition add columns(deptdesc string);</code></pre></li><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li><li><p>更新列</p><pre><code>   hive (default)&gt; alter table dept_partition change column deptdesc desc int;</code></pre></li><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li><li><p>替换列</p><pre><code>   hive (default)&gt; alter table dept_partition replace columns(deptno string, dname string, loc string);</code></pre></li><li><p>查询表结构</p><pre><code>   hive (default)&gt; desc dept_partition;</code></pre></li></ul></li></ol><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><pre><code>hive (default)&gt; drop table dept_partition;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 数据类型</title>
      <link href="/articles/hive/shu-ju-lei-xing.html"/>
      <url>/articles/hive/shu-ju-lei-xing.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th align="left">Hive数据类型</th><th align="left">Java数据类型</th><th align="left">长度</th><th align="left">语法示例</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">byte</td><td align="left">1byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">SMALINT</td><td align="left">short</td><td align="left">2byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">INT</td><td align="left">int</td><td align="left">4byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">BIGINT</td><td align="left">long</td><td align="left">8byte有符号整数</td><td align="left">20</td></tr><tr><td align="left">BOOLEAN</td><td align="left">boolean</td><td align="left">布尔类型，true或者false</td><td align="left">TRUE / FALSE</td></tr><tr><td align="left">FLOAT</td><td align="left">float</td><td align="left">单精度浮点数</td><td align="left">3.14159</td></tr><tr><td align="left">DOUBLE</td><td align="left">double</td><td align="left">双精度浮点数</td><td align="left">3.14159</td></tr><tr><td align="left">STRING</td><td align="left">string</td><td align="left">字符系列。可以指定字符集。可以使用单引号或者双引号。</td><td align="left">‘now is the time’ “for all good men”</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">date</td><td align="left">时间类型</td><td align="left">2020-01-04 00:00:00</td></tr><tr><td align="left">BINARY</td><td align="left">byte[]</td><td align="left">字节数组</td><td align="left"></td></tr></tbody></table><p>对于Hive的String类型相当于数据库的varchar类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储2GB的字符数。</p><h2 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h2><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th><th align="left">语法示例</th></tr></thead><tbody><tr><td align="left">STRUCT</td><td align="left">和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用。</td><td align="left">struct()</td></tr><tr><td align="left">MAP</td><td align="left">MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td align="left">map()</td></tr><tr><td align="left">ARRAY</td><td align="left">数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td align="left">array()</td></tr></tbody></table><p>Hive有三种复杂数据类型ARRAY、MAP 和 STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p>Hive的原子数据类型是可以进行隐式转换的，类似于Java的类型转换，例如某表达式使用INT类型，TINYINT会自动转换为INT类型，但是Hive不会进行反向转化，例如，某表达式使用TINYINT类型，INT不会自动转换为TINYINT类型，它会返回错误，除非使用CAST操作。</p><ol><li><p>隐式类型转换规则如下</p><ul><li>任何整数类型都可以隐式地转换为一个范围更广的类型，如TINYINT可以转换成INT，INT可以转换成BIGINT。</li><li>所有整数类型、FLOAT和STRING类型都可以隐式地转换成DOUBLE。</li><li>TINYINT、SMALLINT、INT都可以转换为FLOAT。</li><li>BOOLEAN类型不可以转换为任何其它的类型。</li></ul></li><li><p>可以使用CAST操作显示进行数据类型转换</p><p> 例如CAST(‘1’ AS INT)将把字符串’1’ 转换成整数1；如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值 NULL。</p></li></ol><h2 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h2><p>假设某表有如下一行，我们用JSON格式来表示其数据结构。在Hive下访问的格式为：</p><pre><code>{    "name": "songsong",    "friends": ["bingbing" , "lili"] , //列表Array,     "children": {                      //键值Map,        "xiao song": 18 ,        "xiaoxiao song": 19    }    "address": {                      //结构Struct,        "street": "hui long guan" ,        "city": "beijing"     }}</code></pre><p>基于上述数据结构，我们在Hive里创建对应的表，并导入数据。 </p><ol><li><p>创建本地测试文件test.txt</p><pre><code> songsong,bingbing_lili,xiao song:18_xiaoxiao song:19,hui long guan_beijingyangyang,caicai_susu,xiao yang:18_xiaoxiao yang:19,chao yang_beijing</code></pre><p> 注意：MAP，STRUCT和ARRAY里的元素间关系都可以用同一个字符表示，这里用“_”。</p></li><li><p>Hive上创建测试表test</p><pre><code> create table test(     name string,     friends array&lt;string&gt;,     children map&lt;string, int&gt;,     address struct&lt;street:string, city:string&gt; ) row format delimited fields terminated by ',' collection items terminated by '_' map keys terminated by ':' lines terminated by '\n';</code></pre><p> 字段解释：</p><ul><li><p><strong>row format delimited fields terminated by ‘,’</strong>        【 列分隔符 】</p></li><li><p><strong>collection items terminated by ‘_’</strong>                  【 MAP STRUCT 和 ARRAY 的分隔符(数据分割符号) 】</p></li><li><p><strong>map keys terminated by ‘:’</strong>                           【 MAP中的key与value的分隔符 】</p></li><li><p><strong>lines terminated by ‘\n’;</strong>                           【 行分隔符 】</p></li></ul></li><li><p>导入文本数据到测试表</p><pre><code> hive (default)&gt; load data local inpath '/opt/module/datas/test.txt' into table test</code></pre></li><li><p>访问三种集合列里的数据，以下分别是ARRAY，MAP，STRUCT的访问方式</p><pre><code> hive (default)&gt; select friends[1], children['xiao song'], address.city from test where name="songsong"; OK _c0     _c1     city lili    18      beijing Time taken: 0.076 seconds, Fetched: 1 row(s)</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 常见属性配置</title>
      <link href="/articles/hive/chang-jian-shu-xing-pei-zhi.html"/>
      <url>/articles/hive/chang-jian-shu-xing-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hive数据仓库位置配置"><a href="#Hive数据仓库位置配置" class="headerlink" title="Hive数据仓库位置配置"></a>Hive数据仓库位置配置</h2><ol><li><p>Default数据仓库的最原始位置是在hdfs上的：/user/hive/warehouse路径下。</p></li><li><p>在仓库目录下，没有对默认的数据库default创建文件夹。如果某张表属于default数据库，直接在数据仓库目录下创建一个文件夹。</p></li><li><p>修改default数据仓库原始位置（hive-site.xml）</p><pre><code> &lt;property&gt;     &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;     &lt;value&gt;/user/hive/warehouse&lt;/value&gt;     &lt;description&gt;location of default database for the warehouse&lt;/description&gt; &lt;/property&gt;</code></pre></li><li><p>配置同组用户有执行权限</p><pre><code>$ bin/hdfs dfs -chmod g+w /user/hive/warehouse</code></pre></li></ol><h2 id="HQL查询信息显示配置"><a href="#HQL查询信息显示配置" class="headerlink" title="HQL查询信息显示配置"></a>HQL查询信息显示配置</h2><ol><li><p>在hive-site.xml文件中添加如下配置信息，就可以实现显示当前数据库，以及查询表的头信息配置。</p><pre><code> &lt;property&gt;     &lt;name&gt;hive.cli.print.header&lt;/name&gt;     &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt;     &lt;name&gt;hive.cli.print.current.db&lt;/name&gt;     &lt;value&gt;true&lt;/value&gt; &lt;/property&gt;</code></pre></li><li><p>重新启动hive，对比配置前后差异。</p></li></ol><ul><li><p>配置前，如图所示<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hvie-02.jpg" alt=""></p></li><li><p>配置后，如图所示<br><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hvie-03.jpg" alt=""></p></li></ul><h2 id="参数配置方式"><a href="#参数配置方式" class="headerlink" title="参数配置方式"></a>参数配置方式</h2><ol><li><p>查看当前所有的配置信息</p><pre><code>hive&gt; set;</code></pre></li><li><p>参数的配置三种方式</p></li></ol><ul><li><p>配置文件方式</p><p>  默认配置文件：hive-default.xml </p><p>  用户自定义配置文件：hive-site.xml</p><p>  注意：用户自定义配置会覆盖默认配置。另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。配置文件的设定对本机启动的所有Hive进程都有效。</p></li><li><p>命令行参数方式</p><p>  启动Hive时，可以在命令行添加-hiveconf param=value来设定参数。</p><pre><code>  $ bin/hive -hiveconf mapred.reduce.tasks=10;</code></pre><p>  注意：仅对本次hive启动有效</p><p>  查看参数设置：</p><pre><code>  hive (default)&gt; set mapred.reduce.tasks;</code></pre></li><li><p>参数声明方式</p><p>  可以在HQL中使用SET关键字设定参数</p><pre><code>  hive (default)&gt; set mapred.reduce.tasks=100;</code></pre><p>  注意：仅对本次hive启动有效。</p><p>  查看参数设置</p><pre><code>  hive (default)&gt; set mapred.reduce.tasks;</code></pre></li></ul><p>上述三种设定方式的优先级依次递增。即配置文件&lt;命令行参数&lt;参数声明。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在会话建立以前已经完成了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 安装和配置</title>
      <link href="/articles/hive/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/hive/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Hadoop 版本：3.1.2</p></blockquote><h2 id="Homebrew安装Hive"><a href="#Homebrew安装Hive" class="headerlink" title="Homebrew安装Hive"></a>Homebrew安装Hive</h2><pre><code>$ brew install hive$ cd /usr/local/Celler/hive/3.1.2/libexec</code></pre><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><pre><code>$ vim ~/.zshrcexport HIVE_HOME="/usr/local/Cellar/hive/3.1.2/libexec"  export PATH="$HIVE_HOME/bin:$PATH"$ source ~/.zshrc</code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><blockquote><p>在 <strong>libexec/conf</strong> 下提供了一些 <strong>.template</strong> 模板，拷贝文件并去掉 <strong>.template</strong> 后缀即可</p></blockquote><h3 id="修改日志文件"><a href="#修改日志文件" class="headerlink" title="修改日志文件"></a>修改日志文件</h3><pre><code>$ cp hive-log4j2.properties.template hive-log4j2.properties$ cp beeline-log4j2.properties.template beeline-log4j2.properties$ cp hive-exec-log4j2.properties.template hive-exec-log4j2.properties$ cp llap-daemon-log4j2.properties.template llap-daemon-log4j2.properties$ cp llap-cli-log4j2.properties.template llap-cli-log4j2.properties# 更改 hive log 目录，默认为：/tmp$ vim hive-log4j2.propertiesproperty.hive.log.dir = /usr/local/Cellar/hive/3.1.2/libexec/logs</code></pre><h3 id="hive-site-xml-配置"><a href="#hive-site-xml-配置" class="headerlink" title="hive-site.xml 配置"></a>hive-site.xml 配置</h3><blockquote><p>将 <strong>hive-default.xml.template</strong> 文件复制一份，并且改名为 <strong>hive-site.xml</strong></p></blockquote><pre><code>$ cp hive-default.xml.template hive-site.xml</code></pre><ul><li>在 hdfs 创建 hive 目录（在hive-site.xml中有这样的配置）<pre><code>&lt;property&gt;  &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;  &lt;value&gt;/user/hive/warehouse&lt;/value&gt;  &lt;description&gt;Hive 默认的数据文件存储路径，通常为 HDFS 可写的路径&lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;hive.exec.scratchdir&lt;/name&gt;  &lt;value&gt;/tmp/hive&lt;/value&gt;  &lt;description&gt;HDFS路径，用于存储不同 map/reduce 阶段的执行计划和这些阶段的中间输出结果&lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;hive.cli.print.header&lt;/name&gt;  &lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;hive.cli.print.current.db&lt;/name&gt;  &lt;value&gt;true&lt;/value&gt;&lt;/property&gt;</code></pre></li></ul><p>在hdfs中新建目录 <strong>/user/hive/warehouse</strong> 和 <strong>/tmp/hive</strong>，赋予读写权限</p><pre><code>$ hadoop fs -mkdir -p /user/hive/warehouse$ hadoop fs -chmod 777 /user/hive/warehouse$ hadoop fs -mkdir -p /tmp/hive$ hadoop fs -chmod 777 /tmp/hive</code></pre><ul><li><p>修改 hive 临时目录</p><blockquote><p>将 ${system:java.io.tmpdir} 替换为本地hive的临时目录(/usr/local/Cellar/hive/3.1.2/tmp/hive)，并赋予读写权限；<br>将 ${system:user.name} 替换为root；</p></blockquote><pre><code>&lt;property&gt;  &lt;name&gt;hive.querylog.location&lt;/name&gt;  &lt;value&gt;${system:java.io.tmpdir}/${system:user.name}&lt;/value&gt;  &lt;description&gt;Location of Hive run time structured log file&lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;hive.server2.logging.operation.log.location&lt;/name&gt;  &lt;value&gt;${system:java.io.tmpdir}/${system:user.name}/operation_logs&lt;/value&gt;  &lt;description&gt;Top level directory where operation logs are stored if logging functionality is enabled&lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;  &lt;value&gt;${system:java.io.tmpdir}/${system:user.name}&lt;/value&gt;  &lt;description&gt;Local scratch space for Hive jobs&lt;/description&gt;&lt;/property&gt;&lt;property&gt;  &lt;name&gt;hive.downloaded.resources.dir&lt;/name&gt;  &lt;value&gt;${system:java.io.tmpdir}/${hive.session.id}_resources&lt;/value&gt;  &lt;description&gt;Temporary local directory for added resources in the remote file system.&lt;/description&gt;&lt;/property&gt;</code></pre></li><li><p>修改数据库相关的配置</p><blockquote><p>javax.jdo.option.ConnectionURL    将对应的value修改为MySQL的地址<br>javax.jdo.option.ConnectionDriverName    将对应的value修改为MySQL驱动类路径<br>javax.jdo.option.ConnectionUserName    将对应的value修改为MySQL数据库登录名<br>javax.jdo.option.ConnectionPassword    将对应的value修改为MySQL数据库的登录密码<br>hive.metastore.schema.verification    将对应的value修改为false</p></blockquote></li></ul><pre><code>&lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;    &lt;value&gt;jdbc:mysql://127.0.0.1:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;    &lt;value&gt;root&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;    &lt;value&gt;&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;    &lt;value&gt;false&lt;/value&gt;&lt;/property&gt;</code></pre><p><a href="https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-5.1.48.tar.gz" target="_blank" rel="noopener">下载MySQL驱动包</a> 并 copy 到lib目录下</p><ul><li>WebUI<blockquote><p>Hive从2.0版本开始，为HiveServer2提供了一个简单的WEB UI界面，界面中可以直观的看到当前链接的会话、历史日志、配置参数以及度量信息。</p></blockquote></li></ul><pre><code>&lt;property&gt;    &lt;name&gt;hive.server2.webui.host&lt;/name&gt;    &lt;value&gt;127.0.0.1&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;hive.server2.webui.port&lt;/name&gt;    &lt;value&gt;10002&lt;/value&gt;&lt;/property&gt;</code></pre><p>需要重启HiveServer2</p><pre><code>$ hive --service hiveserver2 &amp;</code></pre><h3 id="hive-env-sh-配置"><a href="#hive-env-sh-配置" class="headerlink" title="hive-env.sh 配置"></a>hive-env.sh 配置</h3><blockquote><p>将 <strong>hive-env.sh.template</strong> 文件复制一份，并且改名为 <strong>hive-env.sh</strong> 文件</p></blockquote><pre><code>$ cp hive-env.sh.template hive-env.sh$ vim hive-env.shexport HADOOP_HOME=/usr/local/Cellar/hadoop/3.2.1/libexecexport HIVE_CONF_DIR=/usr/local/Cellar/hive/3.1.2/confexport HIVE_AUX_JARS_PATH=/usr/local/Cellar/hive/3.1.2/lib</code></pre><h2 id="启动和测试"><a href="#启动和测试" class="headerlink" title="启动和测试"></a>启动和测试</h2><h3 id="对MySQL数据库进行初始化"><a href="#对MySQL数据库进行初始化" class="headerlink" title="对MySQL数据库进行初始化"></a>对MySQL数据库进行初始化</h3><blockquote><p>执行成功后，hive数据库里已经有一堆表创建好了</p></blockquote><pre><code>$ /usr/local/opt/hive/bin/schematool -initSchema -dbType mysql</code></pre><h3 id="启动hive"><a href="#启动hive" class="headerlink" title="启动hive"></a>启动hive</h3><pre><code>$ /usr/local/opt/hive/bin/hiveor$ hive</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code># 进入hive命令行&gt; show functions;</code></pre><h3 id="新建表以及导入数据的测试"><a href="#新建表以及导入数据的测试" class="headerlink" title="新建表以及导入数据的测试"></a>新建表以及导入数据的测试</h3><pre><code>&gt; create database db_hive_edu;&gt; use db_hive_edu;&gt; create table student(id int,name string) row format delimited fields terminated by '\t';# 将文件数据写入表中$ touch /opt/hive/student.txt001 zhangsan002 lisi003 wangwu004 zhaoliu005 chenqi# 载入表&gt; load data local inpath '/opt/hive/student.txt' into table db_hive_edu.student;# 测试&gt; select * from student;OK001 zhangsan002 lisi003 wangwu004 zhaoliu005 chenqi# 查看hdfs上数据/user/hive/warehouse/db_hive_edu.db/student# 在MySQL中查看$ SELECT * FROM hive.TBLS;</code></pre><h3 id="错误和解决"><a href="#错误和解决" class="headerlink" title="错误和解决"></a>错误和解决</h3><ol><li>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</li></ol><p>解决方案：实际上其实这个警告可以不予理会。</p><ol start="2"><li>There are 2 datanode(s) running and 2 node(s) areexcluded in this operation.</li></ol><p>发生原因：hadoop中的datanode有问题，没法写入数据。</p><p>解决方案：检查hadoop是否正常运行。</p><ol start="3"><li>Class path contains multiple SLF4J bindings.<pre><code>SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/usr/local/Cellar/hive/3.1.2/libexec/lib/log4j-slf4j-impl-2.10.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/usr/local/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</code></pre></li></ol><p>发生原因：hive 和 hadoop 依赖的 log4j-slf4j 包版本不一致，造成冲突</p><p>解决方案：删除 hive lib 目录下的 log4j-slf4j 包；</p><pre><code>$ rm /usr/local/Cellar/hive/3.1.2/libexec/lib/log4j-slf4j-impl-2.10.0.jar</code></pre><ol start="4"><li>Exception in thread “main” java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument<pre><code>Exception in thread "main" java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V at org.apache.hadoop.conf.Configuration.set(Configuration.java:1357) at org.apache.hadoop.conf.Configuration.set(Configuration.java:1338) at org.apache.hadoop.mapred.JobConf.setJar(JobConf.java:536) at org.apache.hadoop.mapred.JobConf.setJarByClass(JobConf.java:554) at org.apache.hadoop.mapred.JobConf.&lt;init&gt;(JobConf.java:448) at org.apache.hadoop.hive.conf.HiveConf.initialize(HiveConf.java:5141) at org.apache.hadoop.hive.conf.HiveConf.&lt;init&gt;(HiveConf.java:5104) at org.apache.hive.beeline.HiveSchemaTool.&lt;init&gt;(HiveSchemaTool.java:96) at org.apache.hive.beeline.HiveSchemaTool.main(HiveSchemaTool.java:1473) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.hadoop.util.RunJar.run(RunJar.java:323) at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</code></pre></li></ol><p>发生原因：hive内依赖的guava.jar和hadoop内的版本不一致造成的。</p><p>解决方案：</p><ul><li>查看hadoop安装目录下share/hadoop/common/lib内guava.jar版本；</li><li>查看hive安装目录下lib内guava.jar的版本；</li><li>如果两者不一致，删除版本低的，并拷贝高版本的到相应的目录下；<pre><code>$ rm /usr/local/Cellar/hive/3.1.2/libexec/lib/guava-19.0.jar$ cp /usr/local/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/guava-27.0-jre.jar /usr/local/Cellar/hive/3.1.2/libexec/lib/</code></pre></li></ul><ol start="5"><li>com.ctc.wstx.exc.WstxParsingException: Illegal character entity: expansion character<pre><code>Exception in thread "main" java.lang.RuntimeException: com.ctc.wstx.exc.WstxParsingException: Illegal character entity: expansion character (code 0x8at [row,col,system-id]: [3215,96,"file:/usr/local/Cellar/hive/3.1.2/libexec/conf/hive-site.xml"] at org.apache.hadoop.conf.Configuration.loadResource(Configuration.java:3024) at org.apache.hadoop.conf.Configuration.loadResources(Configuration.java:2973) at org.apache.hadoop.conf.Configuration.getProps(Configuration.java:2848) at org.apache.hadoop.conf.Configuration.get(Configuration.java:1460) at org.apache.hadoop.hive.conf.HiveConf.getVar(HiveConf.java:4996) at org.apache.hadoop.hive.conf.HiveConf.getVar(HiveConf.java:5069) at org.apache.hadoop.hive.conf.HiveConf.initialize(HiveConf.java:5156) at org.apache.hadoop.hive.conf.HiveConf.&lt;init&gt;(HiveConf.java:5104) at org.apache.hive.beeline.HiveSchemaTool.&lt;init&gt;(HiveSchemaTool.java:96) at org.apache.hive.beeline.HiveSchemaTool.main(HiveSchemaTool.java:1473) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.hadoop.util.RunJar.run(RunJar.java:323) at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</code></pre></li></ol><p>发生原因：hive-site.xml包括无效字符</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.txn.xlock.iow&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;    &lt;description&gt;      Ensures commands with OVERWRITE (such as INSERT OVERWRITE) acquire Exclusive locks for&amp;...8;transactional tables.  This ensures that inserts (w/o overwrite) running concurrently      are not hidden by the INSERT OVERWRITE.    &lt;/description&gt;&lt;/property</code></pre><p>解决方案：去掉无效字符</p><pre><code>&lt;property&gt;    &lt;name&gt;hive.txn.xlock.iow&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;    &lt;description&gt;      Ensures commands with OVERWRITE (such as INSERT OVERWRITE) acquire Exclusive locks for;transactional tables.  This ensures that inserts (w/o overwrite) running concurrently      are not hidden by the INSERT OVERWRITE.    &lt;/description&gt;&lt;/property&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 基本概念</title>
      <link href="/articles/hive/ji-ben-gai-nian.html"/>
      <url>/articles/hive/ji-ben-gai-nian.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h2><p>Hive是由Facebook开源用于解决海量结构化日志的数据统计。</p><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类SQL查询功能。</p><p>本质是：将HQL转化成MapReduce程序。</p><ul><li>Hive处理的数据存储在HDFS</li><li>Hive分析数据底层的实现是MapReduce</li><li>执行程序运行在Yarn上</li></ul><h2 id="Hive的优缺点"><a href="#Hive的优缺点" class="headerlink" title="Hive的优缺点"></a>Hive的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。</li><li>避免了去写MapReduce，减少开发人员的学习成本。</li><li>Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。</li><li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</li><li>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>Hive的HQL表达能力有限</p><ul><li>迭代式算法无法表达</li><li>数据挖掘方面不擅长</li></ul></li><li><p>Hive的效率比较低</p><ul><li>Hive自动生成的MapReduce作业，通常情况下不够智能化</li><li>Hive调优比较困难，粒度较粗</li></ul></li></ul><h2 id="Hive架构原理"><a href="#Hive架构原理" class="headerlink" title="Hive架构原理"></a>Hive架构原理</h2><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-00.jpg" alt=""></p><ul><li><p>用户接口：Client</p><ul><li>CLI（hive shell）</li><li>JDBC/ODBC(java访问hive)</li><li>WEBUI（浏览器访问hive）</li></ul></li><li><p>元数据：Metastore</p><p>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；</p><p>默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore</p></li><li><p>Hadoop</p><p>使用HDFS进行存储，使用MapReduce进行计算。</p></li><li><p>驱动器：Driver</p><ul><li>解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</li><li>编译器（Physical Plan）：将AST编译生成逻辑执行计划。</li><li>优化器（Query Optimizer）：对逻辑执行计划进行优化。</li><li>执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/hive-01.jpg" alt=""></p><p>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</p><h2 id="Hive和数据库比较"><a href="#Hive和数据库比较" class="headerlink" title="Hive和数据库比较"></a>Hive和数据库比较</h2><p>由于 Hive 采用了类似SQL 的查询语言 HQL(Hive Query Language)，因此很容易将 Hive 理解为数据库。其实从结构上来看，Hive 和数据库除了拥有类似的查询语言，再无类似之处。本文将从多个方面来阐述 Hive 和数据库的差异。数据库可以用在 Online 的应用中，但是Hive 是为数据仓库而设计的，清楚这一点，有助于从应用角度理解 Hive 的特性。</p><ul><li><p>查询语言</p><p>由于SQL被广泛的应用在数据仓库中，因此，专门针对Hive的特性设计了类SQL的查询语言HQL。熟悉SQL开发的开发者可以很方便的使用Hive进行开发。</p></li><li><p>数据存储位置</p><p>Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。</p></li><li><p>数据更新</p><p>由于Hive是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET修改数据。</p></li><li><p>索引</p><p>Hive在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key建立索引。Hive要访问数据中满足条件的特定值时，需要暴力扫描整个数据，因此访问延迟较高。由于 MapReduce 的引入， Hive 可以并行访问数据，因此即使没有索引，对于大数据量的访问，Hive 仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了 Hive 不适合在线数据查询。</p></li><li><p>执行</p><p>Hive中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的。而数据库通常有自己的执行引擎。</p></li><li><p>执行延迟</p><p>Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce框架。由于MapReduce 本身具有较高的延迟，因此在利用MapReduce 执行Hive查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive的并行计算显然能体现出优势。</p></li><li><p>可扩展性</p><p>由于Hive是建立在Hadoop之上的，因此Hive的可扩展性是和Hadoop的可扩展性是一致的（世界上最大的Hadoop 集群在 Yahoo!，2009年的规模在4000 台节点左右）。而数据库由于 ACID 语义的严格限制，扩展行非常有限。目前最先进的并行数据库 Oracle 在理论上的扩展能力也只有100台左右。</p></li><li><p>数据规模</p><p>由于Hive建立在集群上并可以利用MapReduce进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase 安装和配置</title>
      <link href="/articles/hbase/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/hbase/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Hadoop 版本：1.3.5</p></blockquote><h2 id="Homebrew安装HBase"><a href="#Homebrew安装HBase" class="headerlink" title="Homebrew安装HBase"></a>Homebrew安装HBase</h2><pre><code>$ brew info hbase$ brew install hbase$ cd /usr/local/Cellar/hbase/1.3.5/libexec</code></pre><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><pre><code>$ vim ~/.zshrcexport HBASE_HOME="/usr/local/Cellar/hbase/1.3.5/libexec"  export PATH="$HBASE_HOME/bin:$PATH"$ source ~/.zshrc</code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><blockquote><p>配置文件路径：/usr/local/Cellar/hbase/1.3.5/libexec/conf</p></blockquote><h3 id="hbase-env-sh"><a href="#hbase-env-sh" class="headerlink" title="hbase-env.sh"></a>hbase-env.sh</h3><pre><code>export HBASE_CLASSPATH=/usr/local/Celler/hadoop/3.2.1/libexec/etc/hadoopexport HBASE_MANAGES_ZK=trueexport HBASE_LOG_DIR=$HBASE_HOME/logsexport HBASE_REGIONSERVERS=$HBASE_HOME/conf/regionservers</code></pre><h3 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h3><pre><code>&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;hbase.rootdir&lt;/name&gt;        &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.zookeeper.property.clientPort&lt;/name&gt;        &lt;value&gt;2181&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;        &lt;value&gt;/usr/local/var/zookeeper&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.zookeeper.dns.interface&lt;/name&gt;        &lt;value&gt;lo0&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.regionserver.dns.interface&lt;/name&gt;        &lt;value&gt;lo0&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.master.dns.interface&lt;/name&gt;        &lt;value&gt;lo0&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;        &lt;value&gt;true&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;/name&gt;        &lt;value&gt;1&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;hbase.master.info.port&lt;/name&gt;        &lt;value&gt;16010&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;</code></pre><h3 id="regionservers"><a href="#regionservers" class="headerlink" title="regionservers"></a>regionservers</h3><pre><code>$ vim regionserverslocalhost</code></pre><h2 id="启动和关闭服务"><a href="#启动和关闭服务" class="headerlink" title="启动和关闭服务"></a>启动和关闭服务</h2><ul><li>启动服务</li></ul><pre><code>$ /usr/local/opt/hbase/bin/start-hbase.sh$ jps -ml86336 NodeManager85456 NameNode84672 HRegionServer85731 SecondaryNameNode85574 DataNode87355 HMaster87294 HQuorumPeer86222 ResourceManager</code></pre><ul><li>关闭服务</li></ul><pre><code>$ /usr/local/opt/hbase/bin/stop-hbase.sh$ jps -ml</code></pre><h2 id="访问监控页面"><a href="#访问监控页面" class="headerlink" title="访问监控页面"></a>访问监控页面</h2><p>HBase 默认提供了一个 webui 界面来监控它的健康状态，可以通过 <a href="http://localhost:16010/master-status" target="_blank" rel="noopener">http://localhost:16010/master-status</a> 访问。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 安装和配置</title>
      <link href="/articles/hadoop/an-zhuang-he-pei-zhi.html"/>
      <url>/articles/hadoop/an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统环境：MacOS<br>Hadoop 版本：3.2.1</p></blockquote><h2 id="打开本地电脑的ssh登录方式"><a href="#打开本地电脑的ssh登录方式" class="headerlink" title="打开本地电脑的ssh登录方式"></a>打开本地电脑的ssh登录方式</h2><pre><code># 生成公钥$ ssh-keygen -t rsa -C "your.email@example.com" -b 4096# 一路默认# 拷贝$ cat ~/.ssh/id_rsa.pub# 拷贝至电脑信任列表$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></pre><p>系统设置(System Preferences) -&gt; 共享(sharing) -&gt; 勾选☑️远程登录(Remote Login)</p><p>最后可以在终端(Terminal)测试下</p><pre><code>$ ssh localhost</code></pre><h2 id="使用Homebrew安装Hadoop"><a href="#使用Homebrew安装Hadoop" class="headerlink" title="使用Homebrew安装Hadoop"></a>使用Homebrew安装Hadoop</h2><pre><code>$ brew install hadoop$ cd /usr/local/Celler/hadoop/3.2.1/libexec</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><blockquote><p>Hadoop有三种安装模式：单机模式，伪分布式模式，分布式模式。Homebrew生成的默认是单机模式，下面只涉及伪分布式配置。<br>配置文件路径：/usr/local/Celler/hadoop/3.2.1/libexec/etc/hadoop</p></blockquote><ul><li>修改core-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;    &lt;value&gt;/usr/local/Cellar/hadoop/hdfs/tmp&lt;/value&gt;    &lt;description&gt;A base for other temporary directories&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;fs.default.name&lt;/name&gt;    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>修改mapred-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;mapred.job.tracker&lt;/name&gt;    &lt;value&gt;localhost:9010&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;    &lt;value&gt;HADOOP_MAPRED_HOME=$HADOOP_HOME&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;mapreduce.map.env&lt;/name&gt;    &lt;value&gt;HADOOP_MAPRED_HOME=$HADOOP_HOME&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;    &lt;value&gt;HADOOP_MAPRED_HOME=$HADOOP_HOME&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>修改hdfs-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;!-- 伪分布式配置 --&gt;  &lt;property&gt;    &lt;name&gt;dfs.replication&lt;/name&gt;    &lt;value&gt;1&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>yarn-site.xml</li></ul><pre><code>&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;</code></pre><ul><li>修改hadoop-env.sh</li></ul><pre><code>export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home"export HADOOP_OPTS="-Djava.net.preferIPv4Stack=true -Dsun.security.krb5.debug=true -Dsun.security.spnego.debug"export HADOOP_OS_TYPE=${HADOOP_OS_TYPE:-$(uname -s)}case ${HADOOP_OS_TYPE} in  Darwin*)    export HADOOP_OPTS="${HADOOP_OPTS} -Djava.security.krb5.realm= "    export HADOOP_OPTS="${HADOOP_OPTS} -Djava.security.krb5.kdc= "    export HADOOP_OPTS="${HADOOP_OPTS} -Djava.security.krb5.conf= "    export YARN_HOME=$HADOOP_HOME  ;;esac</code></pre><h2 id="初始化NameNode"><a href="#初始化NameNode" class="headerlink" title="初始化NameNode"></a>初始化NameNode</h2><blockquote><p>注意⚠️建议不要往~/.bash_profile里PATH变量添加hadoop相关的路径，楼主遇到过坑，每次在终端打开/usr/local/Celler/hadoop/3.2.1/</p></blockquote><pre><code>$ ./bin/hdfs namenode -format </code></pre><blockquote><p>只需要第一次,玩崩了也可以再执行下</p></blockquote><h2 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h2><blockquote><p>可以在终端任意位置使用jps查看启动的java应用程序，理论启动完毕其中会包括：NameNode, DataNode, NodeManager, ResoureManager四个java程序</p></blockquote><ul><li>启动NameNode和DataNode</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/start-dfs.sh$ jps -lm</code></pre><p>启动完毕即可登录：<a href="http://localhost:9870" target="_blank" rel="noopener">http://localhost:9870</a></p><ul><li>启动Yarn(ResourceManager和NodeManager)</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/start-yarn.sh$ jps -lm</code></pre><p>启动完毕即可登录：<a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></p><ul><li>关闭NameNode和DataNode</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/stop-dfs.sh$ jps -lm</code></pre><ul><li>关闭Yarn(ResourceManager和NodeManager)</li></ul><pre><code>$ /usr/local/opt/hadoop/libexec/sbin/stop-yarn.sh$ jps -lm</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code># 打开文件执行位置$ cd /usr/local/Cellar/hadoop/3.2.1/bin# 查看已启动内容$ jps# 查看信息$ hdfs dfsadmin -report# 创建文件夹$ hdfs dfs -mkdir /test# 查看文件夹下文件$ hdfs dfs -ls /# 查看所有命令$ hdfs dfs -help# 查看文件内容$ hdfs dfs -cat /test/mk.txt# 拷贝至hdfs$ hdfs dfs -copyFromLocal /Users/goddy/repo/hadoop/hdfs-file/mk.txt /test/# 拷贝至本地$ hdfs dfs -copyToLocal /test/mk.txt /Users/goddy/repo/hadoop/hdfs-file/mk2.txt# 更改文件权限$ hdfs dfs -chmod 777 /test/mk.txt备注：hdfs dfs 可以替换为：hadoop fs</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lrzsz 安装和配置</title>
      <link href="/articles/lrzsz-an-zhuang-he-pei-zhi.html"/>
      <url>/articles/lrzsz-an-zhuang-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>MacOS 自带的命令终端不支持使用 rz 和 sz 命令进行文件上传和下载。<br>可以安装另一种终端 iTerm2，然后对 iTerm2 进行扩展安装 lrzsz，这样 Mac 就可以使用 rz 和 sz 命令进行文件传输了。</p></blockquote><h2 id="远程服务器安装"><a href="#远程服务器安装" class="headerlink" title="远程服务器安装"></a>远程服务器安装</h2><p>在 centOs下，可以用自带的包管理工具进行下载，命令如下:</p><pre><code>$ yum -y install lrzsz</code></pre><h2 id="本地-MacOS-安装和配置"><a href="#本地-MacOS-安装和配置" class="headerlink" title="本地 MacOS 安装和配置"></a>本地 MacOS 安装和配置</h2><ol><li>Homebrew 安装 lrzsz</li></ol><pre><code>$ brew install lrzsz</code></pre><ol start="2"><li>下载安装 iterm2 send、recv <blockquote><p><a href="https://pan.baidu.com/s/1IVr1wCeSw1NPMPlZRg9Q5w" target="_blank" rel="noopener">下载链接</a> (提取码: h467)</p></blockquote></li></ol><pre><code>$ cp iterm2-send-zmodem.sh /usr/local/bin$ cp iterm2-recv-zmodem.sh /usr/local/bin# 添加可执行权限$ chmode +x /usr/local/bin/iterm2-send-zmodem.sh$ chmode +x /usr/local/bin/iterm2-recv-zmodem.sh</code></pre><ol start="3"><li>设置 iterm2，按 command+, 组合键，打开 iTerm2设置界面，切换到 Profiles-&gt; Default -&gt; Advanced，点击“Edit”</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/lrzsz-01.png" alt=""></p><ol start="4"><li>在弹出的界面点 “+” 新增两项参数，完成后，点击“Close”关闭弹窗</li></ol><table><thead><tr><th align="left">Regular Expression</th><th align="left">Action</th><th align="left">Action</th></tr></thead><tbody><tr><td align="left">**B010</td><td align="left">Run Silent Coprocess</td><td align="left">/usr/local/bin/iterm2-send-zmodem.sh</td></tr><tr><td align="left">**B00000000000000</td><td align="left">Run Silent Coprocess</td><td align="left">/usr/local/bin/iterm2-recv-zmodem.sh</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lvmaohai/blog/images/article/lrzsz-02.png" alt=""></p><ol start="5"><li>重启iterm2</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code># 链接远程linux（注意上传文件路径不能包含中文）$ rz # 上传文件$ sz # 下载文件</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> lrzsz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 镜像源</title>
      <link href="/articles/homebrew-jing-xiang-yuan.html"/>
      <url>/articles/homebrew-jing-xiang-yuan.html</url>
      
        <content type="html"><![CDATA[<h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2><ul><li>官方镜像源</li></ul><pre><code>https://github.com/Homebrew/brew.githttps://github.com/Homebrew/homebrew-core.git</code></pre><ul><li>中科大源</li></ul><pre><code>https://mirrors.ustc.edu.cn/brew.githttps://mirrors.ustc.edu.cn/homebrew-core.githttps://mirrors.ustc.edu.cn/homebrew-bottles</code></pre><ul><li>清华源</li></ul><pre><code>https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.githttps://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.githttps://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</code></pre><h2 id="镜像源设置"><a href="#镜像源设置" class="headerlink" title="镜像源设置"></a>镜像源设置</h2><ul><li>替换 brew.git</li></ul><pre><code>$ cd "$(brew --repo)”$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.gitor$ git -C "$(brew --repo)" remote set-url origin https://mirrors.ustc.edu.cn/brew.git</code></pre><ul><li>替换 homebrew-core.git</li></ul><pre><code>$ cd "$(brew --repo homebrew/core)”$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.gitor$ git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</code></pre><ul><li>执行更新</li></ul><pre><code>$ brew update</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Homebrew </tag>
            
            <tag> brew </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
